(  TRANSLATOR SCREENS FILE                          10/22/87 )                                                                                                                                     Система Построения Трансляторов  ТАРТУ                                      КОНСТРУКТОР                                         202400   Эстонская ССР  г  Тарту                                ул  Лийви 2                                                     Тартуский госуниверситет                                        кафедра программирования                                                                                                        Я. Р. Пейал                                                     В. К. Соо                                                       М. О. Томбакystem messages )                                             empty stack                                                     dictionary full                                                 has incorrect address mode                                      is redefined                                                    is undefined                                                    disk address out of range                                       stack overflow                                                  disk error                                                                                                                                                                                                                                                                                                                      BASE must be DECIMAL                                            missing decimal point                                           PC/FORTH 2.0                             Laboratory Microsystems( System messages )                                             compilation only, use in definition                             execution only                                                  conditionals not paired                                         definition not finished                                         in protected dictionary                                         use only when loading                                           off current editing screen                                      declare vocabulary                                                                                                                                                                                                                                              illegal dimension in array definition                           negative array index                                            array index too large                                                                                                           ( 8086 Assembler messages )                                     16 bit register not allowed                                     8 bit register not allowed                                      address out of range                                            immediate data value not allowed                                missing source register                                         missing destination register                                    illegal operation                                               illegal operand                                                 instruction not implemented                                     illegal destination register                                    illegal source register                                         illegal condition code                                          register mismatch                                               destination address missing                                                                                                     ( File interface  PC-DOS 2.0: D>S ?DISCERR INITSA...10/27/87 )  DECIMAL                                                         ( SCOMP ( SHofW GENTEXT ) ( SHofW PARSER )                      : \ ?EXEC OUT @ 15 > IF CR THEN [COMPILE] .( CR ;  IMMEDIATE    : VAR VARIABLE ;                                                : +C! ( N ADR --- )                                                SWAP OVER C@ + SWAP C! ;                                     : ?DISCERR ( errcode --- )                                       ?DUP IF CR .STATUS ABORT THEN ;                                : INITSA ( sa handle_pars --- )                                   ROT SEEK-ABS ?DISCERR ;                                       : CURRSA ( handle_pars --- sa )                                   2DUP ?OFFSET DUP >R SEEK-ABS ?DISCERR R> ;                                  HANDLE ATFILE                                     : FILELEN ( --- len ) ATFILE ?FILESIZE 0 ATFILE INITSA ;        -->                                                             ( File interface  PC-DOS 2.0: LREAD LWITE TOBYTE     09/21/90 ) : LREAD ( addr len handle_pars --- eof )                          2SWAP SWAP READ DUP                                             CASE 0 OF SWAP DROP ENDOF                                           -1 OF ENDOF                                                 ( ELSE ) ?DISCERR                                               ENDCASE ;                                                     : LWRITE ( addr len handle_pars --- )                            2SWAP SWAP WRITE ?DISCERR DROP ;                               : TOBYTE ( addr1 c --- addr2 )                                   ENCLOSE DROP SWAP DROP + ;                                       -->                                                                                                                                                                                                                                                                                                                           ( File intrface   PC-DOS 2.0: CHEXT MKEXT OPEXT      09/21/90 ) : CHEXT ( eaddr handle_pars --- \ replace file extension )       IF ( avatud ) DUP DUP @ CLOSE-FILE ?DISCERR                     THEN 4 + COUNT ASCII . TOBYTE 1+                                SWAP 1+ OVER 3 CMOVE 0 SWAP 3 + C! ;                           : OPEXT ( eaddr handle_pars --- )                                       ( replace extension & open file )                        2DUP >R >R CHEXT R> R> OPEN-FILE ?DISCERR ;                    : MKEXT ( eaddr handle_pars --- )                                       ( replace extensiom & make file )                        2DUP >R >R CHEXT R> R> MAKE-FILE ?DISCERR ;                    -->                                                                                                                                                                                                                                                                                                                             ( KONEC                                              09/21/90 ) : KONEC ( --- addr )                                            2 H@ ?fsemory: ?ALLOT,ARRAY,DYNAR,ALLOC,BARRAY            09/21/90 ) : ?ALLOT ( n --- )                                                      HERE + DUP KONEC U< 0= 2 ?ERROR DP ! ;                  : ARRAY <BUILDS 4 * HERE SWAP DUP ?ALLOT ERASE                          DOES> SWAP 2 <-L + ;                                    ( : HARRAY <BUILDS 2 * HERE SWAP DUP ?ALLOT ERASE                       DOES> SWAP 2 * + ;  )                                   : DYNAR                                                            <BUILDS  0 , DOES> @ SWAP 2 <-L + ;                          : ALLOC ( N CFA ---  ;   NB! ['] annab CFA )                       >BODY 4 + ( <BUILDS !!! ) HERE SWAP ! 4 * ?ALLOT ;           : BARRAY <BUILDS  DUP , 1 + DUP HERE SWAP                          BLANK ALLOT DOES> SWAP OVER @ OVER                              - 0 < 27 ?ERROR + 4 + ;                                      -->                                                                                                                             ( UPSTRING                                           09/13/90 ) : UPSTRING <BUILDS ( len UPSTRING XXX )                           HERE OVER 2+ ALLOT ( W ) C!                                              DOES> ( --- adr|SOUR SOUR|DEST                     10/15/89 ) HEX                                                             : CSTR, ( addr --- )                                                    DUP C@ 1+ HERE SWAP DUP ?ALLOT CMOVE ;                  : STR, ( addr --- )                                                     COUNT HERE SWAP DUP ?ALLOT CMOVE ;                      : DEST|SOUR ( destad sourad --- )                                       ( concatenates two counted strings dest|sour -> dest )          SWAP >R DUP COUNT R@ COUNT + SWAP CMOVE                         C@ R@ C@ + R> C! ;                                      : SOUR|DEST ( sourad destad --- )                                       ( concatenates two counted strings sour|dest -> dest )          DUP >R 1+ OVER C@ ( s da sl )                                   OVER + R@ C@ CMOVE> ( s )                                       DUP C@ R@ C@ + R@ C! ( s )                                      COUNT R> 1+ SWAP CMOVE ;     DECIMAL -->                ( Hash: $HALEN $HPLEN SET &HKEYL &HILEN &H#CELL ...  09/14/90 ) 4              CONSTANT $HALEN  ( Length of address field )     $HALEN 4 * 6 + CONSTANT $HPLEN  ( Length of the pasport )       : HL@ COMPILE @ ; IMMEDIATE ( fetch 32-bit )                    : SET <BUILDS HERE $HPLEN ERASE $HPLEN ALLOT                           DOES> ;                                                  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( Hash: &HKEYL &HILEN &H#CELL &HEND &HFFL &HLEN ...  09/14/90 ) : &HKEYL ( pasport --- addr_of_key_len ) ; IMMEDIATE            : &HILEN ( pasport --- addr_of_item_len ) 2+ ;                  : &H#CELL ( pasport --- addr_of_#item_cell ) 4 + ;              : &HLEN ( pasport --- addr_of_len )                                     [ 6 $HALEN 2* + ] LITERAL + ;                           : &HBASE ( pasport --- addr_of_baseash: HKEYL HILEN H#CELL HLEN HBASE HA@ HNEXT      09/14/90 ) : HKEYL ( pasport --- key_len ) &HKEYL H@ ;                     : HILEN ( pasport --- item_len ) &HILEN H@ ;                    : H#CELL ( pasport --- #item_cell ) &H#CELL H@ ;                : HLEN ( pasport --- table_len<bytes> ) &HLEN HL@ ;             : HBASE ( pasport --- base ) &HBASE HL@ ;                       : HA@ ( loc pasport --- n ; 32-bit fetch from table )                   HBASE + @ ;                                             : HNEXT ( ea1 pasport --- ea2 ; get next item in chained list )         DUP HILEN $HALEN - ROT + SWAP HA@ ; -->                                                                                                                                                                                                                                                                                                                                                                                                                 ( Hash: -VORDLE PORGE                                09/14/90 ) : -VORDLE ( ka ea pasport --- f )  ( compare key with item )                    ( returnes TRUE, if NOT equals )                        SWAP OVER HBASE + SWAP HKEYL S= 0= ;                    : PORGE ( ka pasport ea1 --- ea2 f )                                                     ( seach matching key in chained list )   SWAP >R                ( f=TRUE, if found )                     BEGIN ( ka ea ) 2DUP R@ -VORDLE                                    IF ( doesn't match ) ( ka ea ) DUP R@ HNEXT ?DUP                   IF ( goto next ) SWAP DROP FALSE                                ELSE ( end if chained list ) FALSE TRUE THEN                 ELSE ( matches ) TRUE TRUE                                      THEN                                                         UNTIL R> DROP ROT DROP ;                                       -->                                                                                                                            ( Hash: VOLDI HF HASH HCOUNT                         09/14/90 ) : VOLDI ( ka pasport --- k' )                                      0 SWAP HKEYL 2 PICK + ROT                                       DO I H@ XOR 2 +LOOP ABS ;                                    : HF ( ka pasport --- ea )                                              ( hash function: returns item location )                   SWAP OVER VOLDI OVER H#CELL MOD                                 SWAP HILEN * ;                                               : HASH ( ka pasport --- ea f )                                          ( main word to search in hash table )                      OVER OVER HF PORGE ;                                         : HCOUNT ( pasport --- base len )                                  DUP HBASE SWAP HLEN ;                                         -->                                                                                                                                                                                            ( Hash: ALLOCBF HREAD                                09/21/90 ) : ALLOCBF ( len --- baseash: ALLOCBF HREAD                                09/21/90 ) HEX                                                             : HREAD ( ext_addr pasport --- )                                        >R ATFILE OPEXT                                                 R@ $HPLEN ATFILE LREAD ?DISCERR                                 R@ HLEN ALLOCBF R@ &HBASE !                                     R> HCOUNT >R 0 ( base 0 )                                       BEGIN           ( base shift )                                     R@ OVER - 7FFF U> ( base shift f )                           WHILE                                                              2DUP + 7FFF ATFILE LREAD ?DISCERR                               7FFF +                                                       REPEAT          ( base shift ; R: tot_len )                     R> OVER - >R + R> ATFILE LREAD ?DISCERR ;               DECIMAL -->                                                                                                                     ( Parameters block                                   09/21/90 )  8 ARRAY %PARM                                                  8 4 * CONSTANT %PARML                                            0 %PARM CONSTANT SYMBARV       ( #symbols in gramar )           1 %PARM CONSTANT PRODARV       ( #productions )                 2 %PARM CONSTANT TERMARV       ( #terminal symbols )            3 %PARM CONSTANT NTARV         ( #nonterminal symbols )         4 %PARM CONSTANT %AXIOM        ( code of initial nonterminal )  5 %PARM CONSTANT %CORRECT      ( flag received by CONSTRUCTOR ) 6 %PARM CONSTANT %SPRARV       ( #productions ib source gramm ) 7 %PARM CONSTANT %ADLCTRL      ( distant context flag )        : PARMIN        ( read parameters block)                                LIT" PAR" ATFILE OPEXT                                          0 %PARM %PARML ATFILE LREAD ?DISCERR ;                   -->                                                                                                                            ( Installation constants & words                     04/10/91 ) 512 CONSTANT DIMCONST     ( MAX #SYMBOLS )                      640 CONSTANT GRAMCONST    ( MAX #PRODUCTIONS )                    5 CONSTANT PR#SYMBCONST ( MAX #SYMBOLS IN PRODUCTION )        ( Symbol !, @ )                                                 : S!  COMPILE H! ; IMMEDIATE  : S@  COMPILE H@ ; IMMEDIATE      ( Production # !, @ )                                           : P!  COMPILE H! ; IMMEDIATE  : P@  COMPILE H@ ; IMMEDIATE      VARIABLE MISLIKK            -1 MISLIKK !                                                                                        DIMCONST  256 < 2+            CONSTANT  SYMBCONST               GRAMCONST 256 < 2+            CONSTANT  PRODCONST               PR#SYMBCONST SYMBCONST * 1+   CONSTANT  PRODLCONST              SYMBCONST 1 - CONSTANT SNIHE                                    SYMBCONST 7 + CONSTANT ST#                                        -->                                                           ( Parser: MESSFILE .MSG                              09/21/90 ) HANDLE MESSFILE                                                 : .MSG ( n --- )        ( type message from .MSG-file )                 >R                                                              ATFILE DROP 4 + MESSFILE DROP 4 + OVER C@ 1+ CMOVE              LIT" MSG" MESSFILE CHEXT                                        MESSFILE OPEN-FILE                                              IF CR 7 EMIT ." .MSG: can't open message # " R@ . CR            ELSE                                                               R@ 64 * MESSFILE INITSA                                         HERE 64 MESSFILE LREAD                                          IF CR 7 EMIT ." .MSG: can't read message # " R@ . CR            ELSE HERE 64 -TRAILING TYPE                                     THEN MESSFILE CLOSE-FILE DROP                                THEN R> DROP ;                                           -->                                                            ( Tload: STRING PRLEN PRSEG PM PMATREAD              04/10/91 ) : STRING <BUILDS 0 C, DUP C, 0 C, HERE SWAP                                      DUP ?ALLOT BLANK                                        DOES> 3 + ;                                                   VARIABLE %LEXC VAR IDCODE                                       VAR CONSCODE VAR REALCODE                                       VAR OCTCODE VAR HEXCODE VAR ASCCODE                      VARIABLE PRLEN    VARIABLE PRBASE                               : PMATREAD ( --- )      ( read precedence matrix )                 SYMBARV @ 7 + 3 ->L 2*                                          PRLEN ! ( length of row in bytes )                              LIT" PRM" ATFILE OPEXT                                          FILELEN DUP ALLOCBF DUP                                         PRBASE ! ( base of precedence matrix)                           SWAP ATFILE LREAD DROP ;                                     -->                                                             ( Tload: LEXCIN                                      04/10/91 ) : PM ( i j --- rel<i,j> )       ( find precedence relation )       OVER MISLIKK S@ = IF 2DROP 1 ELSE                               SWAP PRLEN @ * OVER 2 ->L + PRBASE @ + C@ SWAP                  3 AND 2* 6 SWAP - ->L 3 AND THEN ;                           : LEXCIN ( --- )                                                   HERE %LEXC !                                                    LIT" LCL" ATFILE OPEXT                                          FILELEN HERE OVER ALLOT                                         SWAP ATFILE LREAD ?DISCERR                                    %LEXC @ DUP S@ IDCODE S! SYMBCONST + DUP S@ CONSCODE S!         SYMBCONST + DUP S@ REALCODE S! SYMBCONST + DUP S@ OCTCODE S!    SYMBCONST + DUP S@ HEXCODE S! SYMBCONST + S@ ASCCODE S! ;        -->                                                                                                                                                                                           ( Tload: variables & hash tables & strings           09/21/90 ) SET TERMINALS   SET RULES   ( hash tables for lexems & rules )  VAR LE#                                                         255 STRING LTEXT   ( sting for scanned lexem )                  PRODLCONST 1 - SYMBCONST - CONSTANT PP#  ( len of right part                                                of rule )           SYMBCONST 3 +   CONSTANT %STRL ( len of string descriptor                                       in table of lexem-classes )     LTEXT 3 -       CONSTANT STRSEM ( addr of string constants                                      semantic text )                 256      BARRAY CHARTYPE  ( types of characters for scanner )   DIMCONST BARRAY LM      ( vector of context symbols )           DYNAR PRODSEM   DYNAR TERMSEM   ( arrays of semantic text addr )HANDLE INFILE                                                   HANDLE OUTFILE OUTFILE FILENAME WORKFILE.OBJ                      -->                                                           ( C" POST$ PRE$ REG$ CUT$                            09/21/90 ) : C" [COMPILE] ASCII ; IMMEDIATE                                         1 CONSTANT POST$  2 CONSTANT PRE$                               4 CONSTANT REG$  16 CONSTANT CUT$                      -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( Tload: SEMREAD SEMCOUNT SEMTQQTL                   09/21/90 ) : SEMREAD ( --- )                                                  ?EXEC PRODARV @ ['] PRODSEM ALLOC HERE                          LIT" SEM" ATFILE OPEXT                                          FILELEN DUP ?ALLOT OVER 0 PRODSEM !  ( BAAS LEN )               ATFILE LREAD ?DISCERR ;                                      : SEMCOUNT ( AD --- AD AD+2 L )                                    DUP 1+ COUNT ;                                               : SEMTQQTL ( AD --- NEXT )                                         DUP 1+ C@ + 2+ ;                                              -->                                                                                                                                                                                                                                                                                                                                                                                            ( Tload: SEMTAB CHTSEM                               09/21/90 ) : SEMTAB ( --- )                                                   SEMREAD 0 PRODSEM @ %SPRARV @ 1 DO                              SEMTQQTL DUP I PRODSEM ! LOOP DROP                              PRODARV @ %SPRARV @ > IF 0 PRODSEM @                            PRODARV @ %SPRARV @ DO DUP I PRODSEM !                          LOOP DROP THEN ;                                             : CHTSEM ( KOOD --- )                                              TERMSEM STRSEM SWAP ! ;                                       -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( Tload: TSEMLEX TSEMTAB                             09/21/90 ) : TSEMLEX ( --- )                                                  6 0 DO %LEXC @ I SNIHE <-L + S@ CHTSEM                          LOOP 6 SYMBCONST * DUP %LEXC @ + C@ DUP 0 >                     IF SWAP 1+ %LEXC @ + SWAP 0 DO DUP S@                           CHTSEM SYMBCONST + 3 + LOOP DROP                                ELSE DROP DROP THEN ;                                        : TSEMTAB ( --- )                                                  TERMARV @ ['] TERMSEM ALLOC TERMARV @ 0 DO                      0 I TERMSEM ! LOOP                                              TSEMLEX ;                                                     -->                                                                                                                                                                                                                                                                                                                            ( Tload: CONTREAD LANGFILE                           09/21/90 ) SET HCONT                                                       : CONTREAD ( --- )                                                 LIT" LMV" ATFILE OPEXT                                          0 LM DIMCONST ATFILE LREAD ?DISCERR                             LIT" CON" HCONT HREAD ;                                      : LANGFILE ( --- )                                              (  CR ." Enter translator name: "                                  ATFILE INPUT-FILENAME CR LIT" .XXX" COUNT                       ATFILE DROP 4 + COUNT + SWAP CMOVE                              ATFILE DROP 4 + DUP C@ 4 + OVER C!                              COUNT + 0 SWAP C! ; )                                              ATFILE FILENAME JPIGRAM.XXX ;                                                                                             -->                                                                                                                             ( Tload: TERMIN RULESIN TLOAD                        09/21/90 ) : TERMIN  LIT" HLX" TERMINALS HREAD ;                           : RULESIN LIT" HGR" RULES     HREAD ;                           : TLOAD ( --- )                                                    LANGFILE PARMIN LEXCIN                                          TERMIN   RULESIN                                                PMATREAD SEMTAB TSEMTAB                                         %ADLCTRL @ IF CONTREAD THEN                                     ATFILE CLOSE-FILE ?DISCERR ;                                                                                                 VARIABLE ERRLOC                                                        -->                                                                                                                                                                                                                                                                                                                      ( Scan: PAIKA, NEXTCHAR, TVIIT                       09/21/90 ) : PAIKA ( TYYP YL.RAJA AL.RAJA --- )                               DO DUP I CHARTYPE C! LOOP DROP ;                               HEX  0 CHARTYPE 100 ERASE                                        4  1  0 PAIKA 6 0E 0D PAIKA 5 1B 1A PAIKA 3 30 21 PAIKA         2 3A 30 PAIKA 3 41 3A PAIKA 1 5B 41 PAIKA 3 61 5B PAIKA         1 7B 61 PAIKA 3 7F 7B PAIKA 1 A8 80 PAIKA 1 F0 E0 PAIKA      DECIMAL       FORGET PAIKA                                      32768 CONSTANT BUFLEN                                           VAR BUFBEG VAR BUFEND VAR BUFPOS VAR LEXBEG                     26 CONSTANT ASCII_SUB                                           VARIABLE LCODE                                                                 -->                                                                                                                                                                                                                                              ( Variables for scanner, parser and generator        04/10/91 ) VAR LINE_BEG VAR LINE_END                                       VAR LINE#                                                       HANDLE ERRFILE ERRFILE FILENAME M2ERR.TMP                       VAR STAT# VAR ERRFLAG VAR SCANERR                               VARIABLE PREV_POS VARIABLE PREV_LINE                            VARIABLE LAST                                                   VAR PUULQPP                                                     VAR HANDL VAR TOP VAR LNK VAR FREE                              VAR EREL VAR KOOD VAR SLINK VAR VIIMANE                         PRODLCONST UPSTRING RPART                                        VAR LCONT VAR VANA                                              VARIABLE MAG 500 ALLOT                                         : CODE TOP @ 1+ S@ ;                                            : CODE! KOOD @ TOP @ 1+ S! ;                                    : REL TOP @ C@ ; -->                                            ( Variables for scanner, parser and generator        07/27/90 ) VARIABLE FLOW            ( CURRENT FLOW )                       1     CONSTANT #FLOW     ( NUMBER OF FLOWS )                    #FLOW ARRAY FLSEGM       ( FLOW SEGMENTS )                      #FLOW ARRAY FLOFFS       ( >IN  FOR FLOW )                      VARIABLE SHOU                                                   VARIABLE LOC  VARIABLE SOUROW                                   HERE BL C, BL C, CONSTANT SPCAD                                   VARIABLE ROOT                                                   VARIABLE W0AREA HERE W0AREA ! 32 ALLOT                        VARIABLE NTRANS                                                 VAR DCFL                                                        VAR TRIPLE SYMBCONST 2 * ?ALLOT                                 HANDLE RESULTFILE                                               VARIABLE LOADNAME 11 ALLOT                                      DIRECTORY OBJECTPATH OBJECTPATH 40 ERASE   -->                  ( Scan: LINE_BOUNDS                                  04/10/91 ) : NEXTCHAR BUFPOS @ C@ 1 BUFPOS +! ;                            : SEPARATOR? ( char --- char f )                                        DUP CHARTYPE C@ DUP 3 = OVER 5 = OR SWAP 6 = OR ;       : LINE_BOUNDS ( --- )                                                   BUFPOS @ 78 0                                                   DO 1- DUP C@ CHARTYPE C@ 6 =                                       OVER BUFBEG @ < OR                                              IF LEAVE THEN                                                LOOP 1+ LINE_BEG !                                              BUFPOS @                                                        78 BUFPOS @ LINE_BEG @ - - 0                                    DO DUP C@ CHARTYPE C@ DUP 6 = OVER 4 = OR SWAP 5 = OR              IF LEAVE THEN                                                   1+                                                           LOOP LINE_END ! ; -->                                   ( Error indicating                                   04/10/91 ) : ALGUS ( --- ) 1 LTEXT 3 - C! KONEC DUP PUULQPP ! LAST !          MAG DUP ST# ERASE DUP HANDL ! DUP TOP ! ST# + FREE !  ;      : ALUS ( --- ) BEGIN REL TOP @                                      DUP HANDL ! ST# - TOP ! 1 = UNTIL CODE LCONT ! ;            : WRITE_ERR ERRFILE MAKE-FILE ?DISCERR                                  LINE# 4 ERRFILE LWRITE                                          ERRFILE CLOSE-FILE ?DISCERR ;                           : ERRORLINE ( --- )                                                     CR LINE_BOUNDS                                                  LINE_BEG @ LINE_END @ OVER - TYPE CR                            BUFPOS @ LINE_BEG @ - 1- SPACES ASCII ^ EMIT ;          -->                                                                                                                                                                                                                                                             ( Scan: PARSVIGA                                     05/28/91 ) : ERR_EXIT WRITE_ERR 8 XCODE !                                          ALGUS TOP @ ST# + DUP TOP ! DUP HANDL ! ST# + FREE !            MISLIKK S@ KOOD ! CODE! TRUE ERRFLAG ! ;                : MISLIKK-IN-STACK? ( --- flag )                                   BEGIN CODE MISLIKK S@ = IF -1 EXIT THEN TOP @ MAG >             WHILE TOP @ ST# - TOP ! REPEAT 0 ;                           : PARSVIGA ( n --- ) DUP 3 = OVER 4 = OR                        IF MISLIKK-IN-STACK?                                            ELSE FALSE THEN                                                         IF DROP ERR_EXIT ELSE                                           LTEXT 1- COUNT TYPE 3 SPACES .MSG                               ERRORLINE ERR_EXIT CR                                           ." *** To continue press any key ***" KEY DROP CR CR            THEN ; -->                                                                                                              ( Scan: INITBUF RELBUF                               04/10/91 ) : INITBUF ( --- )                                                       HERE BUFBEG ! BUFLEN 4 + ?ALLOT                                 0 HERE 4 - ! BUFBEG @ BUFLEN + BUFEND !                         INFILE OPEN-FILE-R/O ?DISCERR ;                         : RELBUF ( --- )                                                        INFILE CLOSE-FILE ?DISCERR                                      BUFBEG @ DP ! 0 BUFBEG ! ;                              : .LEX                                                                  LTEXT 1- COUNT TYPE 2 SPACES LCODE @ . CR ;             -->                                                                                                                                                                                                                                                                                                                                                                                             ( Scan: FILLBUF RETRY NEWLINE                    09/22/89 )     : FILLBUF ( --- )                                                       BUFBEG @ BUFPOS !                                               INFILE BUFLEN BUFBEG @ READ                                     CASE  0 OF DUP BUFLEN <                                                    IF ASCII_SUB OVER BUFBEG @ + !                                  THEN DROP ENDOF                                           -1 OF ASCII_SUB BUFBEG @ ! ENDOF                              ( else ) ?DISCERR                                            ENDCASE ;                                               : RETRY INFILE LEXBEG @ BUFPOS @ - 1+ SEEK-REL                          ?DISCERR FILLBUF ;                                      : EMPTY ( A --- )                                                0 OVER 1 - C! DUP 2 - C@ BLANK ;                               : NEWLINE ( --- )                                                       1 LINE# +! ASCII_CR EMIT ." Line " LINE# @ . ; -->      ( Scan: SEPARATOR? SCANVIGA                          04/10/91 ) : SCANVIGA ( n --- )                                                    PARSVIGA                                                        BUFPOS @ 1-                                                     BEGIN 1+ DUP C@                                                    DUP CHARTYPE C@ 4 =                                             IF DROP LEXBEG @ -                                                 RETRY                                                           BUFPOS @ + DUP C@                                            THEN                                                            SEPARATOR? SWAP DROP                                         UNTIL                                                           BUFPOS !                                                        LTEXT EMPTY                                                     TRUE SCANERR ! ; -->                                                                                                    ( Parser: LISA LISAS EMPTY                           04/10/91 ) : LISA ( CHAR A --- ) ( LISAB STRINGILE A SYMBOLI CHAR )          DUP 1 - C@ >R DUP 2 - C@ R@ 1 + <                               IF 9 SCANVIGA                                                   THEN DUP 1 - R@ 1 + SWAP C! R> + C! ;                         : LISAS ( SYMB A --- )                                            DUP 1 - C@ >R DUP 2 - C@ R@ SYMBCONST + <                       IF 2DROP 4 PARSVIGA                                             ELSE DUP 1 - R@ SYMBCONST + SWAP C! R> + S!                     THEN ;                                                                                                                          -->                                                                                                                                                                                                                                                                                                                           ( Scan: COMMCHAR SCANCOMM                        09/22/89 )     : COMMCHAR ( --- )                                                      NEXTCHAR CHARTYPE C@                                            CASE 4 OF BUFPOS @ 1- LEXBEG ! RETRY ENDOF                           5 OF 10 SCANVIGA ENDOF                                          6 OF BUFPOS @ C@ CHARTYPE C@ 4 <>                                    IF NEWLINE THEN       ENDOF                           ENDCASE ;                                               : SCANCOMM ( --- )                                                      BEGIN BUFPOS @ LIT" *)" 1+ 2 S=                                    IF 2 BUFPOS +! EXIT THEN                                        BUFPOS @ LIT" (*" 1+ 2 S=                                       IF 2 BUFPOS +! MYSELF                                           ELSE COMMCHAR THEN                                              SCANERR @                                                    UNTIL ;  -->                                            ( Scan: SCANSTR                                  09/21/89 )     : SCANSTR ( addr --- f ; TRUE, if string scanned )                      SYMBCONST + DUP C@ LE# C! 1+ H@ %LEXC @ + BUFPOS @              BEGIN ( sdaddr bufaddr )                                              OVER OVER LE# C@ S= 0=                                    WHILE NEXTCHAR DUP CHARTYPE C@ DUP 3 >                            IF DUP 4 =                                                         IF 2DROP 2DROP RETRY FALSE EXIT                                 ELSE 2DROP 2DROP 10 SCANVIGA EXIT                               THEN                                                         ELSE DROP LTEXT LISA 1+                                         THEN                                                          REPEAT 2DROP LE# C@ 0                                           DO NEXTCHAR DROP LOOP LCODE S@ ; -->                                                                                                                                                    ( Scan: FINDSTR TERBASE TER@                     09/21/89 )     : FINDSTR ( --- f )                                             %LEXC @ [ 6 SYMBCONST * DUP 1+ ] LITERAL +                      0 %LEXC @ LITERAL + C@ 0                                        DO DROP LCODE S@ OVER S@ =                                         IF LTEXT EMPTY SCANSTR 1 LEAVE                                  ELSE %STRL + 0 THEN                                          LOOP 0= IF DROP 1 SCANVIGA                                              THEN ;                                                  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( LVIIT$ MAXLEX# LVQTI# LLISA# TERBASE TER@      09/21/89 )     8 CONSTANT LVIIT$ ( location of link to keyword remainder )     14 CONSTANT MAXLEX# ( maximum length of keyword )               6 CONSTANT LVQTI# ( length of main part of keyword )            8 CONSTANT LLISA# ( length of remainder of keyword )            : TERBASE ( --- base )                                                  TERMINALS HBASE ;                                       : TER@ ( loc --- 16bcan: TAGASI LEKSEEM? TYHIK KOOD!              09/17/89 )     : LEKSEEM? ( --- ADR FLAG ) ( search for lexem )                        LTEXT TERMINALS HASH                                            IF DUP LVIIT$ + TER@ ?DUP                                          IF 1+ TERBASE + LTEXT LVQTI# + LLISA# S=                           IF LTEXT 1- C@ MAXLEX# > 0=                                     ELSE FALSE THEN                                              ELSE LTEXT 1- C@ LVQTI# > 0= THEN                            ELSE FALSE THEN ;                                       : TAGASI ( --- ) -1 BUFPOS +! ;                                 : TYHIK ( --- )                                                         BL LTEXT DUP 1- DUP >R C@ 1- DUP R> C! + C! ;           : KOOD! ( ADR --- )                                                     6 + TERMINALS HBASE + S@ LCODE ! ; -->                                                                                                                                                  ( Scan: DELIM/STR SIMP_DELIM COMP_DELIM          09/22/89 )     : DELIM/STR ( addr --- f )                                              KOOD! LCODE S@ ?DUP                                             IF TERMSEM @ STRSEM =                                              IF FINDSTR ELSE TRUE THEN                                    ELSE SCANCOMM FALSE                                             THEN ;                                                  : SIMP_DELIM ( --- f )                                                  LEKSEEM? IF DELIM/STR                                                    ELSE 2 SCANVIGA FALSE                                           THEN ;                                         : COMP_DELIM ( --- f )                                                  LEKSEEM? IF DELIM/STR                                                    ELSE DROP TYHIK TAGASI SIMP_DELIM                               THEN ; -->                                                                                                     ( Scan: DELIM SWITCH STATE NEXTSTATE             09/17/89 )     : DELIM ( char --- f )                                                  LTEXT LISA NEXTCHAR                                             DUP CHARTYPE C@                                                 CASE 3 OF LTEXT LISA COMP_DELIM ENDOF                                4 OF DROP RETRY FALSE ENDOF                                  ( else ) 2DROP TAGASI SIMP_DELIM 0                            ENDCASE ;                                               : SWITCH: ( in form:    SWITCH: XXXX <words> ; )                          <BUILDS SMUDGE !CSP [COMPILE] ]                                DOES> ( n --- )                                                        SWAP 2* 2* + @ EXECUTE ;                        : NEXTSTATE ( char1 n --- char2 f )                                     STAT# ! LTEXT LISA NEXTCHAR FALSE ;                     -->                                                                                                                             ( Scan: .. NUM0 EH.?                             09/17/89 )     : .. ( n n1 n2 --- n f ) ( check if n1 <= n <= n2 )                     >R OVER <= OVER R> <= AND ;                             ( Automata for numeric constants )                              ( NUMi  [ char1 --- char2 f ] ; f=TRUE, if constant ended )     : NUM0  ASCII 0 ASCII 7 ..                                              IF 1 NEXTSTATE                                                  ELSE 2 NEXTSTATE                                                THEN ;                                                  : EH.?  DUP ASCII E =                                                   IF 6 NEXTSTATE                                                  ELSE DUP ASCII H =                                                IF 7 NEXTSTATE                                                  ELSE DUP ASCII . =                                                IF 8 NEXTSTATE                                                  ELSE CONSCODE @ LCODE ! TRUE THEN THEN THEN ; -->   ( Scan: NUM1                                     09/17/89 )     : NUM1 ( o{o} )                                                         ASCII 0 ASCII 7 ..                                              IF 1 NEXTSTATE                                                  ELSE DUP ASCII 8 = OVER ASCII 9 = OR                               IF 2 NEXTSTATE                                                  ELSE DUP ASCII A = OVER ASCII D = OR                                 OVER ASCII F = OR                                             IF 3 NEXTSTATE                                                  ELSE DUP ASCII B =                                                IF 4 NEXTSTATE                                                  ELSE DUP ASCII C =                                                 IF 5 NEXTSTATE                                                  ELSE EH.?                                            THEN THEN THEN THEN THEN ;                              : DIGIT? DUP CHARTYPE C@ 2 = ;  -->                             ( Scan: NUM2 NUM3                                09/17/89 )     : NUM2 ( n{n} )                                                         DIGIT?                                                          IF 2 NEXTSTATE                                                  ELSE ASCII A ASCII D .. OVER ASCII F = OR                         IF 3 NEXTSTATE                                                  ELSE EH.?                                                     THEN THEN ;                                             : NUM3 ( nh{h} )                                                        DIGIT?                                                          IF 3 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                           IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =                                                IF 7 NEXTSTATE                                                  ELSE 12 SCANVIGA FALSE THEN THEN THEN ; -->         ( Scan: NUM4 NUM5                                09/17/89 )     : NUM4 ( o{o}B )                                                        DIGIT?                                                          IF 3 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =                                                IF 7 NEXTSTATE                                                  ELSE TYHIK OCTCODE @ LCODE ! TRUE                          THEN THEN THEN ;                                        : NUM5 ( o{o}C )                                                        DIGIT?                                                          IF 3 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =   -->                             ( Scan: NUM5 <cont> NUM6                         09/17/89 )                  IF 7 NEXTSTATE                                                  ELSE TYHIK ASCCODE @ LCODE ! TRUE                          THEN THEN THEN ;                                        : NUM6 ( n{n}E )                                                        DIGIT?                                                          IF 9 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII + = OVER ASCII - = OR                              IF 10 NEXTSTATE                                                 ELSE 12 SCANVIGA FALSE                                     THEN THEN THEN ;                                        : NUM7 ( nh{h}H )                                                       TYHIK HEXCODE @ LCODE ! TRUE ;                          -->                                                             ( Scan: NUM8 NUM9                                09/17/89 )     : NUM8 ( n{n}. )                                                        DIGIT?                                                          IF 11 NEXTSTATE                                                 ELSE DUP ASCII E =                                                 IF 12 NEXTSTATE                                                 ELSE DUP ASCII . =                                                 IF TAGASI TYHIK CONSCODE @ LCODE ! TRUE                         ELSE 12 SCANVIGA FALSE                                    THEN THEN THEN ;                                        : NUM9 ( n{n}En )                                                       DIGIT?                                                          IF 9 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =  -->                              ( Scan: NUM9 <cont> NUM10 NUM11                  09/17/89 )                  IF 7 NEXTSTATE                                                  ELSE REALCODE @ LCODE ! TRUE                               THEN THEN THEN ;                                        : NUM10 ( n{n}[.{n}]E<+|-> )                                            DIGIT?                                                          IF 13 NEXTSTATE                                                 ELSE 12 SCANVIGA FALSE                                          THEN ;                                                  : NUM11 ( n{n}.n{n} )                                                   DIGIT?                                                          IF 11 NEXTSTATE                                                 ELSE DUP ASCII E =                                                 IF 12 NEXTSTATE                                                 ELSE REALCODE @ LCODE ! TRUE                                 THEN THEN ; -->                                         ( Scan: NUM12 NUM13                              09/17/89 )     : NUM12 ( n{n}.{n}E )                                                   DIGIT?                                                          IF 13 NEXTSTATE                                                 ELSE DUP ASCII + = OVER ASCII - = OR                               IF 10 NEXTSTATE                                                 ELSE 12 SCANVIGA FALSE                                       THEN THEN ;                                             : NUM13 ( n{n}[.{n}]E[+|-]n )                                           DIGIT?                                                          IF 13 NEXTSTATE                                                 ELSE REALCODE @ LCODE ! TRUE                                    THEN ;                                                  -->                                                                                                                                                                                             ( Scan: NUMSTATES                                04/23/90 )     : NUMSTATES ( n --- )                                                   CASE                                                              0 OF NUM0 ENDOF       1 OF NUM1 ENDOF                           2 OF NUM2 ENDOF       3 OF NUM3 ENDOF                           4 OF NUM4 ENDOF       5 OF NUM5 ENDOF                           6 OF NUM6 ENDOF       7 OF NUM7 ENDOF                           8 OF NUM8 ENDOF       9 OF NUM9 ENDOF                          10 OF NUM10 ENDOF     11 OF NUM11 ENDOF                         12 OF NUM12 ENDOF     13 OF NUM13 ENDOF                        ENDCASE ;                                               -->                                                                                                                                                                                                                                                                                                                             ( Scan:           NUMB                           09/17/89 )     ( SWITCH: NUMSTATES NUM0 NUM1 NUM2 NUM3 NUM4 NUM5 NUM6                          NUM7 NUM8 NUM9 NUM10 NUM11 NUM12 NUM13 ; )      : NUMB ( char --- f )                                                   0 STAT# !                                                       BEGIN STAT# @ NUMSTATES                                               OVER CHARTYPE C@ 4 = OR                                   UNTIL                                                           CHARTYPE C@ 4 <> DUP                                            IF TAGASI                                                       ELSE RETRY                                                      THEN ;                                                  -->                                                                                                                                                                                                                                                             ( Scan: IDENT                                    09/22/89 )     : IDENT ( char --- f )                                                  BEGIN LTEXT LISA NEXTCHAR DUP CHARTYPE C@                          DUP 1 < SWAP 2 > OR                                          UNTIL CHARTYPE C@ 4 =                                           IF RETRY FALSE                                                  ELSE TAGASI LEKSEEM?                                               IF KOOD!                                                        ELSE DROP IDCODE @ LCODE !                                      THEN TRUE                                                    THEN ;                                                  -->                                                                                                                                                                                                                                                                                                                             ( Scan: YLETYHIKU                                09/22/89 )     : YLETYHIKU ( --- char )                                                BUFPOS @ 1-                                                     BEGIN 1+ DUP C@ CHARTYPE C@                                     UNTIL DUP LEXBEG ! DUP 1+ BUFPOS ! C@ ;                 : SCANINIT ( --- )                                                      INITBUF FILLBUF 0 LINE# ! NEWLINE ;                     : SCANEND ( --- )                                                       RELBUF ;                                                : SAVE_PREV BUFPOS @ PREV_POS ! LINE# @ PREV_LINE ! ;           : PREV_LEX PREV_POS @ BUFPOS ! PREV_LINE @ LINE# ! ;                                                                                                                                                                                                            -->                                                                                                                             ( Scan: SCN SCSILU                               09/17/89 )     : SCN ( --- )                                                   SAVE_PREV 255 LTEXT 2 - C!                                      BEGIN FALSE SCANERR ! LTEXT EMPTY YLETYHIKU                     DUP CHARTYPE C@                                                 CASE 1 OF IDENT ENDOF                                                2 OF NUMB ENDOF                                                 3 OF DELIM ENDOF                                                4 OF DROP FILLBUF FALSE ENDOF                                   5 OF DROP 0 LCODE ! TRUE ENDOF                                  6 OF DROP NEWLINE FALSE ENDOF                              ENDCASE                                                         UNTIL LTEXT 1- C@ 1+ LTEXT 2- C! ;                              ( : SCSILU INFILE [COMPILE] FILENAME SCANINIT                           BEGIN SCN CR LTEXT 8                                                  TYPE LCODE  @ DUP . 0= UNTIL SCANEND ; ;S ) -->   ( PARSER ALGUS - OBJ...  LAST RIG$  ...  SEM$    02/07/89 )                                                                     0 CONSTANT RIG$                                                 4 CONSTANT DOW$                                                 8 CONSTANT ROW$                                                 10 CONSTANT SEM$                                                11 CONSTANT STX$                                                  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( RIGHT DOWN SEM STEXT ST# PUU                 02/07/89 )       : RIGHT RIG$ + @ ;                                              : DOWN  DOW$ + @ ;                                              : SEM   SEM$ + C@ ;                                             : STEXT STX$ + ;                                                : PUU LAST @ PUULQPP  @ OVER - 1+ DUMP ;                           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( Parser: muutujad, REL REL! ...                 11/204/10/91 ) : REL! EREL @ TOP @ C! ;                                        : TREE TOP @  [ SYMBCONST 1 + ] LITERAL + @ ;                   : TREE! LNK @ TOP @ [ SYMBCONST 1 + ] LITERAL + ! ;             : ROW TOP @ [ SYMBCONST 5 + ] LITERAL + H@ ;                    : ROW! PREV_LINE @ TOP @ [ SYMBCONST 5 + ] LITERAL + H! ;       : RIGHT! LAST @ RIG$ + ! ;                                      : DOWN! LAST @ DOW$ + ! ; -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( Parser: NT? ELEMENT                            11/02/87 )     : NT? ( KOOD---FLAG) TERMARV @ > ;                              : ELEMENT ( I---I-S PUU)                                          BEGIN TOP @ ST# + TOP ! TREE                                       IF 1-                                                           ELSE CODE NT?                                                      IF 1- THEN                                                   THEN DUP 0=                                                  UNTIL DROP TREE FREE @ ST# - TOP ! ;                           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( Parser: SEMANTIKA! RIGHTMOST POP               11/02/87 )     : RIDA! ( --- )                                                         ROW LAST @ ROW$ + H! ;                                  : SEMANTIKA! SLINK @ H@ LAST @ SEM$ + H!                                SLINK @ 2+ LAST @ STX$ + 1+                                     SLINK @ 1+ C@ CMOVE ;                                   : RIGHTMOST ( ADR1 --- ADR2 )                                           BEGIN DUP RIGHT                                                 WHILE RIGHT REPEAT ;                                    : POP ( --- ) RPART 1 - PRODLCONST ERASE                                FREE @ VIIMANE !                                                BEGIN TOP @ ST# + DUP TOP ! FREE @ U<                           WHILE CODE RPART LISAS                                          REPEAT HANDL @ DUP FREE ! ST#  - TOP ! ;                -->                                                                                                                             ( Parser: ALUS PUSH AADRESS UUSTIPP                  04/10/91 ) : PUSH ( --- ) FREE @ DUP TOP ! ST# +                                   DUP FREE ! MAG - 500 >                                          IF 8 PARSVIGA THEN                                              REL! CODE! TREE! ROW! ;                                 : AADRESS ( --- )                                                       SLINK @ 1 + C@ STX$ 1+ +                                        LAST @ SWAP - DUP LAST ! DUP                                    HERE 160 + U< IF 11 PARSVIGA THEN 4 ERASE ;             : UUSTIPP ( --- )                                                       AADRESS SEMANTIKA! RIDA! LNK @ DOWN!                            LAST @ LNK ! ;                                          -->                                                                                                                                                                                                                                                             ( SEM.OUTP.ALGUS   -  VOOGUDEGA TQQ             02/07/89 )      32768 CONSTANT FLOWSIZE                                             0 FLSEGM  #FLOW 4 * ERASE    ( CLEAR )                      : FLGETMEM ( --- )                                              #FLOW 0 DO                                                         HERE I FLSEGM ! FLOWSIZE ?ALLOT                              LOOP ;                                                          -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( SEM.OUTPUT  -  VOOGUDEGA TQQ                  02/07/89 )      ( 'SEGMENT' ON SELLES VERSIOONIS LIHTSALT BAASAADRESS ! )       : FLWR ( SEG NIHE L --- ; KIRJUTAB SEGMENDIST V@LJA                                       OUTFILE-SSE  L BAITI.  AJUTINE !!! )  ROT ROT + SWAP OUTFILE LWRITE ;                                 (  0 DO OVER OVER I + C@L HERE C!                                        HERE 1 OUTFILE LWRITE                                       LOOP DROP DROP ; )                                         : FLFREEMEM ( --- )                                             ( #FLOW 0 DO 0 I FLSEGM ! LOOP ) ;                              : BUFF-KONTROLL ( inad --- inad )                                   DUP @ FLOWSIZE 1 - =                                            IF ( #FLOW 1 = IF )                                                 FLOW @ FLSEGM @ 0 FLOWSIZE FLWR -1 OVER !                       (        ELSE CR ." OBJ buffer full!" ABORT THEN )          THEN ;  -->                                                 ( GENEND                                        11/25/87 )      : GENEND ( --- ; V@GA T@HTIS SQNA !!! )                         #FLOW 0 DO                                                         ( I EELTEKST )                                                  I FLOFFS @                                                      IF  I FLSEGM @  0  I FLOFFS @  FLWR   THEN                      ( I J@RELTEKST )                                             LOOP                                                            0 HERE ! HERE 2 OUTFILE LWRITE                                  OUTFILE CLOSE-FILE ?DISCERR  FLFREEMEM ;                         -->                                                                                                                                                                                                                                                                                                                                                                                            ( SHOU SPCAD CHARPUT                             04/23/90 )     : CHARPUT ( AD --- AD+1 )                                               ERRLOC @                                                        IF LOC @ 1 + DUP ERRLOC @ =                                        IF SOUROW @ LINE# ! CR 13 .MSG ERR_EXIT                         THEN LOC !                                                   ELSE >R FLOW @ DUP FLOFFS SWAP FLSEGM @                            R@ C@ SWAP 2 PICK @ + C!                                        BUFF-KONTROLL                                                   1 SWAP +! R> 1+                                              THEN ;                                                   -->                                                                                                                                                                                                                                                                                                                            ( 0UTP                                           04/23/90 )     : 0UTP ( AD L ---  ; LQPPU TYHIK KA )                                   DUP 0 >                                                         IF  SHOU @                                                          IF OVER OVER TYPE SPACE                                         THEN                                                            0                                                               DO CHARPUT                                                      LOOP DROP SPCAD CHARPUT DROP                                ELSE DROP DROP                                                  THEN ;                                                  : GENSOUR LIT" SOURCE$" COUNT 0UTP                                      INFILE DROP 4 + COUNT 0UTP ;                            : NOSOUR LIT" NOSOURCE" COUNT 0UTP ;                             -->                                                                                                                            ( PRETEX POST? POSTTEX TR? CUTN? FILL1-4        11/25/87 )      : PRE? ( TIPP --- FLAG ) SEM PRE$ AND ;                         : PRETEX ( TIPP -- AD L )                                       STEXT 1+ DUP C@ + 1+ DUP 1+ SWAP C@ ;                           : POST? SEM POST$ AND ;                                         : POSTTEX ( TIPP --- AD L )                                     STEXT 1+ DUP 1+ SWAP C@ ;                                       : TR? ( TIPP --- F ; ALAMPUU TQQTL.? )                          SEM REG$ AND ;                                                  : CUTN? ( TIPP --- F ; ALAMPUU OLI ? )                           SEM CUT$ AND ;                                                 : FILL1-4 ( ---  ; AJUTINE )                                    ?EXEC 4 0 DO C" & C, LOOP                                       INFILE DROP 4 + COUNT 4 MIN HERE 4 - SWAP CMOVE ;                -->                                                                                                                            ( INITW0 KOOLON TEX&SYS SEM&SYS SEM0           04/25/90 )       : INITW0 ( --- )                                                HERE W0AREA @ DP !                                              CUT$ C, 0 C, CUT$ POST$ OR C, 11 C, 8 C, C" & C, FILL1-4        3 0 DO C" 0 C, LOOP 0 C, 0 C, 1 C, C" : C, 4 C,                 4 0 DO 0 C, LOOP CUT$ POST$ OR C, 6 C, 3 C,                     3 0 DO BL C, LOOP 0 C, 0 C,   DP ! ;                            : KOOLON ( --- AD L )                                           W0AREA @ 15 + COUNT ;                                           : TEX&SYS ( --- AD L )                                          W0AREA @ 4 + COUNT ;                                            : SEM&SYS ( T --- AD )                                                  W0AREA @ 2+ DUP ROT SWAP C! ;                           : SEM0 ( T --- AD )                                                     W0AREA @ DUP ROT SWAP C! ;  -->                                                                                         ( C+! S1+FL SYMB1+ CH&SYS SETLAST NTRANS         04/25/90 )     : C+! ( N AD --- )                                                      DUP C@ ROT + SWAP C! ;                                  : S1+FL ( AD --- CARRY.FLAG )                                           DUP C@ C" 0 9 + < IF 1 SWAP C+! 0                                                 ELSE C" 0 SWAP C! 1 THEN ;            : SYMB1+ ( AD L --- )                                                   DUP ROT + 1 - SWAP 0 DO DUP S1+FL IF 1 -                                                          ELSE LEAVE THEN                                    LOOP DROP ;                        : CH&SYS ( --- ) W0AREA @ 10 + 3 SYMB1+ ;                       : SETLAST ( ---  ; JUUR MUUTUJAS ROOT )                                 ROOT @ BEGIN DUP DOWN                                                  WHILE DOWN REPEAT                                        STEXT DUP C@ + 1+ LAST ! ;                                     -->                                                      ( GENTEXT                                        04/25/90 )     : GENTEXT ( ---  ; JUUR MUUTUJAS ROOT )                                 0 NTRANS ! ROOT @                                               BEGIN BEGIN DUP PRE? IF DUP PRETEX 0UTP                                              THEN DUP DOWN                                    WHILE DUP DOWN REPEAT                                           DUP ROW$ + H@ SOUROW !                                          NTRANS @ 0= IF DUP NTRANS ! THEN                                BEGIN DUP POST? IF DUP POSTTEX 0UTP THEN                           DUP RIGHT OVER ROOT @ = OR 0=                                WHILE DROP                                                      REPEAT DUP ROOT @ = 0=                                    WHILE RIGHT                                                     REPEAT DROP SETLAST 0 LNK ! ;                                 -->                                                                                                                       (                                                    10/05/90 ) -->                                                             5 SW&F .                                                        5 SW&F PARSVIGA                                                 5 SW&F TYPE                                                     5 SW&F ERROR                                                    5 SW&F ?DISCERR                                                 5 SW&F EMIT                                                     5 SW&F ERRORLINE                                                SCW GENTEXT GENTEXT                                             -->                                                                                                                                                                                                                                                                                                                                                                                             ( 0OUT TRANSLATE?                              11/25/87 )       : TRANSLATE LNK @ ROOT !                                        ROOT @ STEXT DUP 1+ C@ + 2+ DUP C@ + 1+                         FIND IF EXECUTE                                                      ELSE 7 .MSG COUNT TYPE PREV_LEX ERRORLINE ABORT THEN ;     : TRANSLATE? ( ---  ; SAAB ETTE LNK )                               LNK @ TR? IF TRANSLATE THEN ;                                                                                                              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( Parser: RULSEG @RUL !RUL                       02/07/89 )       SYMBCONST PRODCONST + 3 + DUP CONSTANT INFO#                    PP# + 2 + CONSTANT HR#                                        : AINFO ( A---A.INFO) PP# + ;                                   : ARULE ( A.INFO---A.RULE) SYMBCONST + ;                        : ALINK ( A.INFO --- A.LINK ) ARULE PRODCONST + ;               : AABI ( A.INFO---A.FLAG) ALINK 2 + ;                           ( RULES: lugemised [ ad --- x ] )                               : S@RUL RULES HBASE + S@ ;        : P@RUL RULES HBASE + P@ ;    : @RUL RULES HBASE + H@ ;         : C@RUL RULES HBASE + C@ ;    -->                                                                                                                                                                                                                                                                                                                                                                                             ( Parser: RCONT SLCONT VKOHT @BIT                11/10/87 )     : RCONT ( a.i --- a.i flag )                                       DUP S@RUL LCODE @ PM 0= 0= ;                                 : SLCONT ( a.i --- a.i flagarser: LMSYMB                                  11/09/87 )    : LMSYMB ( --- symb )                                                   TOP @ FREE @ TOP !                                              BEGIN ST# NEGATE TOP +! CODE                                       DUP MISLIKK S@ =                                                IF DROP FALSE                                                   ELSE LM C@                                                      THEN                                                         UNTIL CODE SWAP TOP ! ;                                                                                                                                                                                                                                                                                                                                                                 -->                                                                                                                             ( Parser: LQPP DCFL SCLIST TRIPLE                    04/10/91 ) : LOPP ;                                                        : SCLIST ( a.i1 --- a.i2 )                                              BEGIN DUP AABI C@RUL                                                  IF -1 DCFL ! EXIT                                               THEN RCONT                                                      IF SLCONT IF EXIT THEN                                          THEN ALINK @RUL DUP                                       WHILE                                                           REPEAT PREV_LEX 3 PARSVIGA SCN ;                        -->                                                                                                                                                                                                                                                                                                                                                                                             ( Parser: DCLIST SCRULE ALGUS                        04/10/91 ) : DCLIST ( a.i1 --- a.i2 )                                              LMSYMB [ TRIPLE SYMBCONST + ] LITERAL S!                        LCODE @ [ TRIPLE SYMBCONST 2 * + ] LITERAL S!                   BEGIN DUP S@RUL TRIPLE S! TRIPLE HCONT HASH                           IF DROP EXIT                                                    THEN DROP ALINK @RUL DUP                                  WHILE REPEAT PREV_LEX 3 PARSVIGA SCN ;                  : SCRULE ( a --- a.i )                                                  0 DCFL !                                                        PP# + SCLIST DCFL @                                             IF DCLIST THEN ;                                        -->                                                                                                                                                                                                                                                             ( Parser: REEGEL LYLI                                04/10/91 ) : REEGEL ( --- A.I )                                               RPART RULES HASH                                                IF SCRULE                                                       ELSE PREV_LEX 4 PARSVIGA SCN                                    THEN ;                                                       : LYLI ( VIIT --- )                                                ?DUP                                                            IF ( PUUVIIT <> 0 )                                                DUP VANA @ ! RIGHTMOST VANA !                                THEN ;                                                       -->                                                                                                                                                                                                                                                                                                                             ( Parser: YHENDA PERMUTEERI                      11/10/87 )     : YHENDA ( --- )                                                   FREE @ TOP !                                                    BEGIN TREE LYLI TOP @ ST# + DUP TOP !                                 VIIMANE @ =                                               UNTIL FREE @ ST# - TOP ! ;                                   : PERMUTEERI ( L.PERM A.PERM --- )                                 SWAP 0                                                          DO DUP I + C@ ELEMENT LYLI                                      LOOP DROP ;                                                  -->                                                                                                                                                                                                                                                                                                                                                                                             ( Parser: PERM?                                  11/10/87 )     : PERM? ( a.sem --- flag )                                         0 LNK ! LNK VANA !                                              DUP C@ 8 AND                                                    IF DUP 2+ 3 0                                                      DO DUP C@ + 1+ LOOP                                             DUP C@ SWAP 1+ PERMUTEERI                                    ELSE YHENDA                                                     THEN C@ 7 AND ;                                              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( Parser: REDUCE                                 11/10/87 )     : REDUCE ( --- )                                                   ALUS POP REEGEL                                                 ERRFLAG @                                                       IF DROP EXIT THEN                                               DUP S@RUL KOOD !                                                SYMBCONST + P@RUL PRODSEM @                                     empty DUP SLINK ! PERM?                                         IF ( SEM <> 0 )                                                    UUSTIPP                                                         TRANSLATE?                                                   THEN CODE KOOD @ PM DUP                                         IF EREL ! PUSH                                                  ELSE DROP 6 PARSVIGA                                            THEN  ;                                                      -->                                                             ( Parser: SHIFT                                  11/10/87 )     : SHIFT ( rel --- )                                                EREL ! LCODE @ DUP                                              KOOD ! TERMSEM @ DUP                                            SLINK ! 0 LNK !                                                 IF ( SEM <> 0 )                                                    UUSTIPP                                                      THEN PUSH SCN ;                                                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( Parser: PARSER SINIT EXEC                      11/10/87 )      : PARSER ( --- ) ALGUS SCN                                     BEGIN FALSE ERRFLAG !                                                 LCODE @ CODE %AXIOM @ = 0=                                WHILE CODE OVER PM                                               CASE 0 OF 5 PARSVIGA ENDOF                                           1 OF 1 SHIFT ENDOF                                              2 OF 2 SHIFT ENDOF                                              3 OF REDUCE  ENDOF                                         ENDCASE                                                         0= ERRFLAG @ AND                                                IF EXIT                                                         THEN                                                           REPEAT DROP LOPP ;                                               -->                                                                                                                            (                                                    10/05/90 ) -->                                                             5 SW&F .                                                        5 SW&F PARSVIGA                                                 5 SW&F TYPE                                                     5 SW&F ERROR                                                    5 SW&F ?DISCERR                                                 5 SW&F EMIT                                                     5 SW&F ERRORLINE                                                5 SW&F TRANSLATE                                                SCW PARSER TRANSLATE                                            -->                                                                                                                                                                                                                                                                                                                             ( EXEC                                               09/25/89 ) ( : SETINFILE ( --- ; dialog )                                  (    CR ." Input file? " INFILE INPUT-FILENAME ; )              : EXEC ( --- )  ( SETINFILE )                                                   ( SINIT ) PARSER                                                NOSOUR GENEND SCANEND ;                         : SETWFILE OBJECTPATH OUTFILE DROP 4 + SOUR|DEST ;              : GENINIT ( --- )                                                       SETWFILE OUTFILE MAKE-FILE ?DISCERR                             0 FLOW !  FLGETMEM                                              #FLOW 0 DO  0 I FLOFFS !  LOOP ;                        : SINIT  INITW0 SCANINIT GENINIT GENSOUR ;                       -->                                                                                                                                                                                                                                                            ( F-WORD                                        07/22/88 )      : F-WORD ( CHAR --- ADDR )                                          HERE 1+ 0  0 HERE C!                                            BEGIN OVER 1 OUTFILE LREAD                                        IF DROP -1                                                      ELSE OVER C@                                                      IF OVER C@ 3 PICK =                                               IF HERE C@                                                        IF DROP -1                                                      THEN                                                          ELSE SWAP 1+ SWAP  HERE C@ 1+ HERE C!                           THEN                                                          ELSE DROP -1                                                    THEN                                                          THEN  DUP                                                     UNTIL           -->                                         ( F-WORD END.                                  04/06/88 )           DROP DROP DROP  HERE C@ 0=                                      IF 1 HERE C! 0 HERE 1+ C!                                       THEN                                                            BL HERE DUP C@ + 1+ C!                                          HERE ;                                                      : NEW-WORD ( --- ) ['] F-WORD UWORD ! ;                         -->                                                             : OLD-WORD ( --- ) 0 UWORD ! ;                                   -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( UABORT                                             09/21/90 )                                                                 ( : ERRQUIT ( --- ; restore normal forth )                      (   OLD-WORD FLFREEMEM 0 UABORT ! ; )                                                                                           ( : NEW-ABORT ( --- )                                           (     ['] ERRQUIT UABORT ! ; )                                  : FLOAD ( ---  ; load file - not screen file )                      OUTFILE OPEN-FILE ?DISCERR                                      ( NEW-ABORT ) NEW-WORD INTERPRET ( OLD-WORD )                   OUTFILE CLOSE-FILE ?DISCERR ;                               ( : TLOAD TLOAD NEW-ABORT ; )                                                                                                   ( : TASK ; )                                                     ;S                                                                                                                             