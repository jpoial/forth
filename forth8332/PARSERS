            Система синтаксических анализаторов.


      1. Синтаксические анализаторы.

      Синтаксические анализаторы составлены для трех  версии
языка Си:
      1) 3LC,
      2) TURBO-C,
      3) REAL-C - язык реализации СИ,
и для двух версии языка МОДУЛА-2:
      1) JPI-MODULA,
      2) REAL-MODULA - язык реализации МОДУЛА-2.

      Каждый анализатор состоит из четырех файлов:
      1) Командный файл,
      2) Анализатор соответствующего языка,
      3) Файл сообщении об ошибках,
      4) Программа вызова длинных ( > 64 K ) COM-файлов.

      Программа  вызова  -  одна  для  всех  анализаторов  -
LOADF.COM . Названия остальных файлов можно найти в  следую-
щей таблице.

Таблица 1.
┌─────────────┬──────────────┬──────────────┬──────────────┐
│     Язык    │Командный файл│  Анализатор  │  Сообщения   │
├─────────────┼──────────────┼──────────────┼──────────────┤
│3LC          │P3LC.BAT      │3LC.COM       │3LCG.MSG      │
│TURBO-C      │TURC.BAT      │TURBOC.COM    │TURBOCG.MSG   │
│REAL-C       │REALC.BAT     │JARC.COM      │JARCG.MSG     │
│JPI-MODULA   │JPIMOD.BAT    │JPICOMP.COM   │JPIGRAM.MSG   │
│REAL-MODULA  │REALMOD.BAT   │REALCOMP.COM  │REALGRAM.MSG  │
└─────────────┴──────────────┴──────────────┴──────────────┘
 
     Файлы сщщбщении являются на самом деле идентичными,  но
имеют по техническим разные имена для разных анализаторов.
     Для запуска анализатора  надо вызывать  соответствующий
командный файл, задав в качестве параметра имя анализируемо-
го текста (вместе с расширением).  Например, для того  чтобы
анализировать программу PRIMER.MOD при помощи JPI-анализато-
ра надо ввести команду

>JPIMOD PRIMER.MOD

     Сообщения об ошибках появляются на экране по одной, для
продолжения анализа  надо нажать  произвольную клавишу.  Для  
дублирования выхода  на  принтере, надо  до  анализа  ввести 
<ctrl>-P .










     2. Система генерирования анализаторов.


     Все 5 синтаксических анализаторов составлены при помощи
СПТ ТАРТУ. В комплект анализаторов включены и средства гене-
рирования  анализаторов.  Нужда в этом  может  появляться по
следующим причинам:
     - чтобы ввести изменения в ФОРТ-систему,
     - чтобы ввести  изменения  в  программы синтаксического
анализатора,
     - чтобы изменить грамматику языка.

     Общая схема процесса генерирования анализаторов:

            ┌─────────────┐
GRAM.SCR═══>│ КОНСТРУКТОР │      ANAL.SCR
            └──────╥──────┘          ║
                   ║                \ /  
                  \ /       ┌─────────────────┐
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│    F O R T H    │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
              GRAM.    ════>│                 │  
                            └────────╥────────┘
                                     ║
                                    \ /
                                 АНАЛИЗАТОР   

     На этой схеме  через GRAM.SCR обозначен  экранный  файл
грамматики, через GRAM.     ... GRAM.    обозначены  таблицы
синтаксического анализа, построенные программой КОНСТРУКТОР,
а через ANAL.SCR - экранный файл ФОРТ-текста соответствующе-
го анализатора.
     При генерировании синтаксического анализатора использу-
ются для каждого языка три файла: один для  грамматики языка
и два для ФОРТ-текстов соответствующего анализатора. Резуль-
татом генерирования будет .COM-файл соответствующего  анали-
затора, т.е. файл в столбце "Анализатор" таблицы 1. Соответ-
ствие файлов и языков приведены в таблице 2.



Таблица 2.

┌─────────────┬──────────────┬──────────────┬──────────────┐
│    Язык     │  Грамматика  │  Анализатор1 │  Анализатор2 │
├─────────────┼──────────────┼──────────────┼──────────────┤
│3LC          │3LCG.SCR      │3LC.SCR       │CCOMP.SCR     │
│TURBO-C      │TURBOCG.SCR   │TURBOC.SCR    │CCOMP.SCR     │
│REAL-C       │JARCG.SCR     │JARC.SCR      │CCOMP.SCR     │
│JPI-MODULA   │JPIGRAM.SCR   │JMODANAL.SCR  │MODCOMP.SCR   │
│REAL-MODULA  │REALGRAM.SCR  │RMODANAL.SCR  │MODCOMP.SCR   │
└─────────────┴──────────────┴──────────────┴──────────────┘


     Программы, используемые для генерирования.
1) Конструктор:  CONSTR.COM
                 CONSTRF1.BIN
                 CONSTRF2.BIN
                 CONSTRF3.BIN
                 HACO.COM
                 SERVICE.COM
2) Ядро системы: FORTH.COM .

     Вместо руководства оператору приводим протокол  генери-
рования анализатора для языка реализации Модула-2.В протоко-
ле подчеркнуты тексты, которые вводит оператор.

>constr
 ──────

┌───────────────────┐ 
│визитная информация│
│ФОРТ-системы       │
└───────────────────┘

Wait... Reading... Relocating
Enter Translator Name REALGRAM
                      ────────


┌───────────────────┐ 
│рабочая информация │
│конструктора       │
└───────────────────┘

Grammar is (1,1)DMSP
Ok

BYE
───

>HACO REALGRAM
 ─────────────


┌───────────────────┐ 
│рабочая информация │
│программы HACO     │
└───────────────────┘


Hash complete

>FORTH RMODANAL
 ──────────────


┌───────────────────┐ 
│визитная информация│
│ФОРТ-системы       │
└───────────────────┘

Ok

1 LOAD
──────


┌───────────────────┐ 
│информация о       │
│ФОРТ-загрузке      │
└───────────────────┘

161408 bytes written into REALCOMP.COM
>
