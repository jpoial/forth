(  TRANSLATOR SCREENS FILE                          10/22/87 )                                                                                                                                     Система Построения Трансляторов  ТАРТУ                                      КОНСТРУКТОР                                         202400   Эстонская ССР  г  Тарту                                ул  Лийви 2                                                     Тартуский госуниверситет                                        кафедра программирования                                                                                                        Я. Р. Пейал                                                     В. К. Соо                                                       М. О. Томбакystem messages )                                             empty stack                                                     dictionary full                                                 has incorrect address mode                                      is redefined                                                    is undefined                                                    disk address out of range                                       stack overflow                                                  disk error                                                                                                                                                                                                                                                                                                                      BASE must be DECIMAL                                            missing decimal point                                           PC/FORTH 2.0                             Laboratory Microsystems( System messages )                                             compilation only, use in definition                             execution only                                                  conditionals not paired                                         definition not finished                                         in protected dictionary                                         use only when loading                                           off current editing screen                                      declare vocabulary                                                                                                                                                                                                                                              illegal dimension in array definition                           negative array index                                            array index too large                                                                                                           ( 8086 Assembler messages )                                     16 bit register not allowed                                     8 bit register not allowed                                      address out of range                                            immediate data value not allowed                                missing source register                                         missing destination register                                    illegal operation                                               illegal operand                                                 instruction not implemented                                     illegal destination register                                    illegal source register                                         illegal condition code                                          register mismatch                                               destination address missing                                                                                                     ( #07 File interface  PC-DOS 2.0: D>S ?DISCERR INITSA10/27/87 ) : \ ?EXEC OUT @ 15 > IF CR THEN [COMPILE] .( CR ;  IMMEDIATE    : VAR VARIABLE ;                                                : +C! ( N ADR --- )                                                SWAP OVER C@ + SWAP C! ;                                     : ?DISCERR ( errcode --- )                                       ?DUP IF CR .STATUS ABORT THEN ;                                : INITSA ( sa handle_pars --- )                                   ROT SEEK-ABS ?DISCERR ;                                       : CURRSA ( handle_pars --- sa )                                   2DUP ?OFFSET DUP >R SEEK-ABS ?DISCERR R> ;                                  HANDLE ATFILE                                     : FILELEN ( --- len ) ATFILE ?FILESIZE 0 ATFILE INITSA ;        -->                                                                                                                                                                                             ( #08 File interface  PC-DOS 2.0: LREAD LWITE TOBYTE 10/22/87 ) : LREAD ( addr len handle_pars --- eof )                          2SWAP SWAP READ DUP                                             CASE 0 OF SWAP DROP ENDOF                                           -1 OF ENDOF                                                 ( ELSE ) ?DISCERR                                               ENDCASE ;                                                     : LWRITE ( addr len handle_pars --- )                            2SWAP SWAP WRITE ?DISCERR DROP ;                               : TOBYTE ( addr1 c --- addr2 )                                   ENCLOSE DROP SWAP DROP + ;                                       -->                                                                                                                                                                                                                                                                                                                           ( #09 File intrface   PC-DOS 2.0: CHEXT MKEXT OPEXT  10/22/87 ) : CHEXT ( eaddr handle_pars --- \ replace file extension )       IF ( avatud ) DUP DUP @ CLOSE-FILE ?DISCERR                     THEN 4 + COUNT ASCII . TOBYTE 1+                                SWAP 1+ OVER 3 CMOVE 0 SWAP 3 + C! ;                           : OPEXT ( eaddr handle_pars --- )                                       ( replace extension & open file )                        2DUP >R >R CHEXT R> R> OPEN-FILE ?DISCERR ;                    : MKEXT ( eaddr handle_pars --- )                                       ( replace extensiom & make file )                        2DUP >R >R CHEXT R> R> MAKE-FILE ?DISCERR ;                    -->                                                                                                                                                                                                                                                                                                                             ( #10 KONEC                                          02/07/89 ) : KONEC ( --- addr )                                            2 H@ ?csemory: ?ALLOT,ARRAY,DYNAR,ALLOC,BARRAY        02/07/89 ) : ?ALLOT ( n --- )                                                      HERE + DUP KONEC U< 0= 2 ?ERROR DP ! ;                  : ARRAY <BUILDS 4 * HERE SWAP DUP ?ALLOT ERASE                          DOES> SWAP 2 <-L + ;                                    ( : HARRAY <BUILDS 2 * HERE SWAP DUP ?ALLOT ERASE                       DOES> SWAP 2 * + ;  )                                   : DYNAR                                                            <BUILDS  0 , DOES> @ SWAP 2 <-L + ;                          : ALLOC ( N CFA ---  ;   NB! ['] ANNAB CFA )                       >BODY 4 + ( <BUILDS !!! ) HERE SWAP ! 4 * ?ALLOT ;           : BARRAY <BUILDS  DUP , 1 + DUP HERE SWAP                          BLANK ALLOT DOES> SWAP OVER @ OVER                              - 0 < 27 ?ERROR + 4 + ;                                      -->                                                                                                                             (                                                    02/16/89 ) -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (                                                    02/16/89 ) -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( Hash: SET HKEYL HILEN H#CELL HLEN HBASE HA@ HNEXT  02/07/89 ) : SET <BUILDS HERE 16 ERASE 16 ALLOT   ( pasport of hash-table)        DOES> ;                                                  : HKEYL ( pasport --- key_len ) H@ ;                            : HILEN ( pasport --- item_len ) 2+ H@ ;                        : H#CELL ( pasport --- #item_cell ) 4 + H@ ;                    : HLEN ( pasport --- table_len<bytes> ) 10 + H@ ;               : HBASE ( pasport --- base ) 12 + @ ;                           : HA@ ( loc pasport --- 16b ) HBASE + H@ ;                      : HNEXT ( ea1 pasport --- ea2 ; get next item in chained list )         DUP HILEN 2- ROT + SWAP HA@ ;                           -->                                                                                                                                                                                                                                                                                                                             ( #15 Hash: -VORDLE PORGE                            02/07/89 ) : -VORDLE ( ka ea pasport --- f )  ( compare key with item )                    ( returnes TRUE, if NOT equals )                        SWAP OVER HBASE + SWAP HKEYL S= 0= ;                    : PORGE ( ka pasport ea1 --- ea2 f )                                                     ( seach matching key in chained list )   SWAP >R                ( f=TRUE, if found )                     BEGIN ( ka ea ) 2DUP R@ -VORDLE                                    IF ( doesn't match ) ( ka ea ) DUP R@ HNEXT ?DUP                   IF ( goto next ) SWAP DROP FALSE                                ELSE ( end if chained list ) FALSE TRUE THEN                 ELSE ( matches ) TRUE TRUE                                      THEN                                                         UNTIL R> DROP ROT DROP ;                                       -->                                                                                                                            ( #16 Hash: VOLDI HF HASH HCOUNT                     02/07/89 ) : VOLDI ( ka pasport --- k' )                                      0 SWAP HKEYL 2 PICK + ROT                                       DO I H@ XOR 2 +LOOP ABS ;                                    : HF ( ka pasport --- ea )                                              ( hash function: returns item location )                   SWAP OVER VOLDI OVER H#CELL MOD                                 SWAP HILEN * ;                                               : HASH ( ka pasport --- ea f )                                          ( main word to search in hash table )                      OVER OVER HF PORGE ;                                         : HCOUNT ( pasport --- base len )                                  DUP HBASE SWAP HLEN ;                                         -->                                                                                                                                                                                            ( #17 Hash: ALLOCBF HREAD                            02/07/89 ) : ALLOCBF ( len --- base )                                              HERE SWAP ?ALLOT ;                                      : HREAD ( ext_addr pasport --- )  ( read hash table from file )    >R ATFILE OPEXT                                                 R@ 14 ATFILE LREAD ?DISCERR                                     R@ HLEN ALLOCBF R@ 12 + !                                       R> HCOUNT ATFILE LREAD ?DISCERR ;                            -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( #18 Parameters block                               02/07/89 )  8 ARRAY %PARM                                                   0 %PARM CONSTANT SYMBARV       ( #symbols in gramar )           1 %PARM CONSTANT PRODARV       ( #productions )                 2 %PARM CONSTANT TERMARV       ( #terminal symbols )            3 %PARM CONSTANT NTARV         ( #nonterminal symbols )         4 %PARM CONSTANT %AXIOM        ( code of initial nonterminal )  5 %PARM CONSTANT %CORRECT      ( flag received by CONSTRUCTOR ) 6 %PARM CONSTANT %SPRARV       ( #productions ib source gramm ) 7 %PARM CONSTANT %ADLCTRL      ( distant context flag )        : PARMIN        ( read parameters block)                                LIT" PAR" ATFILE OPEXT                                          HERE 16 ATFILE LREAD ?DISCERR                                   8 0 DO HERE I 2 * + H@ I %PARM !                                    LOOP ;                                               -->                                                            ( #19 Installation constants & words                 02/07/89 ) 448 CONSTANT DIMCONST     ( MAX #SYMBOLS )                      512 CONSTANT GRAMCONST    ( MAX #PRODUCTIONS )                    5 CONSTANT PR#SYMBCONST ( MAX #SYMBOLS IN PRODUCTION )        ( Symbol !, @ )                                                 : S!  COMPILE H! ; IMMEDIATE  : S@  COMPILE H@ ; IMMEDIATE      ( Production # !, @ )                                           : P!  COMPILE H! ; IMMEDIATE  : P@  COMPILE H@ ; IMMEDIATE                                                                                                                                      DIMCONST  256 < 2+            CONSTANT  SYMBCONST               GRAMCONST 256 < 2+            CONSTANT  PRODCONST               PR#SYMBCONST SYMBCONST * 1+   CONSTANT  PRODLCONST              SYMBCONST 1 - CONSTANT SNIHE                                      -->                                                                                                                           ( #20 Parser: MESSFILE .MSG                          01/27/88 ) HANDLE MESSFILE                                                 : .MSG ( n --- )        ( type message from .MSG-file )                 DUP >R                                                          ATFILE DROP 4 + MESSFILE DROP 4 + OVER C@ 1+ CMOVE              LIT" MSG" MESSFILE OPEXT                                        64 * MESSFILE INITSA                                            HERE 64 MESSFILE LREAD                                          IF CR 7 EMIT ." .MSG: can't read message # " R@ . CR            ELSE HERE 64 -TRAILING TYPE                                     THEN MESSFILE CLOSE-FILE R> 2DROP ;                      -->                                                                                                                                                                                                                                                                                                                            ( #21 Tload: STRING PRLEN PRSEG PM PMATREAD          02/07/89 ) : STRING <BUILDS 0 C, DUP C, 0 C, HERE SWAP                                      DUP ?ALLOT BLANK                                        DOES> 3 + ;                                            0 CONSTANT PRLEN    0 CONSTANT PRBASE                           : PM ( i j --- rel<i,j> )       ( find precedence relation )       SWAP PRLEN * OVER 2 ->L + PRBASE + C@ SWAP                      3 AND 2* 6 SWAP - ->L 3 AND ;                                : PMATREAD ( --- )      ( read precedence matrix )                 SYMBARV @ 7 + 3 ->L 2*                                          ['] PRLEN >BODY ! ( length of row in bytes )                    LIT" PRM" ATFILE OPEXT                                          FILELEN DUP ALLOCBF DUP                                         ['] PRBASE >BODY ! ( base of precedence matrix)                 SWAP ATFILE LREAD DROP ;                                     -->                                                             ( #22 Tload: LEXCIN                                  09/17/89 )        0 CONSTANT %LEXC VAR IDCODE                                     VAR CONSCODE VAR REALCODE                                        VAR OCTCODE VAR HEXCODE VAR ASCCODE                     : LEXCIN ( --- )                                                   HERE ['] %LEXC >BODY !                                          LIT" LCL" ATFILE OPEXT                                          FILELEN HERE OVER ALLOT                                         SWAP ATFILE LREAD ?DISCERR                                    %LEXC DUP S@ IDCODE S! SYMBCONST + DUP S@ CONSCODE S!           SYMBCONST + DUP S@ REALCODE S! SYMBCONST + DUP S@ OCTCODE S!    SYMBCONST + DUP S@ HEXCODE S! SYMBCONST + S@ ASCCODE S! ;        -->                                                                                                                                                                                                                                                           ( #23 Tload: variables & hash tables & strings       02/08/89 ) SET TERMINALS   SET RULES   ( hash tables for lexems & rules )  VAR LE#                                                         255 STRING LTEXT   ( sting for scanned lexem )                  PRODLCONST 1 - SYMBCONST - CONSTANT PP#  ( len of right part                                                of rule )           SYMBCONST 3 +   CONSTANT %STRL ( len of string descriptor                                       in table of lexem-classes )     LTEXT 3 -       CONSTANT STRSEM ( addr of string constants                                      semantic text )                 256      BARRAY CHARTYPE  ( types of characters for scanner )   DIMCONST BARRAY LM      ( vector of context symbols )           DYNAR PRODSEM   DYNAR TERMSEM   ( arrays of semantic text addr )  -->                                                                                                                                                                                           ( #24 SEM.  EELTQQTLUSE ALGUS                        11/25/87 ) -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( #25  C" POST$ PRE$ REG$ CUT$                       02/08/89 ) : C" [COMPILE] ASCII ; IMMEDIATE                                         1 CONSTANT POST$  2 CONSTANT PRE$                               4 CONSTANT REG$  16 CONSTANT CUT$                      -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( #26  Tload: SEMREAD SEMCOUNT SEMTQQTL              02/07/89 ) : SEMREAD ( --- )                                                  ?EXEC PRODARV @ ['] PRODSEM ALLOC HERE                          LIT" SEM" ATFILE OPEXT                                          FILELEN DUP ?ALLOT OVER 0 PRODSEM !  ( BAAS LEN )               ATFILE LREAD ?DISCERR ;                                      : SEMCOUNT ( AD --- AD AD+2 L )                                    DUP 1+ COUNT ;                                               : SEMTQQTL ( AD --- NEXT )                                         DUP 1+ C@ + 2+ ;                                              -->                                                                                                                                                                                                                                                                                                                                                                                            ( #27  Tload: SEMTAB CHTSEM                          09/17/89 ) : SEMTAB ( --- )                                                   SEMREAD 0 PRODSEM @ %SPRARV @ 1 DO                              SEMTQQTL DUP I PRODSEM ! LOOP DROP                              PRODARV @ %SPRARV @ > IF 0 PRODSEM @                            PRODARV @ %SPRARV @ DO DUP I PRODSEM !                          LOOP DROP THEN ;                                             : CHTSEM ( KOOD --- )                                              TERMSEM STRSEM SWAP ! ;                                       -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( #28 Tload: TSEMLEX TSEMTAB                         09/17/89 ) : TSEMLEX ( --- )                                                  6 0 DO %LEXC I SNIHE <-L + S@ CHTSEM                            LOOP 6 SYMBCONST * DUP %LEXC + C@ DUP 0 >                       IF SWAP 1+ %LEXC + SWAP 0 DO DUP S@                             CHTSEM SYMBCONST + 3 + LOOP DROP                                ELSE DROP DROP THEN ;                                        : TSEMTAB ( --- )                                                  TERMARV @ ['] TERMSEM ALLOC TERMARV @ 0 DO                      0 I TERMSEM ! LOOP                                              TSEMLEX ;                                                     -->                                                                                                                                                                                                                                                                                                                            ( #29 Tload: CONTREAD LANGFILE                       11/16/87 ) SET HCONT                                                       : CONTREAD ( --- )                                                 LIT" LMV" ATFILE OPEXT                                          0 LM DIMCONST ATFILE LREAD ?DISCERR                             LIT" CON" HCONT HREAD ;                                      : LANGFILE ( --- )                                              (  CR ." Enter translator name: "                                  ATFILE INPUT-FILENAME CR LIT" .XXX" COUNT                       ATFILE DROP 4 + COUNT + SWAP CMOVE                              ATFILE DROP 4 + DUP C@ 4 + OVER C!                              COUNT + 0 SWAP C! ; )                                              ATFILE FILENAME MOD2VI.XXX ;                                                                                              -->                                                                                                                             ( #30 Tload: TERMIN RULESIN TLOAD                    11/23/87 ) : TERMIN  LIT" HLX" TERMINALS HREAD ;                           : RULESIN LIT" HGR" RULES     HREAD ;                           : TLOAD ( --- )                                                    LANGFILE PARMIN LEXCIN                                          TERMIN   RULESIN                                                PMATREAD SEMTAB TSEMTAB                                         %ADLCTRL @ IF CONTREAD THEN                                     ATFILE CLOSE-FILE ?DISCERR ;                                        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( #31 Scan: PAIKA, NEXTCHAR, TVIIT                   09/16/89 ) : PAIKA ( TYYP YL.RAJA AL.RAJA --- )                               DO DUP I CHARTYPE C! LOOP DROP ;                               HEX  0 CHARTYPE 100 ERASE                                        4  1  0 PAIKA 6 0E 0D PAIKA 5 1B 1A PAIKA 3 30 21 PAIKA         2 3A 30 PAIKA 3 41 3A PAIKA 1 5B 41 PAIKA 3 61 5B PAIKA         1 7B 61 PAIKA 3 7F 7B PAIKA 1 A8 80 PAIKA 1 F0 E0 PAIKA      DECIMAL       FORGET PAIKA                                      32768 CONSTANT BUFLEN                                           VAR BUFBEG VAR BUFEND VAR BUFPOS VAR LEXBEG                     26 CONSTANT ASCII_SUB                                           : NEXTCHAR BUFPOS @ C@ 1 BUFPOS +! ;                            VARIABLE LCODE                                                  HANDLE INFILE                                                   HANDLE OUTFILE OUTFILE FILENAME WORKFILE.OBJ                                   -->                                              ( #32 Scan: LINE_BOUNDS                              09/21/89 ) VAR LINE_BEG VAR LINE_END                                       : LINE_BOUNDS ( --- )                                                   BUFPOS @ 78 0                                                   DO 1- DUP C@ CHARTYPE C@ 6 =                                       OVER BUFBEG @ < OR                                              IF LEAVE THEN                                                LOOP 1+ LINE_BEG !                                              BUFPOS @                                                        78 BUFPOS @ LINE_BEG @ - - 0                                    DO DUP C@ CHARTYPE C@ DUP 6 = OVER 4 = OR SWAP 5 = OR              IF LEAVE THEN                                                   1+                                                           LOOP LINE_END ! ;                                       -->                                                                                                                             ( #33 Scan: ERRORLINE PARSVIGA INITBUF RELBUF        09/21/89 ) : ERRORLINE ( --- )                                                     CR LINE_BOUNDS                                                  LINE_BEG @ LINE_END @ OVER - TYPE CR                            BUFPOS @ LINE_BEG @ - 1- SPACES ASCII ^ EMIT                    ABORT ;                                                 : PARSVIGA ( n --- )                                                    LTEXT 1- COUNT TYPE 3 SPACES .MSG ERRORLINE ;           : INITBUF ( --- )                                                       HERE BUFBEG ! BUFLEN 4 + ?ALLOT                                 0 HERE 4 - ! BUFBEG @ BUFLEN + BUFEND !                         INFILE OPEN-FILE-R/O ?DISCERR ;                         : RELBUF ( --- )                                                        INFILE CLOSE-FILE ?DISCERR                                      BUFBEG @ DP ! 0 BUFBEG ! ;                              -->                                                             ( #34 Scan: FILLBUF RETRY NEWLINE                    09/22/89 ) : FILLBUF ( --- )                                                       BUFBEG @ BUFPOS !                                               INFILE BUFLEN BUFBEG @ READ                                     CASE  0 OF DUP BUFLEN <                                                    IF ASCII_SUB OVER BUFBEG @ + !                                  THEN DROP ENDOF                                           -1 OF ASCII_SUB BUFBEG @ ! ENDOF                              ( else ) ?DISCERR                                            ENDCASE ;                                               : RETRY INFILE LEXBEG @ BUFPOS @ - 1+ SEEK-REL                          ?DISCERR FILLBUF ;                                      VAR LINE#                                                       : NEWLINE ( --- )                                                       1 LINE# +! ASCII_CR EMIT ." Line " LINE# @ . ; -->                                                                      ( #35 Parser: LISA LISAS EMPTY                       09/17/89 ) : LISA ( CHAR A --- ) ( LISAB STRINGILE A SYMBOLI CHAR )        DUP 1 - C@ >R DUP 2 - C@ R@ 1 + <                                 IF 9 PARSVIGA                                                   THEN DUP 1 - R@ 1 + SWAP C! R> + C! ;                         : LISAS ( SYMB A --- )                                          DUP 1 - C@ >R DUP 2 - C@ R@ SYMBCONST + <                         IF 9 PARSVIGA                                                   THEN DUP 1 - R@ SYMBCONST + SWAP C! R> + S! ;                 : EMPTY ( A --- )                                                0 OVER 1 - C! DUP 2 - C@ BLANK ;                                                                                                 -->                                                                                                                                                                                                                                                           ( #36 Scan: COMMCHAR SCANCOMM                        09/22/89 ) : COMMCHAR ( --- )                                                      NEXTCHAR CHARTYPE C@                                            CASE 4 OF BUFPOS @ 1- LEXBEG ! RETRY ENDOF                           5 OF 10 PARSVIGA ENDOF                                          6 OF BUFPOS @ C@ CHARTYPE C@ 4 <>                                    IF NEWLINE THEN       ENDOF                           ENDCASE ;                                               : SCANCOMM ( --- )                                                      BEGIN BUFPOS @ LIT" *)" 1+ 2 S=                                    IF 2 BUFPOS +! EXIT                                             THEN                                                            BUFPOS @ LIT" (*" 1+ 2 S=                                       IF 2 BUFPOS +! MYSELF                                           ELSE COMMCHAR THEN                                           AGAIN ;  -->                                            ( #37 Scan: SCANSTR                                  09/21/89 ) : SCANSTR ( addr --- f ; TRUE, if string scanned )                      SYMBCONST + DUP C@ LE# C! 1+ H@ %LEXC + BUFPOS @                BEGIN OVER OVER LE# C@ S= 0=                                    WHILE NEXTCHAR DUP CHARTYPE C@ DUP 3 >                            IF DUP 4 =                                                         IF 2DROP 2DROP RETRY FALSE EXIT                                 ELSE 10 PARSVIGA                                                THEN                                                         ELSE DROP LTEXT LISA 1+                                         THEN                                                          REPEAT 2DROP LE# C@ 0                                           DO NEXTCHAR DROP LOOP LCODE S@ ; -->                                                                                                                                                                                                                    ( #38 Scan: FINDSTR TERBASE TER@                     09/21/89 ) : FINDSTR ( --- f )                                             %LEXC [ 6 SYMBCONST * DUP 1+ ] LITERAL + 0 %LEXC LITERAL + C@ 0 DO DROP LCODE S@ OVER S@ =                                         IF LTEXT EMPTY SCANSTR 1 LEAVE                                  ELSE %STRL + 0 THEN                                          LOOP 0= IF DROP 1 PARSVIGA                                              THEN ;                                                  8 CONSTANT LVIIT$ ( location of link to keyword remainder )     14 CONSTANT MAXLEX# ( maximum length of keyword )               6 CONSTANT LVQTI# ( length of main part of keyword )            8 CONSTANT LLISA# ( length of remainder of keyword )            : TERBASE ( --- base )                                                  TERMINALS HBASE ;                                       : TER@ ( loc --- 16bcan: TAGASI LEKSEEM? TYHIK KOOD!              09/17/89 ) : LEKSEEM? ( --- ADR FLAG ) ( search for lexem )                        LTEXT TERMINALS HASH                                            IF DUP LVIIT$ + TER@ ?DUP                                          IF 1+ TERBASE + LTEXT LVQTI# + LLISA# S=                           IF LTEXT 1- C@ MAXLEX# > 0=                                     ELSE FALSE THEN                                              ELSE LTEXT 1- C@ LVQTI# > 0= THEN                            ELSE FALSE THEN ;                                       : TAGASI ( --- ) -1 BUFPOS +! ;                                 : TYHIK ( --- )                                                         BL LTEXT DUP 1- DUP >R C@ 1- DUP R> C! + C! ;           : KOOD! ( ADR --- )                                                     6 + TERMINALS HBASE + S@ LCODE ! ; -->                                                                                                                                                  ( #41 Scan: DELIM/STR SIMP_DELIM COMP_DELIM          09/22/89 ) : DELIM/STR ( addr --- f )                                              KOOD! LCODE S@ ?DUP                                             IF TERMSEM @ STRSEM =                                              IF FINDSTR ELSE TRUE THEN                                    ELSE SCANCOMM FALSE                                             THEN ;                                                  : SIMP_DELIM ( --- f )                                                  LEKSEEM? IF DELIM/STR                                                    ELSE 2 PARSVIGA                                                 THEN ;                                         : COMP_DELIM ( --- f )                                                  LEKSEEM? IF DELIM/STR                                                    ELSE DROP TYHIK TAGASI SIMP_DELIM                               THEN ; -->                                                                                                     ( #42 Scan: DELIM SWITCH STATE NEXTSTATE             09/17/89 ) : DELIM ( char --- f )                                                  LTEXT LISA NEXTCHAR                                             DUP CHARTYPE C@                                                 CASE 3 OF LTEXT LISA COMP_DELIM ENDOF                                4 OF DROP RETRY FALSE ENDOF                                  ( else ) 2DROP TAGASI SIMP_DELIM 0                            ENDCASE ;                                               : SWITCH: ( in form:    SWITCH: XXXX <words> ; )                          <BUILDS SMUDGE !CSP [COMPILE] ]                                DOES> ( n --- )                                                        SWAP 2* 2* + @ EXECUTE ;                        VAR STAT#                                                       : NEXTSTATE ( char1 n --- char2 f )                                     STAT# ! LTEXT LISA NEXTCHAR FALSE ;                     -->                                                             ( #43 Scan: .. NUM0 EH.?                             09/17/89 ) : .. ( n n1 n2 --- n f ) ( check if n1 <= n <= n2 )                     >R OVER <= OVER R> <= AND ;                             ( Automata for numeric constants )                              ( NUMi  [ char1 --- char2 f ] ; f=TRUE, if constant ended )     : NUM0  ASCII 0 ASCII 7 ..                                              IF 1 NEXTSTATE                                                  ELSE 2 NEXTSTATE                                                THEN ;                                                  : EH.?  DUP ASCII E =                                                   IF 6 NEXTSTATE                                                  ELSE DUP ASCII H =                                                IF 7 NEXTSTATE                                                  ELSE DUP ASCII . =                                                IF 8 NEXTSTATE                                                  ELSE CONSCODE @ LCODE ! TRUE THEN THEN THEN ; -->   ( #44 Scan: NUM1                                     09/17/89 ) : NUM1 ( o{o} )                                                         ASCII 0 ASCII 7 ..                                              IF 1 NEXTSTATE                                                  ELSE DUP ASCII 8 = OVER ASCII 9 = OR                               IF 2 NEXTSTATE                                                  ELSE DUP ASCII A = OVER ASCII D = OR                                 OVER ASCII F = OR                                             IF 3 NEXTSTATE                                                  ELSE DUP ASCII B =                                                IF 4 NEXTSTATE                                                  ELSE DUP ASCII C =                                                 IF 5 NEXTSTATE                                                  ELSE EH.?                                            THEN THEN THEN THEN THEN ;                              : DIGIT? DUP CHARTYPE C@ 2 = ;  -->                             ( #45 Scan: NUM2 NUM3                                09/17/89 ) : NUM2 ( n{n} )                                                         DIGIT?                                                          IF 2 NEXTSTATE                                                  ELSE ASCII A ASCII D .. OVER ASCII F = OR                         IF 3 NEXTSTATE                                                  ELSE EH.?                                                     THEN THEN ;                                             : NUM3 ( nh{h} )                                                        DIGIT?                                                          IF 3 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                           IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =                                                IF 7 NEXTSTATE                                                  ELSE 12 PARSVIGA THEN THEN THEN ; -->               ( #46 Scan: NUM4 NUM5                                09/17/89 ) : NUM4 ( o{o}B )                                                        DIGIT?                                                          IF 3 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =                                                IF 7 NEXTSTATE                                                  ELSE TYHIK OCTCODE @ LCODE ! TRUE                          THEN THEN THEN ;                                        : NUM5 ( o{o}C )                                                        DIGIT?                                                          IF 3 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =   -->                             ( #47 Scan: NUM5 <cont> NUM6                         09/17/89 )              IF 7 NEXTSTATE                                                  ELSE TYHIK ASCCODE @ LCODE ! TRUE                          THEN THEN THEN ;                                        : NUM6 ( n{n}E )                                                        DIGIT?                                                          IF 9 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII + = OVER ASCII - = OR                              IF 10 NEXTSTATE                                                 ELSE 12 PARSVIGA                                           THEN THEN THEN ;                                        : NUM7 ( nh{h}H )                                                       TYHIK HEXCODE @ LCODE ! TRUE ;                          -->                                                             ( #48 Scan: NUM8 NUM9                                09/17/89 ) : NUM8 ( n{n}. )                                                        DIGIT?                                                          IF 11 NEXTSTATE                                                 ELSE DUP ASCII E =                                                 IF 12 NEXTSTATE                                                 ELSE DUP ASCII . =                                                 IF TAGASI TYHIK CONSCODE @ LCODE ! TRUE                         ELSE 12 PARSVIGA                                          THEN THEN THEN ;                                        : NUM9 ( n{n}En )                                                       DIGIT?                                                          IF 9 NEXTSTATE                                                  ELSE ASCII A ASCII F ..                                            IF 3 NEXTSTATE                                                  ELSE DUP ASCII H =  -->                              ( #49 Scan: NUM9 <cont> NUM10 NUM11                  09/17/89 )              IF 7 NEXTSTATE                                                  ELSE REALCODE @ LCODE ! TRUE                               THEN THEN THEN ;                                        : NUM10 ( n{n}[.{n}]E<+|-> )                                            DIGIT?                                                          IF 13 NEXTSTATE                                                 ELSE 12 PARSVIGA                                                THEN ;                                                  : NUM11 ( n{n}.n{n} )                                                   DIGIT?                                                          IF 11 NEXTSTATE                                                 ELSE DUP ASCII E =                                                 IF 12 NEXTSTATE                                                 ELSE REALCODE @ LCODE ! TRUE                                 THEN THEN ; -->                                         ( #50 Scan: NUM12 NUM13                              09/17/89 ) : NUM12 ( n{n}.{n}E )                                                   DIGIT?                                                          IF 13 NEXTSTATE                                                 ELSE DUP ASCII + = OVER ASCII - = OR                               IF 10 NEXTSTATE                                                 ELSE 12 PARSVIGA                                             THEN THEN ;                                             : NUM13 ( n{n}[.{n}]E[+|-]n )                                           DIGIT?                                                          IF 13 NEXTSTATE                                                 ELSE REALCODE @ LCODE ! TRUE                                    THEN ;                                                  -->                                                                                                                                                                                             ( #51 Scan: NUMSTATES NUMBER                         09/17/89 ) SWITCH: NUMSTATES NUM0 NUM1 NUM2 NUM3 NUM4 NUM5 NUM6                            NUM7 NUM8 NUM9 NUM10 NUM11 NUM12 NUM13 ;        : NUMB ( char --- f )                                                   0 STAT# !                                                       BEGIN STAT# @ NUMSTATES                                               OVER CHARTYPE C@ 4 = OR                                   UNTIL                                                           CHARTYPE C@ 4 <> DUP                                            IF TAGASI                                                       ELSE RETRY                                                      THEN ;                                                  -->                                                                                                                                                                                                                                                             ( #52 Scan: IDENT                                    09/22/89 ) : IDENT ( char --- f )                                                  BEGIN LTEXT LISA NEXTCHAR DUP CHARTYPE C@                          DUP 1 < SWAP 2 > OR                                          UNTIL CHARTYPE C@ 4 =                                           IF RETRY FALSE                                                  ELSE TAGASI LEKSEEM?                                               IF KOOD!                                                        ELSE DROP IDCODE @ LCODE !                                      THEN TRUE                                                    THEN ;                                                  -->                                                                                                                                                                                                                                                                                                                             ( #53 Scan: YLETYHIKU                                09/22/89 ) : YLETYHIKU ( --- char )                                                BUFPOS @ 1-                                                     BEGIN 1+ DUP C@ CHARTYPE C@                                     UNTIL DUP LEXBEG ! DUP 1+ BUFPOS ! C@ ;                 : SCANINIT ( --- )                                                      INITBUF FILLBUF -1 LINE# ! NEWLINE ;                    : SCANEND ( --- )                                                       RELBUF ;                                                                                                                                                                                                                                                                                                                                                                                                                                                -->                                                             ( #54 Scan: SCN SCSILU                               09/17/89 ) : SCN ( --- )                                                   255 LTEXT 2 - C!                                                BEGIN LTEXT EMPTY YLETYHIKU                                     DUP CHARTYPE C@                                                 CASE 1 OF IDENT ENDOF                                                2 OF NUMB ENDOF                                                 3 OF DELIM ENDOF                                                4 OF DROP FILLBUF FALSE ENDOF                                   5 OF DROP 0 LCODE ! TRUE ENDOF                                  6 OF DROP NEWLINE FALSE ENDOF                              ENDCASE UNTIL                                                   LTEXT 1- C@ 1+ LTEXT 2- C! ;                                    ( : SCSILU INFILE [COMPILE] FILENAME SCANINIT                           BEGIN SCN CR LTEXT 8                                                  TYPE LCODE  @ DUP . 0= UNTIL SCANEND ; ;S ) -->   ( #40 PARSER ALGUS - OBJ...  LAST RIG$  ...  SEM$    02/07/89 )                                                                 0 CONSTANT RIG$                                                 4 CONSTANT DOW$                                                 8 CONSTANT SEM$                                                 9 CONSTANT STX$                                                 VARIABLE LAST                                                     -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( #41   RIGHT DOWN SEM STEXT ST# PUU UPSTRING        02/07/89 ) : RIGHT RIG$ + @ ;                                              : DOWN  DOW$ + @ ;                                              : SEM   SEM$ + C@ ;                                             : STEXT STX$ + ;                                                VAR PUULQPP                                                     SYMBCONST 5 + CONSTANT ST#                                      : UPSTRING <BUILDS ( len UPSTRING XXX )                           HERE OVER 2+ ALLOT ( W ) C!                                              DOES> ( --- adr ) 2+ ;                               : PUU LAST @ PUULQPP  @ OVER - 1+ DUMP ;                           -->                                                                                                                                                                                                                                                                                                                          ( #42 Parser: muutujad, REL REL! ...                 11/23/87 ) VAR HANDL VAR TOP VAR LNK VAR FREE                              VAR EREL VAR KOOD VAR SLINK VAR VIIMANE                         PRODLCONST UPSTRING RPART                                        VAR LCONT VAR VANA                                              VARIABLE MAG 250 ALLOT                                         : REL TOP @ C@ ;                                                : REL! EREL @ TOP @ C! ;                                        : CODE TOP @ 1+ S@ ;                                            : CODE! KOOD @ TOP @ 1+ S! ;                                    : TREE TOP @  [ SYMBCONST 1 + ] LITERAL + @ ;                   : TREE! LNK @ TOP @ [ SYMBCONST 1 + ] LITERAL + ! ;             : RIGHT! LAST @ RIG$ + ! ;                                      : DOWN! LAST @ DOW$ + ! ;                                        -->                                                                                                                            ( #43 Parser: NT? ELEMENT                            11/02/87 ) : NT? ( KOOD---FLAG) TERMARV @ > ;                              : ELEMENT ( I---I-S PUU)                                          BEGIN TOP @ ST# + TOP ! TREE                                       IF 1-                                                           ELSE CODE NT?                                                      IF 1- THEN                                                   THEN DUP 0=                                                  UNTIL DROP TREE FREE @ ST# - TOP ! ;                                                                                                                                                           -->                                                                                                                                                                                                                                                                                                                            ( #44 Parser: SEMANTIKA! RIGHTMOST POP               11/02/87 ) : SEMANTIKA! SLINK @ H@ LAST @ SEM$ + H!                        SLINK @ 2+ LAST @ STX$ + 1+                                     SLINK @ 1+ C@ CMOVE ;                                           : RIGHTMOST ( ADR1 --- ADR2 )                                   BEGIN DUP RIGHT WHILE RIGHT REPEAT ;                            : POP ( --- ) RPART 1 - PRODLCONST ERASE                        FREE @ VIIMANE !                                                BEGIN TOP @ ST# + DUP TOP ! FREE @ U<                           WHILE CODE RPART LISAS                                          REPEAT HANDL @ DUP FREE ! ST#  - TOP ! ;                        -->                                                                                                                                                                                                                                                                                                                             ( #45 Parser: ALUS PUSH AADRESS UUSTIPP              12/04/87 ) : ALUS ( --- ) BEGIN REL TOP @                                    DUP HANDL ! ST# - TOP ! 1 = UNTIL                             CODE LCONT ! ;                                                  : PUSH ( --- ) FREE @ DUP TOP ! ST# +                           DUP FREE ! MAG - 252 > IF 8 PARSVIGA THEN                       REL! CODE! TREE! ;                                              : AADRESS ( --- )                                               SLINK @ 1 + C@ STX$ 1+                                          + LAST @ SWAP - DUP LAST ! DUP                                  HERE 160 + U< 2 ?ERROR 4 ERASE ;                                : UUSTIPP ( --- )                                               AADRESS SEMANTIKA! LNK @ DOWN!                                   LAST @ LNK ! ;                                                 -->                                                                                                                             ( #46  SEM.OUTP.ALGUS   -  VOOGUDEGA TQQ             02/07/89 ) 1     CONSTANT #FLOW     ( NUMBER OF FLOWS )                    32768 CONSTANT FLOWSIZE                                         VARIABLE FLOW            ( CURRENT FLOW )                       #FLOW ARRAY FLSEGM       ( FLOW SEGMENTS )                          0 FLSEGM  #FLOW 4 * ERASE    ( CLEAR )                      #FLOW ARRAY FLOFFS       ( >IN  FOR FLOW )                      : FLGETMEM ( --- )                                              #FLOW 0 DO                                                         HERE I FLSEGM ! FLOWSIZE ?ALLOT                              LOOP ;                                                          -->                                                                                                                                                                                                                                                                                                                             ( # 47 SEM.OUTPUT  -  VOOGUDEGA TQQ                  02/07/89 ) ( 'SEGMENT' ON SELLES VERSIOONIS LIHTSALT BAASAADRESS ! )       : FLWR ( SEG NIHE L --- ; KIRJUTAB SEGMENDIST V@LJA                                       OUTFILE-SSE  L BAITI.  AJUTINE !!! )  ROT ROT + SWAP OUTFILE LWRITE ;                                 (  0 DO                                                            OVER OVER I + C@L HERE C!                                       HERE 1 OUTFILE LWRITE                                        LOOP DROP DROP ; )                                              : FLFREEMEM ( --- )                                             ( #FLOW 0 DO 0 I FLSEGM ! LOOP ) ;                              : BUFF-KONTROLL ( inad --- inad )                                   DUP @ FLOWSIZE 1 - =                                            IF #FLOW 1 = IF FLOW @ FLSEGM @ 0 FLOWSIZE FLWR -1 OVER !                    ELSE CR ." OBJ buffer full!" ABORT THEN            THEN ;  -->                                                 ( # 48 GENEND                                        11/25/87 ) : GENEND ( --- ; V@GA T@HTIS SQNA !!! )                         #FLOW 0 DO                                                         ( I EELTEKST )                                                  I FLOFFS @                                                      IF  I FLSEGM @  0  I FLOFFS @  FLWR   THEN                      ( I J@RELTEKST )                                             LOOP                                                            0 HERE ! HERE 2 OUTFILE LWRITE                                  OUTFILE CLOSE-FILE ?DISCERR  FLFREEMEM ;                         -->                                                                                                                                                                                                                                                                                                                                                                                            ( # 49 SHOU SPCAD CHARPUT 0UTP                       11/25/87 )   VARIABLE SHOU                                                 HERE BL C, BL C, CONSTANT SPCAD                                 : CHARPUT ( AD --- AD+1 )                                       >R FLOW @ DUP FLOFFS SWAP FLSEGM @ R@ C@ SWAP 2 PICK @ +        C! 1 SWAP BUFF-KONTROLL +! R> 1+ ;                              : 0UTP ( AD L ---  ; LQPPU TYHIK KA )                           DUP 0 > IF  SHOU @ IF OVER OVER TYPE SPACE THEN                 0 DO CHARPUT LOOP DROP SPCAD CHARPUT DROP                               ELSE DROP DROP THEN ;                                    -->                                                                                                                                                                                                                                                                                                                                                                                            ( #50  PRETEX POST? POSTTEX TR? CUTN? FILL1-4        11/25/87 )   VARIABLE ROOT                                                 : PRE? ( TIPP --- FLAG ) SEM PRE$ AND ;                         : PRETEX ( TIPP -- AD L )                                       STEXT 1+ DUP C@ + 1+ DUP 1+ SWAP C@ ;                           : POST? SEM POST$ AND ;                                         : POSTTEX ( TIPP --- AD L )                                     STEXT 1+ DUP 1+ SWAP C@ ;                                       : TR? ( TIPP --- F ; ALAMPUU TQQTL.? )                          SEM REG$ AND ;                                                  : CUTN? ( TIPP --- F ; ALAMPUU OLI ? )                           SEM CUT$ AND ;                                                 : FILL1-4 ( ---  ; AJUTINE )                                    ?EXEC 4 0 DO C" & C, LOOP                                       INFILE DROP 4 + COUNT 4 MIN HERE 4 - SWAP CMOVE ;                -->                                                            ( #51   INITW0 KOOLON TEX&SYS                        11/25/87 )   VARIABLE W0AREA HERE W0AREA ! 32 ALLOT                        : INITW0 ( --- )                                                HERE W0AREA @ DP !                                              CUT$ C, 0 C, CUT$ POST$ OR C, 11 C, 8 C, C" & C, FILL1-4        3 0 DO C" 0 C, LOOP 0 C, 0 C, 1 C, C" : C, 4 C,                 4 0 DO 0 C, LOOP CUT$ POST$ OR C, 6 C, 3 C,                     3 0 DO BL C, LOOP 0 C, 0 C,   DP ! ;                            : KOOLON ( --- AD L )                                           W0AREA @ 15 + COUNT ;                                           : TEX&SYS ( --- AD L )                                          W0AREA @ 4 + COUNT ;                                             -->                                                                                                                                                                                                                                                            ( # 52 SEM&SYS SEM0 C+! S1+FL SYMB1+ CH&SYS          11/25/87 ) : SEM&SYS ( T --- AD )                                          W0AREA @ 2+ DUP ROT SWAP C! ;                                   : SEM0 ( T --- AD )                                             W0AREA @ DUP ROT SWAP C! ;                                      : C+! ( N AD --- )                                              DUP C@ ROT + SWAP C! ;                                          : S1+FL ( AD --- CARRY.FLAG )                                   DUP C@ C" 0 9 + < IF 1 SWAP C+! 0 ELSE                           C" 0 SWAP C! 1 THEN ;                                          : SYMB1+ ( AD L --- )                                           DUP ROT + 1 - SWAP 0 DO DUP S1+FL IF 1 -                         ELSE LEAVE THEN LOOP DROP ;                                    : CH&SYS ( --- )                                                W0AREA @ 10 + 3 SYMB1+ ;                                         -->                                                            ( #53  SETLAST GENTEXT                               11/25/87 ) : SETLAST ( ---  ; JUUR MUUTUJAS ROOT )                         ROOT @ BEGIN DUP DOWN WHILE DOWN REPEAT                         STEXT DUP C@ + 1+ LAST ! ;                                      VARIABLE NTRANS                                                 : GENTEXT ( ---  ; JUUR MUUTUJAS ROOT )                         0 NTRANS ! ROOT @ BEGIN BEGIN DUP PRE? IF                       DUP PRETEX 0UTP THEN                                            DUP DOWN WHILE DUP DOWN REPEAT                                  NTRANS @ 0= IF DUP NTRANS ! THEN                                BEGIN DUP POST? IF                                              DUP POSTTEX 0UTP THEN DUP RIGHT OVER ROOT @                     = OR 0= WHILE DROP REPEAT DUP ROOT @ =                          0= WHILE RIGHT REPEAT DROP SETLAST 0 LNK ! ;                     -->                                                                                                                            ( #54   0OUT TRANSLATE?                              11/25/87 ) : 0OUT ( --- AD L )                                             W0AREA @ 17 + COUNT ;                                           : TRANSLATE? ( ---  ; SAAB ETTE LNK )                           LNK @ TR? IF LNK @ ROOT !                                       ROOT @ STEXT DUP 1+ C@ + 2+ DUP C@ + 1+                         FIND IF EXECUTE                                                 ELSE 7 .MSG COUNT TYPE ERRORLINE                                THEN THEN ;                                                                                                                     : MCODEREG ( --- ; regime for forth code )                          CH&SYS LIT" MCODE" COUNT 0UTP TEX&SYS 0UTP GENTEXT              CUT$ POST$ OR SEM&SYS SLINK ! UUSTIPP ;                      -->                                                                                                                                                                                            ( #55  COLON TRANS TRNAME                            11/25/87 ) : COLON ( --- ; REGIME )                                        CH&SYS KOOLON 0UTP TEX&SYS 0UTP GENTEXT                         CUT$ POST$ OR SEM&SYS SLINK ! UUSTIPP ;                         : TRANS ( --- ; REGIME )                                        GENTEXT CUT$ SEM0 SLINK ! UUSTIPP ;                             : TRNAME ( --- ; REGIME )                                       GENTEXT NTRANS @ SEM$ + DUP C@ CUT$ OR OVER C! SLINK !          UUSTIPP ;                                                       : COLON0 FLOW @ 0 FLOW ! COLON FLOW ! ;                         : COLON1 FLOW @ 1 FLOW ! COLON FLOW ! ;                         : TRANS0 FLOW @ 0 FLOW ! TRANS FLOW ! ;                         : TRANS1 FLOW @ 1 FLOW ! TRANS FLOW ! ;                         : TRNAME0 FLOW @ 0 FLOW ! TRNAME FLOW ! ;                       : TRNAME1 FLOW @ 1 FLOW ! TRNAME FLOW ! ;                       -->                                                             ( #56 Parser: RULSEG @RUL !RUL                       02/07/89 )   SYMBCONST PRODCONST + 3 + DUP CONSTANT INFO#                    PP# + 2 + CONSTANT HR#                                        : AINFO ( A---A.INFO) PP# + ;                                   : ARULE ( A.INFO---A.RULE) SYMBCONST + ;                        : ALINK ( A.INFO --- A.LINK ) ARULE PRODCONST + ;               : AABI ( A.INFO---A.FLAG) ALINK 2 + ;                           ( RULES: lugemised [ ad --- x ] )                               : S@RUL RULES HBASE + S@ ;        : P@RUL RULES HBASE + P@ ;    : @RUL RULES HBASE + H@ ;         : C@RUL RULES HBASE + C@ ;    -->                                                                                                                                                                                                                                                                                                                                                                                             ( #57 Parser: RCONT SLCONT VKOHT @BIT                11/10/87 ) : RCONT ( a.i --- a.i flag )                                       DUP S@RUL LCODE @ PM 0= 0= ;                                 : SLCONT ( a.i --- a.i flagarser: LMSYMB                                  11/09/87 ): LMSYMB ( --- symbarser: LQPP DCFL SCLIST TRIPLE                11/10/87 ) : LOPP ;                                                        VAR DCFL                                                        : SCLIST ( a.i1 --- a.i2 )                                              BEGIN DUP AABI C@RUL                                                  IF -1 DCFL ! EXIT                                               THEN RCONT                                                      IF SLCONT IF EXIT THEN                                          THEN ALINK @RUL DUP                                       WHILE                                                           REPEAT 3 PARSVIGA ;                                     VAR TRIPLE SYMBCONST 2 * ?ALLOT                                 -->                                                                                                                                                                                                                                                             ( #60 Parser: DCLIST SCRULE ALGUS                    11/10/87 ) : DCLIST ( a.i1 --- a.i2 )                                              LMSYMB [ TRIPLE SYMBCONST + ] LITERAL S!                        LCODE @ [ TRIPLE SYMBCONST 2 * + ] LITERAL S!                   BEGIN DUP S@RUL TRIPLE S! TRIPLE HCONT HASH                           IF DROP EXIT                                                    THEN DROP ALINK @RUL DUP                                  WHILE REPEAT 3 PARSVIGA ;                               : SCRULE ( a --- a.i )                                                  0 DCFL !                                                        PP# + SCLIST DCFL @                                             IF DCLIST THEN ;                                        : ALGUS ( --- )                                                    1 LTEXT 3 - C! KONEC DUP PUULQPP ! LAST !                       MAG DUP ST# ERASE DUP HANDL ! DUP TOP ! ST# + FREE !  ;      -->                                                             ( #61 Parser: REEGEL LYLI                            11/10/87 ) : REEGEL ( --- A.I )                                               RPART RULES HASH                                                IF SCRULE                                                       ELSE 4 PARSVIGA                                                 THEN ;                                                       : LYLI ( VIIT --- )                                                ?DUP                                                            IF ( PUUVIIT <> 0 )                                                DUP VANA @ ! RIGHTMOST VANA !                                THEN ;                                                       -->                                                                                                                                                                                                                                                                                                                             ( #62 Parser: YHENDA PERMUTEERI                      11/10/87 ) : YHENDA ( --- )                                                   FREE @ TOP !                                                    BEGIN TREE LYLI TOP @ ST# + DUP TOP !                                 VIIMANE @ =                                               UNTIL FREE @ ST# - TOP ! ;                                   : PERMUTEERI ( L.PERM A.PERM --- )                                 SWAP 0                                                          DO DUP I + C@ ELEMENT LYLI                                      LOOP DROP ;                                                  -->                                                                                                                                                                                                                                                                                                                                                                                             ( #63 Parser: PERM?                                  11/10/87 ) : PERM? ( a.sem --- flag )                                         0 LNK ! LNK VANA !                                              DUP C@ 8 AND                                                    IF DUP 2+ 3 0                                                      DO DUP C@ + 1+ LOOP                                             DUP C@ SWAP 1+ PERMUTEERI                                    ELSE YHENDA                                                     THEN C@ 7 AND ;                                              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( #64 Parser: REDUCE                                 11/10/87 ) : REDUCE ( --- )                                                   ALUS POP REEGEL                                                 DUP S@RUL KOOD !                                                SYMBCONST + P@RUL PRODSEM @                                     empty DUP SLINK ! PERM?                                         IF ( SEM <> 0 )                                                    UUSTIPP                                                         TRANSLATE?                                                   THEN CODE KOOD @ PM DUP                                         IF EREL ! PUSH                                                  ELSE 6 PARSVIGA                                                 THEN  ;                                                      -->                                                                                                                                                                                             ( #65 Parser: SHIFT                                  11/10/87 ) : SHIFT ( rel --- )                                                EREL ! LCODE @ DUP                                              KOOD ! TERMSEM @ DUP                                            SLINK ! 0 LNK !                                                 IF ( SEM <> 0 )                                                    UUSTIPP                                                      THEN PUSH SCN ;                                                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( #66 Parser: PARSER SINIT EXEC                      11/10/87 )  : PARSER ( --- ) empty ALGUS empty SCN                         BEGIN empty LCODE @ CODE %AXIOM @ = 0=                          WHILE CODE SWAP PM                                               CASE 0 OF 5 PARSVIGA ENDOF                                           1 OF 1 empty SHIFT ENDOF                                        2 OF 2 empty SHIFT ENDOF                                        3 OF empty REDUCE  ENDOF                                   ENDCASE                                                        REPEAT DROP LOPP ;                                               -->                                                                                                                                                                                                                                                                                                                                                                                            (                                                    09/25/89 ) ( : SETINFILE ( --- ; dialog )                                  (    CR ." Input file? " INFILE INPUT-FILENAME ; )              : EXEC ( --- )  ( SETINFILE )                                                   ( SINIT ) PARSER                                                GENEND SCANEND ;                                 -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( # 83   LINKERI YKS OSA      -   FLOAD              02/07/89 ) ( FAILIINTERPRETAATOR )                                          -->                                                            VARIABLE SAREA 8 ALLOT   ( area to save code field e.t.c )                                                                      : ->SAREA ( CFA --- )     ( save original state )                   SAREA 12 CMOVE ;                                            ' WORD ->SAREA           ( initial state )                      : RESTORECF ( CFA --- )  ( restore state from area )                SAREA SWAP 12 CMOVE ;                                                                                                       : OVERWRITECF ( NEWCFA OLDCFA ---  ;  for colon definitions )    >R R@ ->SAREA DUP @ R@ ! R@ 4 + ! ['] ;S R> 8 + ! ;             -->                                                                                                                                                                                            ( # 84    FLOAD CONT.                                07/22/88 ) : F-WORD ( CHAR --- ADDR )                                          HERE 1+ 0  0 HERE C!                                            BEGIN OVER 1 OUTFILE LREAD                                        IF DROP -1                                                      ELSE OVER C@                                                      IF OVER C@  DUP BL < IF DROP BL DUP 3 PICK C! THEN                3 PICK =                                                        IF HERE C@ IF DROP -1 THEN                                      ELSE SWAP 1+ SWAP  HERE C@ 1+ HERE C!                           THEN                                                          ELSE DROP -1                                                    THEN                                                          THEN  DUP UNTIL                                            -->                                                                                                                            ( # 85   FLOAD END.                                  04/06/88 )     DROP DROP DROP  HERE C@ 0=                                      IF 1 HERE C! 0 HERE 1+ C!                                       THEN                                                            BL HERE DUP C@ + 1+ C!                                          HERE ;                                                      : NEW-WORD ( --- ) ['] F-WORD UWORD ! ;                         -->                                                             : OLD-WORD ( --- ) 0 UWORD ! ;                                   -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( #86 - UABORT                                       04/06/88 )                                                                 ( : ERRQUIT ( --- ; restore normal forth )                      (   OLD-WORD FLFREEMEM 0 UABORT ! ; )                           ( : NEW-ABORT ( --- )                                           (     ['] ERRQUIT UABORT ! ; )                                  : FLOAD ( ---  ; load file - not screen file )                      OUTFILE OPEN-FILE ?DISCERR                                      ( NEW-ABORT ) NEW-WORD INTERPRET ( OLD-WORD )                   OUTFILE CLOSE-FILE ?DISCERR ;                               ( : TLOAD TLOAD NEW-ABORT ; )                                   ( : TASK ; )                                                                                                                     ;S                                                                                                                                                                                             