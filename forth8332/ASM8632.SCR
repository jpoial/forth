( 8086 Assembler for PC/FORTH+                       12/28/83 ) ;S                                                              this file created 29 Jan 1982                                   modified for PC/FORTH+ 11 Feb 1983                              modified for version 2.0 25 December 1983                       copyright (c) 1982, 1983                                        Ray Duncan                                                      Laboratory Microsystems                                         4147 Beethoven Street                                           Los Angeles, CA 90066                                                                                                           modified for FORTH-83/32 12 February 1989                       copyright (c) 1989 Jaanus Po"ial, Q-SOFT, Tartu, Estonia.                                                                                                                                                                                                       ( parameter field display for assembler debugging )             HEX                                                             : DIS   BASE @ >R  ' 4 +                                                BEGIN                                                             DUP 1+ H@ OVER 3 + + 0FFFF AND NEXT-LINK = 0=                 WHILE                                                             DUP CR HEX  0 <# # # # # #>  TYPE 3 SPACES                      DUP C@ DUP  0 <# # # #>  TYPE 3 SPACES                          2 BASE !    0 <# # # # # # # # # #>  TYPE                       1+                                                            REPEAT                                                          HEX 0 <# # # # # #> CR TYPE 3 SPACES                            ." JMP NEXT" CR                                                 R> BASE ! ;                                                                                                                                                                             ( Assembler example:  32 bit square root             12/08/83 )                                                                 FORTH DEFINITIONS DECIMAL                                                                                                       CODE SQRT       DI, BP MOV  BP, SP MOV                                          DX, [BP] MOV  AX, 2 [BP] MOV                                    BX, # 200 MOV  BX DIV  AX, # 2 ADD                                                                                 1$:          BX, AX MOV  AX, 2 [BP] MOV  DX, [BP] MOV                        BX DIV  AX, BX ADD  AX, 1 SHR  AX, BX CMP                       2$ JZ  BX, AX SUB  BX, # 1 CMP  2$ JZ                           BX, # -1 CMP  1$ JNZ                                                                                               2$:          SP, # 4 ADD  BP, DI MOV  CWD  AX PUSH  DX PUSH                  NEXT,  END-CODE                                                                                                 ( Assembler example:  BEEP                           10/22/82 )                                                                 HEX                                                             CODE beep   ( divisor  time  --- )                                      SP INC SP INC  BX POP  AL, # B6 MOV                             # 43 , AL OUT  SP INC  SP INC  AX POP                           # 42 , AL OUT  AL, AH MOV  # 42 , AL OUT                        AL, # 61 IN  AH, AL MOV  AL, # 03 OR  # 61 , AL OUT        1$:  CX, # 0A48 MOV                                             2$:  2$ LOOP                                                         BX DEC   1$ JNZ   AL, AH MOV  # 61 , AL OUT                     NEXT,     END-CODE                                      DECIMAL                                                         : BEEP    ( freq  centiseconds - )                                      >R >R  1331 1000 R> */  R> beep ;                                                                                       ( 8086 Assembler )                                              CR .( Loading assembler...) CR CR                                                                                               ASSEMBLER DEFINITIONS HEX                                       VARIABLE <#>        VARIABLE <TD>                               VARIABLE <TS>       VARIABLE <RD>                               VARIABLE <RS>       VARIABLE <W>                                VARIABLE <WD>       VARIABLE <OD>                               VARIABLE <OS>       VARIABLE <D>                                VARIABLE <SP>                                                    -->                                                                                                                                                                                                                                                                                                                                                                                            ( 8086 Assembler                                     02/12/83 )                                                                 9 CONSTANT FRMAX#       ( max allowed forward references )                                                                      VARIABLE FRTABLE      FRMAX# 8 * ALLOT                                                                                          20 CONSTANT LBLMAX#      ( max allowed local labels )                                                                           VARIABLE LTABLE       LBLMAX# 4 * ALLOT                         -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( 8086 Assembler                                     12/28/83 )                                                                 : FRCHK         ( check if any unresolved forward references )          FRMAX# 0                                                        DO                                                                      I 8 * FRTABLE + @                                               IF ." unresolved forward reference" ABORT                       THEN                                                    LOOP ;                                                                                                                  : FRCLR         ( initialize forward reference tables )                 FRTABLE FRMAX# 1+ 8 * ERASE                                     LTABLE LBLMAX# 1+ 4 * ERASE ;                           -->                                                                                                                                                                                             ( 8086 Assembler                                     04/02/83 )                                                                 : FRRES         ( resolve forward references  fr# --- fr# )             FRMAX#  0                                                       DO I 8 * FRTABLE + DUP @                                           2 PICK =                                                                             ( check for JMP or CALL )                  IF   DUP 4 + @ DUP C@  DUP 0E9 = SWAP 0E8 = OR                       IF   DUP 3 + HERE SWAP - SWAP 1+ H!  ( 16 bit )                 ELSE DUP 2+ HERE SWAP - DUP ABS 07F > 23 ?ERROR                      SWAP 1+ C! ( 8 bit offset )                                THEN 0 SWAP ! ( remove from table )                        ELSE    DROP                                                    THEN                                                         LOOP ;                                                  -->                                                             ( 8086 Assembler                                     02/12/83 )                                                                 : FRADD         ( add forward reference to table )                              ( fr#  ---  fr# )                                       FRMAX# 1+ 0                                                     DO                                                                      FRMAX# I =                                                      IF      ." too many forward references" ABORT                   THEN    I 8 * FRTABLE + DUP @ 0=                                IF      2DUP ! HERE SWAP 4 + ! LEAVE                            ELSE    DROP                                                    THEN                                                    LOOP ;                                                  -->                                                                                                                                                                                             ( 8086 Assembler                                     02/12/83 )                                                                 : !LT           ( establish local label address value )                         ( fr#  --- )                                                    FRRES HERE SWAP 4 * LTABLE + ! ;                                                                                : @LT           ( fetch value of local label, if undefined )                    ( add current location to forward ref. table )                  ( fr#  ---  addr )                                              DUP 4 * LTABLE + @ SWAP OVER 0=                                 IF FRADD 2DROP HERE                                             ELSE DROP THEN ;                                -->                                                                                                                                                                                                                                                             ( 8086 Assembler                                     02/12/83 ) : 1$: 1 !LT ;   : 15$: 0F !LT ;  : 1$  1 @LT ;   : 15$ 0F @LT ; : 2$: 2 !LT ;   : 16$: 10 !LT ;  : 2$  2 @LT ;   : 16$ 10 @LT ; : 3$: 3 !LT ;   : 17$: 11 !LT ;  : 3$  3 @LT ;   : 17$ 11 @LT ; : 4$: 4 !LT ;   : 18$: 12 !LT ;  : 4$  4 @LT ;   : 18$ 12 @LT ; : 5$: 5 !LT ;   : 19$: 13 !LT ;  : 5$  5 @LT ;   : 19$ 13 @LT ; : 6$: 6 !LT ;   : 20$: 14 !LT ;  : 6$  6 @LT ;   : 20$ 14 @LT ; : 7$: 7 !LT ;   : 21$: 15 !LT ;  : 7$  7 @LT ;   : 21$ 15 @LT ; : 8$: 8 !LT ;   : 22$: 16 !LT ;  : 8$  8 @LT ;   : 22$ 16 @LT ; : 9$: 9 !LT ;   : 23$: 17 !LT ;  : 9$  9 @LT ;   : 23$ 17 @LT ; : 10$: 0A !LT ; : 24$: 18 !LT ;  : 10$ 0A @LT ;  : 24$ 18 @LT ; : 11$: 0B !LT ; : 25$: 19 !LT ;  : 11$ 0B @LT ;  : 25$ 19 @LT ; : 12$: 0C !LT ; : 26$: 1A !LT ;  : 12$ 0C @LT ;  : 26$ 1A @LT ; : 13$: 0D !LT ; : 27$: 1B !LT ;  : 13$ 0D @LT ;  : 27$ 1B @LT ; : 14$: 0E !LT ; : 28$: 1C !LT ;  : 14$ 0E @LT ;  : 28$ 1C @LT ; -->                                                             ( 8086 Assembler )                                                                                                              : !<SP>         SP@ <SP> ! ;                                    : ?<SP>         <SP> @ SP@ - 4 - 4 / ;                          ( : ERROR         ."  ? " MESSAGE S0 @ SP! SHOW-ERROR ;         : ?ERROR        SWAP IF ERROR ELSE DROP THEN ; )                : OP-ERROR      28 ERROR ;                                                                                                      0 CONSTANT      DIRECT                                          1 CONSTANT      IMMED                                           2 CONSTANT      REG8                                            3 CONSTANT      REG16                                           4 CONSTANT      INDEXED                                         5 CONSTANT      SEGREG                                          -->                                                                                                                             ( 8086 Assembler )                                                                                                              : DREG  <BUILDS C, C, C,                                                DOES> DUP C@ DUP 0FF =                                          IF DROP ELSE ABS  DUP <W> ! <WD> !                              THEN 1+ DUP C@ <TD> ! 1+ C@ <RD> !                              <#> @ 24 ?ERROR   <TD> @ 4 =                                    IF ?<SP> 0> IF <OD> ! THEN THEN ;                                                                                       : SREG  <BUILDS C, C, C,                                                DOES> DUP C@ DUP 0FF =                                          IF DROP ELSE ABS <W> !                                          THEN 1+ DUP C@ <TS> ! 1+ C@ <RS> !                              <TS> @ 4 =                                                      IF ?<SP> 0> IF <OS> ! THEN THEN ;                       -->                                                             ( 8086 Assembler )                                                                                                              0 2 0 SREG AL   0 2 0 DREG AL,  0 3 1 SREG AX   0 3 1 DREG AX,  1 2 0 SREG CL   1 2 0 DREG CL,  1 3 1 SREG CX   1 3 1 DREG CX,  2 2 0 SREG DL   2 2 0 DREG DL,  2 3 1 SREG DX   2 3 1 DREG DX,  3 2 0 SREG BL   3 2 0 DREG BL,  3 3 1 SREG BX   3 3 1 DREG BX,  4 2 0 SREG AH   4 2 0 DREG AH,  4 3 1 SREG SP   4 3 1 DREG SP,  5 2 0 SREG CH   5 2 0 DREG CH,  5 3 1 SREG BP   5 3 1 DREG BP,  6 2 0 SREG DH   6 2 0 DREG DH,  6 3 1 SREG SI   6 3 1 DREG SI,  7 2 0 SREG BH   7 2 0 DREG BH,  7 3 1 SREG DI   7 3 1 DREG DI,                                                                  0 5 -1 SREG ES   0 5 -1 DREG ES,                                1 5 -1 SREG CS   1 5 -1 DREG CS,                                2 5 -1 SREG SS   2 5 -1 DREG SS,                                3 5 -1 SREG DS   3 5 -1 DREG DS,                                -->                                                             ( 8086 Assembler )                                                                                                              0 4 -1 SREG [BX+SI]             0 4 -1 DREG [BX+SI],            1 4 -1 SREG [BX+DI]             1 4 -1 DREG [BX+DI],            2 4 -1 SREG [BP+SI]             2 4 -1 DREG [BP+SI],            3 4 -1 SREG [BP+DI]             3 4 -1 DREG [BP+DI],            4 4 -1 SREG [SI]                4 4 -1 DREG [SI],               5 4 -1 SREG [DI]                5 4 -1 DREG [DI],               6 4 -1 SREG [BP]                6 4 -1 DREG [BP],               7 4 -1 SREG [BX]                7 4 -1 DREG [BX],               -->                                                                                                                                                                                                                                                                                                                                                                                             ( 8086 Assemblert      1 <D> ! ;                                             : ?RD8*+RS    ?RD 8 * +RS ;                                     : ?RS8*+RD    ?RS 8 * +RD ;                                     -->                                                             ( 8086 Assembler                                     02/12/83 )                                                                 : OFFSET8,      HERE 1+ - DUP ABS 07F > 23 ?ERROR C, ;          : OFFSET16,     HERE 2+ - H, ( * ) ;                            : DISP,         <D> @ IF ?OS ELSE ?OD THEN DUP                                  IF DUP ABS 07F >                                                  IF SWAP MOD2 C, H, ( * )                                        ELSE SWAP MOD1 C, C, THEN                                     ELSE DROP DUP 7 AND 6 =                                           IF MOD1 C, 0 C, ELSE C, THEN                                  THEN ;                                                                                                          : 1MI           <BUILDS C,      DOES> C@ C, RESET ;             : 2MI           <BUILDS C,      DOES> C@ C, OFFSET8, RESET ;    : 3MI           <BUILDS C,      DOES> C@ +W C, RESET ;          -->                                                             ( 8086 Assembler                                     02/12/83 )                                                                 : 4MI           <BUILDS C, C, C, C,                                             DOES> ?TS CASE                                                    REG16  OF  1+ C@ +RS C, ENDOF                                   INDEXED OF DSET 2+ DUP C@ C, 1+ C@                                         +RS DISP, ENDOF                                      SEGREG OF  C@ ?RS 8 * + C, ENDOF                              OP-ERROR ENDCASE RESET ;                        : 5MI           <BUILDS C, C,                                                   DOES> ?TS CASE                                                    DIRECT  OF  1+ C@ C, OFFSET16, ENDOF                            REG16   OF  0FF C, C@ MOD3 +RS C, ENDOF                         INDEXED OF  DSET 0FF C, C@ +RS DISP, ENDOF                    OP-ERROR ENDCASE RESET ;                        -->                                                             ( 8086 Assembler )                                                                                                              : 6MI   <BUILDS C, C,                                                   DOES> DUP C@ 2 AND IF ?TD ?TS ELSE ?TS ?TD THEN                 REG16 = <W> ! REG16 =                                           IF 1+ C@ +W C, ELSE C@ +W C, C, THEN RESET ;            : 7MI   <BUILDS C, C, C,                                                DOES> ?TS IMMED =                                               IF 1+ DUP 1+ C@ +W C, ?TD CASE                                    REG8    OF  C@ MOD3 +RD C, C, ENDOF                             REG16   OF  C@ MOD3 +RD C, H, ENDOF                             INDEXED OF  DSET C@ +RD DISP, ?W IF H,                                      ELSE C, THEN ENDOF                                  OP-ERROR ENDCASE                                              ELSE DSET C@ +D +W C, ?TD CASE                          -->                                                             ( 8086 Assembler )                                                                                                                      REG8 OF ?TS CASE                                                     REG8    OF  ?RS 8 * +RD MOD3 C, ENDOF                           INDEXED OF  ?RD 8 * +RS DISP, ENDOF                             OP-ERROR ENDCASE   ENDOF                                   REG16 OF ?TS CASE                                                    REG16   OF  ?RS 8 * +RD MOD3 C, ENDOF                           INDEXED OF  ?RD 8 * +RS DISP, ENDOF                             OP-ERROR ENDCASE   ENDOF                                   INDEXED OF ?TS CASE                                                  REG8    OF  ?RS 8 * +RD DISP, ENDOF                             REG16   OF  ?RS 8 * +RD DISP, ENDOF                             OP-ERROR ENDCASE   ENDOF                                   OP-ERROR ENDCASE THEN RESET ;                           -->                                                             ( 8086 Assembler )                                              : 8MI   <BUILDS C, C,                                                   DOES> DUP 1+ C@ +W C, ?TS CASE                                    REG8    OF  C@ +RS MOD3 C, ENDOF                                REG16   OF  C@ +RS MOD3 C, ENDOF                                INDEXED OF  DSET C@ +RS DISP, ENDOF                           OP-ERROR ENDCASE RESET ;                                : 9MI   <BUILDS C, C,                                                   DOES> DUP 1+ C@ <WD> @ + ?TS 1 > IF 2+ THEN C, ?TD CASE         REG8      OF  C@ MOD3 +RD C, ENDOF                              REG16     OF  C@ MOD3 +RD C, ENDOF                              INDEXED   OF  DSET C@ +RD DISP, ENDOF                           OP-ERROR ENDCASE                                                ?TS 2 < IF DROP THEN RESET ;                            : 10MI  <BUILDS C, C,                                                   DOES> DUP C@ SWAP 1+ C@ C, C, RESET ;   -->             ( 8086 Assembler                                     08/30/82 ) : 11MI  <BUILDS C, C,                                                   DOES> ?TS CASE                                                    DIRECT  OF  DEPTH 1 < 1 ?ERROR   0FE +W C,                                  1+ C@ 6 + C, H,  ENDOF    ( * )                     REG8    OF  0FE C, 1+ C@ MOD3 +RS C, ENDOF                      REG16   OF  C@ +RS C, ENDOF                                     INDEXED OF  DSET 0FE +W C, 1+ C@ +RS DISP, ENDOF              OP-ERROR ENDCASE RESET ;                                : 12MI  <BUILDS DOES>  DROP DSET ?TD CASE                               DIRECT OF ?TS CASE                                                REG8   OF ?RS IF 088 C, ?RS 8 * 6 + C, H,   ( * )                             ELSE 0A2 +W C, H, THEN ENDOF                      REG16  OF ?RS IF 089 C, ?RS 8 * 6 + C, H,   ( * )                             ELSE 0A2 +W C, H, THEN ENDOF            -->                                                             ( 8086 Assembler )                                                                                                                        SEGREG  OF  08C C, ?RS 8 * 6 + C, H, ENDOF ( * )                OP-ERROR ENDCASE ENDOF                                        REG8 OF ?TS CASE                                                  DIRECT  OF  ?RD IF 08A C, ?RD 8 * 6 + C, H,  ( * )                            ELSE 0A0 +W C, H, THEN ENDOF                      IMMED   OF  0B0 +RD C, C, ENDOF                                 REG8    OF  Dt 88 +D C, ?RD 8 * +RS MOD3 C, ENDOF               REG16   OF  2D ERROR ENDOF                                      INDEXED OF  88 +D +W C, ?RD 8 * +RS DISP, ENDOF                 OP-ERROR ENDCASE ENDOF                                        REG16 OF ?TS CASE                                                 DIRECT  OF  ?RD IF 08B C, ?RD 8 * 6 + C, H,   ( * )                             ELSE 0A0 +W C, H, THEN ENDOF          -->                                                             ( 8086 Assembler )                                                                                                                        IMMED   OF  0B8 +RD C, H, ENDOF                                 REG16   OF  Dt 88 +W +D C, ?RD 8 * +RS MOD3 C, ENDOF            INDEXED OF  088 +D +W C, ?RD 8 * +RS DISP, ENDOF                SEGREG  OF  08C C, ?RS 8 * +RD MOD3 C, ENDOF                    OP-ERROR ENDCASE ENDOF                                        INDEXED   OF  ?TS CASE                                            IMMED   OF  0C6 +W C, ?RD DISP, ?W IF H,      ( * )                             ELSE C, THEN ENDOF                              REG8    OF  088 +D +W C, ?RS 8 * +RD DISP, ENDOF                REG16   OF  088 +D +W C, ?RS 8 * +RD DISP, ENDOF                SEGREG  OF  08C C, ?RS 8 * +RD DISP, ENDOF                      OP-ERROR ENDCASE ENDOF                                -->                                                                                                                             ( 8086 Assembler )                                                                                                                      SEGREG OF ?TS CASE                                                DIRECT   OF  08E C, ?RD 8 * 6 + C, H, ENDOF                     REG16    OF  08E C, ?RD 8 * +RS MOD3 C, ENDOF                   INDEXED  OF  08E C, ?RD 8 * +RS DISP, ENDOF                     OP-ERROR ENDCASE ENDOF                                        OP-ERROR ENDCASE RESET ;                                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( 8086 Assembler )                                                                                                              : 13MI  <BUILDS DOES> DROP DSET ?TD CASE                                DIRECT OF ?TS REG16 =                                                     IF 90 +RS C, ELSE 28 ERROR THEN ENDOF                 REG8 OF 86 +W C, ?TS CASE                                         REG8    OF  ?RD 8 * +RS MOD3 C, ENDOF                           INDEXED OF  ?RD 8 * +RS DISP, ENDOF                             OP-ERROR ENDCASE ENDOF                                        REG16 OF 86 +W C, ?TS CASE                                        REG16   OF  ?RD 8 * +RS MOD3 C, ENDOF                           INDEXED OF  ?RD 8 * +RS DISP, ENDOF                             OP-ERROR ENDCASE ENDOF                                        OP-ERROR ENDCASE RESET ;                                -->                                                                                                                             ( 8086 Assembler                                     08/20/82 )                                                                 : 14MI  <BUILDS DOES> DROP ?TS CASE                                     DIRECT OF 28 ERROR ENDOF                                        IMMED OF 0F6 +W C, ?TD CASE                                       REG8    OF  ?RD MOD3 C, ?W IF H, ELSE C, THEN ENDOF             REG16   OF  ?RD MOD3 C, ?W IF H, ELSE C, THEN ENDOF             INDEXED OF  ?RD DISP, ?W IF H, ELSE C, THEN ENDOF               OP-ERROR ENDCASE ENDOF                                        SEGREG OF 28 ERROR ENDOF                                        ?TD REG8 < ?TD REG16 > OR 28 ?ERROR 84 +W C, ?RD 8 *            +RS ?TS INDEXED < IF MOD3 C, ELSE DISP,                         THEN ENDCASE RESET ;                                    : 15MI  <BUILDS DOES> DROP 0CD C, C, RESET ;                    : 16MI  <BUILDS DOES> DROP ?RS 8 * 26 + C, RESET ;              -->                                                             ( 8086 Assembler )                                                                                                              37       1MI   AAA     80 38 38 7MI  CMP            15MI INT    D5 0A    10MI  AAD     A6       3MI  CMPS     CE    1MI  INTO   D4 0A    10MI  AAM     99       1MI  CWD      CF    1MI  IRET   3F       1MI   AAS     27       1MI  DAA      77    2MI  JA     80 10 10 7MI   ADC     2F       1MI  DAS      73    2MI  JAE    80 00 00 7MI   ADD     08 48    11MI DEC      72    2MI  JB     80 20 20 7MI   AND     F6 30    8MI  DIV      76    2MI  JBE    E8 10    5MI   CALL                ( ESC )    E3    2MI  JCXZ   98       1MI   CBW     F4       1MI  HLT      74    2MI  JE     F8       1MI   CLC     F6 38    8MI  IDIV     7F    2MI  JG     FC       1MI   CLD     F6 28    8MI  IMUL     7D    2MI  JGE    FA       1MI   CLI     EC E4    6MI  IN       7C    2MI  JL     F5       1MI   CMC     00 40    11MI INC      7E    2MI  JLE    -->                                                             ( 8086 Assembler )                                                                                                              E9 20 5MI  JMP      75       2MI  JNZ      E2       2MI  LOOP   76    2MI  JNA      70       2MI  JO       E1       2MI  LOOPE  72    2MI  JNAE     7A       2MI  JP       E0       2MI  LOOPNE 73    2MI  JNB      7A       2MI  JPE      E0       2MI  LOOPNZ 77    2MI  JNBE     7B       2MI  JPO      E1       2MI  LOOPZ  75    2MI  JNE      78       2MI  JS                12MI MOV    7E    2MI  JNG      74       2MI  JZ       A4       3MI  MOVS   7C    2MI  JNGE     9F       1MI  LAHF     F6 20    8MI  MUL    7D    2MI  JNL                 (  LDS )    F6 18    8MI  NEG    7F    2MI  JNLE     8A 8A 8A 7MI  LEA      90       1MI  NOP    71    2MI  JNO                 (  LES )    F6 10    8MI  NOT    7B    2MI  JNP      F0       1MI  LOCK     80 08 08 7MI  OR     79    2MI  JNS      AC       3MI  LODS     EE E6    6MI  OUT    -->                                                             ( 8086 Assembler )                                                                                                                                  D0 08    9MI  ROR     80 28 28 7MI  SUB     9D    1MI  POPF     9E       1MI  SAHF             14MI TEST                        D0 38    9MI  SAR     9B       1MI  WAIT    9C    1MI  PUSHF    80 18 18 7MI  SBB              13MI XCHG    D0 10 9MI  RCL      AE       3MI  SCAS    D7       1MI  XLAT    D0 18 9MI  RCR               16MI SEG     80 30 30 7MI  XOR     F3    1MI  REP      D0 20    9MI  SAL                           F3    1MI  REPE     D0 20    9MI  SHL                           F2    1MI  REPNE    D0 28    9MI  SHR     CB       1MI  RETF    F2    1MI  REPNZ    F9       1MI  STC                           F3    1MI  REPZ     FD       1MI  STD                           C3    1MI  RET      FB       1MI  STI     30 FF 50 06 4MI PUSH  D0 00 9MI  ROL      AA       3MI  STOS    00 8F 58 07 4MI POP   -->                                                             ( 8086 Assembler                                     01/01/84 ) : IF            074 C, 0 C, HERE RESET ;                        : ELSE          0EB C, 0 C, DUP HERE SWAP - DUP ABS 07F >                       23 ?ERROR SWAP 1- C! HERE RESET ;               : THEN          DUP HERE SWAP - DUP ABS 07F > 23 ?ERROR                         SWAP 1- C! RESET ;                              : ENDIF         THEN ;                                          : BEGIN         HERE RESET ;                                    : UNTIL         074 C, HERE 1+ - DUP ABS 07F > 23 ?ERROR                        C, RESET ;                                                                                                      : BYTE          0 <W> ! 0 <WD> ! ;                              : WORD          1 DUP <W> ! <WD> ! ;                            : #             1 DUP <#> ! <TS> ! ;                            : ,             DEPTH 1 < 2E ?ERROR 0 <TD> ! ;                  -->                                                             ( 8086 Assembler                                     01/01/84 )                                                                 : CS:   CS SEG ;                                                : ES:   ES SEG ;                                                : DS:   DS SEG ;                                                : SS:   SS SEG ;                                                                                                                : NEXT,         0E9 C, NEXT-LINK OFFSET16, ;                                                                                    : END-CODE      RESET  FRCHK   ?EXEC  ?CSP                                      UNSMUDGE [COMPILE] FORTH ;                                                                                      -->                                                                                                                                                                                                                                                             ( 8086 Assembler                                     12/28/83 )  -->                                                            VARIABLE far_resume -4 ALLOT     ASSEMBLER                                                                                              BP, SP XCHG                                                     NEXT-LINK JMP                                                                                                           FORTH                                                           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( 8086 Assembler                                     02/12/83 )  -->                                                            VARIABLE far_code -4 ALLOT    ASSEMBLER                                 BP, SP XCHG                                                     CS PUSH                                                         AX, # far_resume MOV                                            AX PUSH                                                         BP, SP XCHG                                                     ES PUSH                                                         AX, BX MOV                                                      AX INC                                                          AX INC                                                          AX PUSH                                                         RETF                                                    FORTH                                                           -->                                                             ( 8086 Assembler                                     02/12/83 )  -->                                                            VARIABLE near_code -4 ALLOT    ASSEMBLER                                far_code JB                                                     BP, SP XCHG                                                     CS PUSH                                                         AX, # far_resume MOV                                            AX PUSH                                                         BP, SP XCHG                                                     CS PUSH                                                         AX, BX MOV                                                      AX INC                                                          AX INC                                                          AX PUSH                                                         RETF                                                    FORTH           -->                                             ( 8086 Assembler                                     03/23/84 )                                                                 FORTH DEFINITIONS                                                                                                               : BUILD         CREATE HERE DUP BODY> ! ;                                                                                       : CODE          ?EXEC !CSP BUILD SMUDGE                                         ASSEMBLER FRCLR RESET                                           FORTH [COMPILE] ASSEMBLER ; IMMEDIATE                                                                           -->                                                                                                                                                                                                                                                                                                                                                                                             ( 8086 Assembler                                     02/11/83 )                                                                 DECIMAL CR CR                                                   .( 8086 Assembler loaded.) CR                                   HERE U. .( bytes used in dictionaryvideo-io DROP DROP DROP DROP                     0    0   0 200 video-io DROP DROP DROP DROP ;                                                                          DECIMAL                                                                                                                                                                                                                                                                                                                        HEX                                                             CODE DD AX, # B000 MOV DS, AX MOV  AH, # 41 MOV                 SI, # 0 MOV [SI], AH MOV NEXT, END-CODE DECIMAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                