                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                MODULE KUUP;                                                    TYPE DATA=RECORD DAY:[1..31];                                                    MONTH: [1..12];                                                 YEAR: CARDINAL ; END ;                         VAR D: DATA;                                                    BEGIN                                                           WITH D DO                                                       DAY:=30; MONTH:=8; YEAR:=1989                                   END;                                                            END KUUP .                                                                                                                                                                                                                                                                                                                                                                                                                                                      MODULE MASSIV;                                                    TYPE  IND=[1..10];                                              VAR X,Y:ARRAY IND,IND OF CARDINAL;                              BEGIN                                                             X[1,1]:=3;  Y[2,2]:=X[1,1];                                 END MASSIV.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MODULE INIMENE;                                                 TYPE Inime=RECORD                                                Eesnimi,Nimi:CHAR;                                              CASE Mees: BOOLEAN OF                                             TRUE: Aukraad: CARDINAL |                                       FALSE: Neiuna: CHAR;                                          END;                                                            Ident: CARDINAL;                                                Synd: CARDINAL;                                                 CASE Seis: PERESEIS OF                                              VALLALINE: |                                                    ABIELUS: Abikaasa: CARDINAL;                                             Lapsi: CARDINAL;                                                Pulm: DATE;                                        END; END; END INIMENE .                                                                                                        MODULE SIEVE;                                                   VAR I,J,K,L,N: INTEGER;                                         FLAGS:ARRAY [0..8190] OF INTEGER;                               BEGIN                                                              FOR I:=0 TO 8190 DO FLAGS[I]:=1 END;                            N:=0;                                                           FOR I:=0 TO 8190                                                DO IF FLAGS[I]=1                                                   THEN K:=2*I+3; L:=K+I;                                               WHILE L<=8190                                                   DO FLAGS[L]:=0; L:=L+K                                          END; N:=N+1                                                END                                                          END                                                          END SIEVE .                                                                                                                     MODULE INIMENE;                                                 TYPE Inime=RECORD                                                CASE Mees: BOOLEAN OF                                             TRUE: Aukraad: CARDINAL |                                       FALSE: Neiuna: CHAR;                                          END;                                                           END; END INIMENE.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               DEFINITION MODULE  INOUT;                                           PROCEDURE OPENINPUT ( DEFEXT: ARRAY OF CHAR );                  PROCEDURE OPENOUTPUT ( DEFEXT: ARRAY OF CHAR );                 PROCEDURE CLOSEINPUT;  PROCEDURE CLOSEOUTPUT;                   PROCEDURE READ ( VAR CH: CHAR );                                PROCEDURE READSTRING ( VAR S: ARRAY OF CHAR );                  PROCEDURE READINT ( VAR X: INTEGER );                           PROCEDURE READCARD ( VAR X: CARDINAL );                         PROCEDURE WRITE ( CH: CHAR );                                   PROCEDURE WRITELN;                                              PROCEDURE WRITESTRING ( S: ARRAY OF CHAR );                     PROCEDURE WRITEINT ( X: INTEGER; N: CARDINAL );                 PROCEDURE WRITECARD ( X, N: CARDINAL );                         PROCEDURE WRITEOCT ( X, N: CARDINAL );                          PROCEDURE WRITEHEX ( X, N: CARDINAL );                      END INOUT.                                                      ( #7 Modula-2 grammar           JAANUS               06/30/89 ) =DEF= CompilationUnit                                           number = integer  # I/C#  /                                              real .                                                 integer = [C] /                                                           [O]  #PRE OCT$# /                                               [H]  #PRE HEX$# .                                     real = [D]  #PRE REAL$# .                                       string = ['S']  #PRE STR'# #POST '# /                                    ["S"]  #PRE STR"# #POST "# /                                     [A]   #PRE OCT$# #POST $CHAR# .                       ConstantDeclaration = ConstIdent ConstExpression #PERM 2 1 # .  ConstIdent = ident '=' #PRE CONST$# .                           ident = [I] . -->                                                                                                                                                                               ( #8 Modula-2 grammar           MATI                 06/30/89 ) ConstExpression = ConstSimple # BENUM# /                                          ConstSimple Crelation ConstSimple                                     #PERM 1 3 2 #  # C-BIN-OP BENUM# .      Crelation = '='   # 1#  /                                                   '<>'  # 2#  / '#' # 2# /                                        '<'   # 3#  /                                                   '<='  # 4#  /                                                   '>'   # 5#  /                                                   '>='  # 6#  /                                                   'IN'  # 15# .                                       ConstSimple = ConstSimple1 /                                                  CplusMinus ConstSimple1 #PERM 2 1 #  # C-UN-OP# . CplusMinus = '+' # 1# /                                                      '-' # 2# .                                         ConstSimple1 = ConstTermList .  -->                             ( #9 Modula-2 grammar           MATI                 06/30/89 ) ConstTermList = ConstTerm /                                                     ConstTermList CaddOperator ConstTerm                              #PERM 1 3 2 #  # C-BIN-OP# .                  CaddOperator = '+'  # 9#  /  '-' # 10#  /                                      'OR' # 7# .                                      ConstTerm = ConstTerm1 .                                        ConstTerm1 = ConstFactor /                                                   ConstTerm1 CmultOperator ConstFactor                              #PERM 1 3 2 #  # C-BIN-OP# .                     CmultOperator = '*' # 11# / '/' # 12# /                                         'DIV' # 13# / 'MOD' # 14# /                                     '<<' # ????<<????# / '>>' # ????>>????# /                       'AND' # 8# /                                                    '&' # 8# . -->                                                                                                  ( #10 Modula-2 grammar          MATI                 06/30/89 ) ConstFactor = number / string #POST ALLOT-STR# / ConstSet /                   qualident # CID-TYPE# /                                         LP ConstExpression2RP /                                         'NOT' ConstFactor # C-COMPILE-NOT# /                            '~' ConstFactor # C-COMPILE-NOT# /                              qualidentLP ')' /                                               qualidentLP ConstArgumentsRP .                    ConstArgumentsRP = ConstArguments ')' .                         ConstArguments = ConstExpression / CAscomma /                                    ConstArguments CAscomma ConstExpression1 .     CAscomma = ',' .                                                ConstExpression1 = ConstExpression .                            ConstExpression2RP = ConstExpression2 ')' .                     LP = '(' .                                                      ConstExpression2 = ConstExpression . -->                        ( #11 Modula-2 grammar          MATI                 06/30/89 ) ConstSet = ConstSetOpen ConstSetContent .                       ConstSetOpen = qualident '{' / '{' #PRE BITSET# .               ConstSetContent = ConstElementList '}' #PRE CSROOT# # SET9# /                     '}'                  #PRE CSROOT# # SET9# .   ConstElementList = ConstElement /                                                  ConstElementList CeleComma ConstElement .    CeleComma = ',' .                                               ConstElement = ConstExpression           # SETONE# /                           ConstSubrange             # SETTWO# .            ConstSubrange = ConstExpression3 '..' ConstExpression                                                            # CRROOT# .    ConstExpression3 = ConstExpression .                            qualidentLP = qualident '(' .                                    -->                                                                                                                            ( #12 Modula-2 grammar          JAANUS               06/30/89 ) TypeDeclaration = TypeIdent type  #PERM 2 1 # .                 TypeIdent = ident '='  #PRE TYPE$# .                            type = SimpleType / ArrayType /                                        RecordType / SetType /                                          PointerType / ProcedureType .                            SimpleType = TypeName / enumeration / SubrangeType .            TypeName = qualident .                                          enumeration = ILP ValueList ')' .                               ILP = '(' .                                                     ValueList = ValueList1 #PRE MVLROOT# .                          ValueList1 = Enuid /                                                         ValueList1 Enucomma Enuid1 .                       Enucomma = ',' .                                                Enuid1 = Enuid .                                                 -->                                                            ( #13 Modula-2 grammar          JAANUS               06/30/89 ) Enuid = id #PRE ENUID$# .                                       id = [I] .                                                      SubrangeType = TypeName TBracket ConstSubrange1 ']'                              #PERM 3 2 1 #  #POST SET-RTYPE# /                             TBracket ConstSubrange1 ']' .                    TBracket = '[' .                                                ConstSubrange1 = ConstSubrange #POST RANGE-TAB# .               ArrayType = 'ARRAY' ArraySpec .                                 ArraySpec = Onedim /                                                        SimpleType1 Arrcomma ArraySpec  #POST ARRAY-TAB# .  Arrcomma = ',' .                                                Onedim  = SimpleType1of  type  #POST ARRAY-TAB# .               SimpleType1of = SimpleType1 'OF' .                              SimpleType1 = SimpleType .                                       -->                                                            ( #14 Modula-2 grammar          JAANUS               06/30/89 ) VariableDeclaration = VariableNames1 type                                             #PERM 2 1 #  #POST TYPE-DROP# .           VariableNames1 = VariableNames ':' .                            VariableNames = varid / VariableNames Varicomma varid .         Varicomma = ',' .                                               varid = [I]  #PRE TYPE-DUP VAR$# /                                      IbrC ']' #PRE TYPE-DUP VAR$# #POST PLACE-VAR# .         IbrC = Ibr ConstExpression .                                    Ibr  = Ivarid '[' .                                             Ivarid = [I] .                                                   -->                                                                                                                                                                                                                                                                                                                            ( #15 Modula-2 grammar                               08/06/89 ) RecordType = 'RECORD' RecordStructure 'END' /                                'RECORD' 'END' .                                   RecordStructure = FieldListSequence                                                                #PRE MRT# #POST CONTBACK# .  FieldListSequence = FieldList /                                                     FieldListSequenceSemi FieldList /                               FieldListSequenceSemi .                     FieldListSequenceSemi = FieldListSequence ';' /                                         ';' .                                   FieldList = FixedFields /                                                   VariantFields .                                     FixedFields = FieldNames1 type                                              #PERM 2 1 #  #POST TYPE-DROP#  .                    FieldNames1 = FieldNames ':' .                                  -->                                                             ( #16 Modula-2 grammar                               08/06/89 ) FieldNames = elid /                                                          FieldNames Fieldcomma elid .                       Fieldcomma = ',' .                                              elid = [I]   #PRE TYPE-DUP EL$# .                               VariantFields = RecordCaseHead VariantList 'END' # CLENGTH# /                   RecordCaseHead 'END' .                          RecordCaseHead = RecordCase TagField 'OF' .                     RecordCase = 'CASE' .                                           TagField = fident1 NamedType #PERM 2 1 # /                                 Colon NamedType #POST  UNCEL$# .                     fident1 = fident ':' .                                          Colon = ':' .                                                   NamedType = TypeName .                                          fident = [I]  #PRE  CEL$# .                                      -->                                                            ( #17 Modula-2 grammar                               08/06/89 ) VariantList = variants /                                                      variants ElseVariant /                                          ElseVariant .                                     variants = variant /                                                       variants '|' variant /                                          variants '|' /                                                  '|'  /                                                          '|' variant .                                        variant = RecordCaseLabels1 VariantStructure                                                   #PERM 2 1 # /                              RecordCaseLabels ':' #PRE 0 # .                       RecordCaseLabels1 = RecordCaseLabels ':' .                       -->                                                                                                                                                                                            ( #18 Modula-2 grammar                               08/06/89 ) RecordCaseLabels = CaseLabelList  #PRE 0#  # MAKECT# .          CaseLabelList = CaseLabels                           /                          CaseLabelList Casecomma CaseLabels         .    Casecomma = ',' .                                               CaseLabels = CaseLabel                  # SELECTOR#  .          CaseLabel  = ConstExpression                         /                       ConstSubrange                           .          VariantStructure = FieldListSequence                                                #PRE MRT START-ADDR#  #POST CONTBACK# .     ElseVariant = RecordElse VariantStructure #POST 0 MAKECT# /                   RecordElse #POST 0 MAKECT# .                      RecordElse = 'ELSE' .                                            -->                                                                                                                                                                                            ( #19 Modula-2 grammar    AJUTISELT VALE !!!!!!!     06/30/89 ) ProcedureType = 'PROCEDURE' FormalTypeList                                         #PRE TLIST-START#  #POST TLIST-FINISH# /                     'PROCEDURE' #POST PROC# .                       FormalTypeList = LP FormalParTypes RP FunctionType1 /                            LP FormalParTypes RP /                                          LPr RP FunctionType1 /                                          LPr RP .                                       FormalParTypes = FormalParTypes1 .                              FormalParTypes1 = FormalParType /                                                 FormalParTypes1 Forparcomma FormalParType .   Forparcomma = ',' .                                             FormalParType = FVar FormalType #POST $VARPLACE# /                              FormalType #POST $VALUEPLACE# .                 FunctionType1 = Colon NamedType #POST $FUNVALPLACE# .           FunctionType  = Colon NamedType . -->                           ( #20 Modula-2 grammar                               10/05/89 ) LPr = '(' .                                                     RP = ')' .                                                      FVar = 'VAR' .                                                  SetType = SetHead type #POST $SET-OF# .                         SetHead = 'SET' 'OF' .                                          PointerType = 'POINTER' 'TO' Ptrtype #POST $POINTER-TO# .       Ptrtype = Ptypeid  #REG TRNAME# /                                         ArrayType / PointerType / ProcedureType /                       RecordType .                                          Ptypeid = qid #PRE PTRTYPE$# .                                  designator = designator1 # RES-CONTEXT REC-CHECK# .             designator1 = [I]  #PRE [#   # ] IDENTIFIER#  /                               designator1 FNDot fname /                                       designator1 ABracket ExpList ']' # -LEVEL# /                    designator1 '^' # *POINTER# . -->                 ( #21 Modula-2 grammar                               10/05/89 ) FNDot = '.' .                                                   fname = [I]  #PRE OP-REC WPUSH+ [#  #POST ] IDENTIFIER WPOP-# . ABracket = '[' # M-ARRAY# .                                     ExpList = expressions .                                         relation = '=' # [ 1 ]# / '<>' # [ 2 ]# / '#' # [ 2 ]# /                   '<' # [ 3 ]# / '<=' # [ 4 ]# / '>' # [ 5 ]# /                   '>=' # [ 6 ]# / 'IN' # [ 15 ]# .                     PlusMinus = '+' # [ 1 ]# / '-' # [ 2 ]# .                       AddOperator = '+' # [ 9 ]# / '-' # [ 10 ]# / 'OR' # [ 7 ]# .    MultOperator = '*' # [ 11 ]# / '/' # [ 12 ]# / 'DIV' # [ 13 ]#      / 'MOD' # [ 14 ]# / 'AND' # [ 8 ]# / '&' # [ 8 ]# /               '<<' # [ ????<<???? ]# / '>>' # [ ????>>???? ]# .          -->                                                                                                                                                                                            ( #22 Modula-2 grammar                               10/05/89 ) expressions = expression # MINDEX# /                                          expressions EXComma expression1 .                 EXComma = ',' .                                                 expression1 = expression # MINDEX# .                            expression = expression2 #PRE SV0# .                            expression2 = SimpleExpression /                                             SimpleExpression relation SimpleExpression                        #PERM 1 3 2 #  # BIN-OP# .                       SimpleExpression = SimpleExpression1 /                                             PlusMinus SimpleExpression1                                       #PERM 2 1 # # UN-OP# .                     SimpleExpression1 = TermList .                                  TermList = term /                                                          TermList AddOperator term #PERM 1 3 2 # # BIN-OP# .  term = term1 . -->                                              ( #23 Modula-2 grammar                               11/15/90 ) term1 = factor /                                                        term1 MultOperator factor  #PERM 1 3 2 #  # BIN-OP# .   factor = number  #PRE [#   # ] CONSTTABLE# /                             Exstring  #PRE [#   # ] $STRINGCONST# /                         set                 # CONSTTABLE# /                             designator  # COMPILE-FETCH# /                                  designator ActualParameters  # AGREND# /                        LPExpression ')'  # SV+# /                                      'NOT' factor  # COMPILE-NOT# /                                  '~' factor  # COMPILE-NOT# .                           LPExpression = ELP expression2 .                                ELP = '(' .                                                      -->                                                                                                                                                                                            ( #24 Modula-2 grammar                               11/15/90 ) set = SetOpen SetContent1 .                                     SetContent1 = SetContent  #PRE [#  # ]# .                       Exstring = string #REG SYSPOST#  #POST SYS-STR$# .              SetOpen = designator '{'      / '{'                                  #PRE [ BITSET ] IDENTIFIER# #POST RES-CONTEXT REC-CHECK# . ActualParameters = PLP ParmList ')' #PRE AGRNAME#  /                               LPr RP           #PRE AGRNAME#  .            PLP = '(' .                                                     ParmList = parms .                                              parms = parm   # NEXTCOMP#   / parms Parmcomma parm1 /                  Parmcomma .                                             Parmcomma = ',' .                                               parm1 = parm   # NEXTCOMP#   .                                  parm = expression .                                              -->                                                            ( #25 Modula-2 grammar          MATI                 06/30/89 ) statement = onestat /                                                       stlabelcl statement .                               stlabelcl = stlabel ':' .                                       stlabel   = [I] #PRE PUTLAB$# .                                 onestat   = assignment / gotostatement / ProcedureCall /                    IfStatement    #PRE CASE#   # ESAC# /                           CaseStatement / WhileStatement /                                RepeatStatement / LoopStatement /                               ForStatement / WithStatement /                                  'EXIT' # EXIT# / ReturnStatement /                              'CODE' ForthList 'END' #REG MCODEREG#                                                  #POST MEND-CODE# /                       'FORTH' ForthList 'END' .                           gotostatement = 'GOTO' [I] #POST $GOTO# .                        -->                                                            ( #26 Modula-2 grammar          MATI                 10/05/89 ) assignment = LeftPart ':=' RightPart                                           #PERM 2 1 # # COMPILE-ASSIGN# .                  LeftPart = designator   # RECIPIENT?# .                         RightPart = expression .                                        ForthList = ForthList1 #PRE FORTHBEGIN# #POST FORTHEND# .       ForthList1 = ForthList1 [/$S$/] /                                            [/$S$/] .                                                                                                          qualident = qid  /                                                          qprefix QIDot qid #POST RES-CONTEXT# .              QIDot = '.' .                                                   qid = [I] .                                                     qprefix = modid / qprefix QIDot modid .                         modid = [I]  #POST MOD-ID# . -->                                                                                                ( #27 Modula-2 grammar          MATI                 11/15/90 ) ProcedureCall = designator ProcParameters  # PROCEND# /                         designator  # PROCNAME PROCEND# .               ProcParameters = PLP ParmList ')' #PRE PROCNAME# .              StatementSequence = StatementList .                             StatementList = statement /                                                     StatementListSemi statement /                                   StatementListSemi .                             StatementListSemi = StatementList ';' /                                             ';' / stlabelcl ';' .                       IfStatement = IfThen ElsifPart else 'END' /                                   IfThen ElsifPart 'END' /                                        IfThen else 'END' /                                             IfThen 'END' .                                    IfThen = 'IF' Bexpression Then StatementSequence  # ENDOF# /             'IF' Bexpression Then  # ENDOF# . -->                  ( #28 Modula-2 grammar          MATI                 06/30/89 ) ElsifPart = ElsifList .                                         ElsifList = ElsifThen /                                                     ElsifList ElsifThen .                               ElsifThen = 'ELSIF' Bexpression Then StatementSequence                        # ENDOF#   /                                                  'ELSIF' Bexpression Then  # ENDOF# .                Then = 'THEN'  # =># .                                          else = StatElse StatementSequence /                                    StatElse .                                               StatElse = 'ELSE' .                                             -->                                                                                                                                                                                                                                                                                                                             ( #29 Modula-2 grammar          MATI                 06/30/89 ) CaseStatement = CaseStatHead CaseList     # ESAC CASE-DROP# .   CaseStatHead = StatCase expression 'OF'         # CF- CASE# .   StatCase = 'CASE'                               # CF+# .        CaseList = cases else 'END' /                                              cases 'END' /                                                   'END' /                                                         else 'END' .                                         cases = case /                                                          cases '|' case /                                                cases '|' /                                                     '|' case /                                                      '|' .                                                   -->                                                                                                                                                                                             ( #30 Modula-2 grammar          MATI                 11/24/89 ) case = StatCaseLabelsK  StatementSequence                                                                   # VOCOFF ENDOF# /   StatCaseLabelsK                                                                                             # VOCOFF ENDOF# .   StatCaseLabelsK = StatCaseLabels ':' .                          StatCaseLabels = CaseLabelListC            # STM-LABELS =># .   CaseLabelListC = CaseLabelsC                                /                   CaseLabelListC CCComma CaseLabelsC  # OR# .     CCComma = ',' .                                                 CaseLabelsC = CaseLabelC        #PRE [#  # ] SELECTOR-LIST# .   CaseLabelC = ConstExpression  /                                              ConstSubrange    .                                 -->                                                                                                                                                                                             ( #31 Modula-2 grammar          MATI                 06/30/89 ) WhileHead = 'WHILE' Bexpression  #PRE BEGIN#  # WHILE#   .      WhileStatement = WhileHead DoStatements 'END'  # REPEAT# .      DoStatements = 'DO' StatementSequence /                                        'DO' .                                           RepeatStatement = 'REPEAT' StatementSequence 'UNTIL'                                Bexpression  #PRE BEGIN#  # UNTIL# /                          'REPEAT' 'UNTIL' Bexpression                                      #PRE BEGIN#  # UNTIL# .                     Bexpression = expression    # BOOLEAN?# .                       ForStatement = ForHead DoStatements 'END'  # LOOP#    /                        ForHead step DoStatements 'END'                                   #PERM 1 3 2 #   # +LOOP# .                     ForHead = 'FOR' initial limit                                               #PERM 2 1 # .                                        -->                                                            ( #32 Modula-2 grammar          MATI                 06/30/89 ) initial = Fident ':=' StartExpression   #PERM 2 1 # .           Fident = ident    #PRE DO &I [#   # ] IDENTIFIER LOOPINDEX !# . StartExpression = expression  # STARTEXP# .                     limit = 'TO' expression  # LIMITEXP# .                          step = 'BY' ConstExpression  #PRE [#  # ] STEPCONST#  .         LoopStatement = LoopStatementList 'END'                                           #REG COLON#   #PRE BEGIN#  # AGAIN ;# .       LoopStatementList = 'LOOP' StatementSequence /                                      'LOOP' .                                    WithStatement = WithHead DoStatements 'END'                                                    # WPOP- WITHOUT I*PREVIOUS# .    WithHead = 'WITH' designator          #PRE WFLAG+ I*ALSO#                                                   # WPUSH+ WFLAG-# .  ReturnStatement = 'RETURN' expression  # RETURN# /                                'RETURN'  # 0RETURN# .             -->        ( #33 Modula-2 grammar    AJUTISELT VALE !!!!!       06/30/89 ) BeginStatements = 'BEGIN' StatementSequence  #REG COLON#                            #PRE BODY-BEGIN#  # BODY-END ;#   /                           'BEGIN'  #REG COLON#  #POST ;#   .            ProcedureDeclaration = ProcedureBegin Pblock EndIdent                                    #REG TRANS# #PRE NPAIRS$# /                                   ProcedureBegin 'FORWARD' .               ProcedureBegin = ProcedureHeading .                             ProcedureHeading = 'PROCEDURE' name FormalParameters ';'                            #REG TRNAME# #PRE PRTAB$# #POST NOOP ~# /                      'PROCEDURE' name ';'                                             #REG TRNAME# #PRE PRTAB$# #POST NOOP ~# .   name = [I] .                                                    EndIdent = [I] .                                                Mblock = block .                                                Pblock = block . -->                                            ( #34 Modula-2 grammar          JAANUS               06/30/89 ) block = declarations BeginStatements BegEnd                                 #REG TRANS#  #PRE BLBODY$#  #POST END-BLOCK# /              BeginStatements BegEnd                                              #REG TRANS#  #PRE BLBODY$#  #POST END-BLOCK# /              declarations BlockEnd  #REG TRANS#  #POST END-BLOCK# /          BlockEnd #REG TRANS# #POST END-BLOCK# .                 BlockEnd = 'END' .                                              BegEnd = 'END' .                                                declarations = declaration  #REG TRANS# /                                      declarations declaration  #REG TRANS# .          declaration = constants /   types /                                           variables / stlabels ';' /                                      ProcedureDeclaration ';' /                                      ModuleDeclaration ';' .                            -->                                                            ( #35 Modula-2 grammar          JAANUS               06/30/89 ) constants = 'CONST' ConstantList / 'CONST' .                    ConstantList = ConstantList1 .                                  ConstantList1 = DeclareConstant /                                              ConstantList1 DeclareConstant .                  DeclareConstant = ConstantDeclaration ';' .                     types = BType TypeList /   BType .                              BType = 'TYPE' .                                                TypeList = DeclareType /                                                DeclareType TypeList .                                  DeclareType = TypeDeclaration ';' .                             variables = BVar VariableList /   BVar .                        BVar = 'VAR' .                                                  VariableList = DeclareVariable /                                               DeclareVariable VariableList .                   DeclareVariable = VariableDeclaration ';' . -->                 ( #36 Modula-2 grammar                               06/30/89 ) stlabels = 'LABEL' Deflabels1 .                                 Deflabels1 = Deflabels .                                        Deflabels = Deflabel /                                                      Deflabelscm Deflabel .                              Deflabelscm = Deflabels ',' .                                   Deflabel = [I] #PRE LABEL$# .                                   FormalParameters = FLP FPSectionList RP FunctionType                                     #POST $FUNCT# /                                           FLP FPSectionList RP /                                          LPr RP FunctionType                                                   #POST $FUNCT# /                                           LPr RP .                                     FPSectionList = FPSections #PRE 0PNUM!# .                       FLP = '(' .                                                       -->                                                           ( #37 Modula-2 grammar                               06/30/89 ) FPSections = FPSection /                                                     FPSectionsSemi FPSection .                         FPSectionsSemi = FPSections ';' .                               FPSection = FVar section #PRE VAR-SECT# /                                   section #PRE VALUE-SECT# .                          section = ParamNames1 FormalType                                             #PERM 2 1 #   #POST TYPE-DROP# .                   ParamNames = Pnid /                                                          ParamNames PNComma Pnid .                          PNComma = ',' .                                                 ParamNames1 = ParamNames ':' .                                  Pnid = id #PRE TYPE-DUP VAR$# #POST INCPNUM&!TAB# .             FormalType = FormalArray NamedType #POST $ARRAY-OF# /                        TypeName .                                         FormalArray = 'ARRAY' 'OF' . -->                                ( #38 Modula-2 grammar          JAANUS               06/30/89 ) ModuleDeclaration = MheadImport export1 Mblock EndIdent                             #PERM 1 3 4 2 # #REG TRANS# #PRE NPAIRS$# /                     ModuleHeading export1 Mblock EndIdent                           #PERM 1 3 4 2 # #REG TRANS# #PRE NPAIRS$# /                     ModuleHeading Mblock EndIdent                                       #REG TRANS# #PRE NPAIRS$# /                                 MheadImport Mblock EndIdent                                         #REG TRANS# #PRE NPAIRS$# .             MheadImport = ModuleHeading ImportList1 ;                       ModuleHeading = 'MODULE' name priority ';'                                        #REG TRNAME#  #PRE MODTAB$#  #POST SET-LOC# /                 'MODULE' name ';'                                                 #REG TRNAME#  #PRE MODTAB$#  #POST SET-LOC# . priority = PBracket PriorNumber ']' .                           PBracket = '[' . -->                                            ( #39 Modula-2 grammar          JAANUS               06/30/89 ) PriorNumber = integer  #POST $PRIORITY# .                       ImportList1 = ImportList #REG TRANS# .                          export1 = export .                                              export = export2 #PRE EXPORT-ON# #POST EXPORT-OFF# .            ImportList = ImportList2 #PRE IMPORT-ON# #POST IMPORT-OFF# .    ImportList2 = import ';' /                                                    ImportList2 import ';' .                          import = source 'IMPORT' ImportNames  #POST FROM-OFF# /                  'IMPORT' ImportNames .                                 source = 'FROM' [I]  #PRE FROM$# .                              ImportNames = ImportNames1 .                                    ImportNames1 = id4 /                                                           ImportNames1 Impcomma id4 .                      Impcomma = ',' .                                                id4 = id  #PRE IMPORT$# . -->                                   ( #40 Modula-2 grammar          JAANUS               06/30/89 ) export2 = 'EXPORT' 'QUALIFIED' ExportNames                             #PRE QUAL-ON# #POST QUAL-OFF# / 'EXPORT' ExportNames .   ExportNames = ExportNames1 ';' .                                ExportNames1 = id5 / ExportNames1 EpComma id5 .                 EpComma = ',' .                                                 id5 = id  #PRE EXPORT$# .                                       DefinitionModule = DefModuleHead imports definitions EndIdent /                    DefModuleHead8 definitions EndIdent .        DefModuleHead8 = DefModuleHead                                                   #REG TRNAME# #PRE M$# #POST NO-IMPORT# .       DefModuleHead = DefModuleHead1                                                    #REG TRNAME#  #PRE MODTAB$#  #POST SET-DEF# . DefModuleHead1 = 'DEFINITION' 'MODULE' name ';'                                   #REG TRNAME# #PRE DMODULE$# .                 imports = ImportList  #REG TRANS# . -->                         ( #41 Modula-2 grammar          JAANUS               06/30/89 ) definitions = DefinitionList 'END'                                                   #REG TRANS#  #POST END-BLOCK# /                          'END'  #REG TRANS#  #POST END-BLOCK# .            DefinitionList = definition #REG TRANS# /                                        DefinitionList definition #REG TRANS# .        definition = constants /  DefinitionTypes /                                  variables /                                                     ProcedureHeading #PRE M$# #POST END-BLOCK# .       DefinitionTypes = DType DefTypeList /                                             DType .                                       DType = 'TYPE' .                                                DefTypeList = DefinitionType /                                                DefinitionType DefTypeList .                      DefinitionType = TypeDeclaration ';' /                                           ident ';' #PRE HIDDEN-TYPE TYPE$# . -->        ( #42 Modula-2 grammar          JAANUS               06/30/89 ) ProgModuleHeading = ProgModuleHeading1  #REG TRNAME#                                  #PRE MODTAB$#  #POST SET-IMPL# .          ProgModuleHeading1 = 'MODULE' name priority ';'  #REG TRNAME#                          #PRE IMODULE$#  /                                             'MODULE' name ';'  #REG TRNAME#                                   #PRE IMODULE$#  .                        MainModuleHeading = MainModuleHeading1  #REG TRNAME#                                  #PRE MODTAB$#  #POST SET-MAIN# .          MainModuleHeading1 = 'MODULE' name priority ';'  #REG TRNAME#                          #PRE MMODULE$# /                                              'MODULE' name ';'  #REG TRNAME#                                   #PRE MMODULE$# .                          -->                                                                                                                                                                                            ( #43 Modula-2 grammar          JAANUS               06/30/89 ) ProgramModule = ProgModuleHeading imports Mblock EndIdent /                     ProgModuleHeading8 Mblock EndIdent .            MainModule    = MainModuleHeading imports Mblock EndIdent /                     MainModuleHeading8 Mblock EndIdent .            ProgModuleHeading8 = ProgModuleHeading                                           #REG TRNAME# #PRE M$# #POST NO-IMPORT# .       MainModuleHeading8 = MainModuleHeading                                           #REG TRNAME# #PRE M$# #POST NO-IMPORT# .        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( #44                                                10/15/89 ) CompilationUnit1 = DefinitionModule '.'                                              #REG TRNAME# #PRE NPAIRS$# /                                  'IMPLEMENTATION' ProgramModule '.'                                #REG TRNAME# #PRE NPAIRS$# /                                  MainModule '.'                                                    #REG TRNAME# #PRE NPAIRS$# .               CompilationUnit  = CompilationUnit1                                                  #REG TRANS# #PRE CUNIT$#  #POST ;S# .       -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( #45   cont. to #23                                 10/15/89 ) SetContent = SElementList '}' #PRE CSROOT# # SET9# /                         '}'                  #PRE CSROOT# # SET9# .        SElementList = SElement /                                                      SElementList SeleComma SElement .                SeleComma = ',' .                                               SElement = expression           # SETONE# /                                SSubrange             # SETTWO# .                    SSubrange = expression3 '..' expression   # CRROOT# .           expression3 = expression .                                                                                                       =COMMENT= [(*S*)]                                               =END=                                                                                                                                                                                                                                                          