MODULA-2                                                        Executing-time semanticsemantics: RLIT GLIT PLIT  PASSTAB              01/13/88 ) : RLIT R> DUP @ SWAP 4 + >R ;                                   : GLIT R> DUP @ SWAP 4 + >R ;                                   : PLIT R> DUP @ SWAP 4 + >R ;                                   : rLIT ;                                                        : gLIT ;                                                        : pLIT ;                                                        : ;s ;     ' ;S @ ' ;s !                                                                                                        VARIABLE PASSTAB PASSBUF PASSTAB !                              : GET-PROCADDR ( nr --- addr )                                        1 - 4 *  PASSTAB @ + @ ;                                   -->                                                                                                                                                                                                                                                            \ #2 Semantics: arithmetical commands.               01/13/88 ) ( Relations. [ x y --- mf ] mf - modula-flag:0=FALSE,1=TRUE )   : EQ = ABS ;                                                    : NE <> ABS ;                                                   : LTI < ABS ;                                                   : LTC U< ABS ;                                                  : LEI <= ABS ;                                                   -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \ #3 Semantisc: arithmetical commands,               05/14/90 ) : LEC 2DUP = ROT ROT U< OR ABS ;                                ( Binary arithmetics. [ x y --- z ]  )                          : GTI > ABS ;                                                   : GTC U> ABS ;                                                  : GEI >= ABS ;                                                  : GEC 2DUP = ROT ROT U> OR ABS ;                                : *C UM* DROP ;                                                 : DIVC SWAP 0 ROT UM/MOD SWAP DROP ;                            : MODC SWAP 0 ROT UM/MOD DROP ;                                 ( Set operations. x - operand; s,s1,s2 - sets )                 : DIFFERENCE ( s1 s2 --- s ) NOT AND ;                          : SETSUB ( s1 s2 --- mf ) DUP ROT AND = ABS ;                   : SUBSET ( s1 s2 --- mf ) OVER AND = ABS ;                      : 1SET ( x --- s ) 1 SWAP  <-L ;                                : IN ( x s --- mf ) SWAP 1SET SETSUB ; -->                      \ #4 Semantics: memory handling                      02/14/88 ) VARIABLE PDP                                                    VARIABLE MODBASE                                                VARIABLE DDP                                                    : DHERE DDP @ ;                                                 : DALLOT DDP +! DDP @ PDP @ >                                      IF ." Memory overflow" ABORT THEN ;                          HEX  78000 DUP DDP ! MODBASE ! DECIMAL                          256 CONSTANT PROC#                                              VARIABLE BASETABLE PROC# 4 * ALLOT                              VARIABLE BAAS                                                   DHERE BAAS !       ( ajutine asi )                              : ERASE-BASETABLE ( --- )                                          BASETABLE PROC# 4 * ERASE ;                                  ERASE-BASETABLE                                                 -->                                                             \ #5 Semantics: memory handling                      12/10/90 ) : GET-WORKMEM ( len --- )                                          DALLOT DHERE BAAS @ 16 + ! ;                                 : GET-CONSTADDR ( --- addremantics: procedure environment                12/13/90 ) : GETLOCMEM ( procnr --- procaddr )                                GET-PROCADDR BAAS @ SWAP                                        DHERE BAAS !                                                    DUP 8 + @ GET-WORKMEM     ( allocate local memory )             @ DUP BAAS @ 8 + !        ( save procnumber )                   4 * BASETABLE + DUP @     ( previous base )                     BAAS @ 4 + !              ( for current procedure )             BAAS @ SWAP !             ( new basetable element )             BAAS @ ! ;                ( previous stack element )         : EXEC-BODY ( procnr --- )                                         GET-PROCADDR RP@ BAAS @ 12 + ! 4 + @ EXECUTE ;               : FREELOCMEM ( --- )                                               BAAS @ DUP DDP !                                                DUP 4 + @ OVER 8 + @ 4 * BASETABLE + !                          @ BAAS ! ; -->                                               \ #7 Semantics:                                      12/10/90 ) : FLEXPARMMOV ( addr1 el# fpaddr ellen --- )                       2 PICK 2 PICK 4 + !                                             ROT * DHERE OVER GET-WORKMEM                                    ROT OVER SWAP !                                                 SWAP CMOVE ;                                                 : FLEXCHARMOV ( char fpaddr --- )                                  SWAP DHERE C! DHERE OVER ! 1 SWAP 4 + ! 1 GET-WORKMEM ;      : PARMADDR ( procnr 8+i*4 --- i-parm-addr )                        OVER GET-PROCADDR + @                                           SWAP 4 * BASETABLE + @ + ;                                   : EXIT-FORTH ( --- )                                                0 0 FDOS ;                                                  : 2! ( d addr --- ) SWAP OVER 4 + ! ! ;                         : MIN$ MIN ;                                                    -->                                                             \ #8 Built-in procedures                             05/20/90 ) : *CHR ( x --- char ) 255 AND ;                                 : *ODD ( x --- flag ) 1 AND ;                                   : *CAP ( C1 --- C2 )                                               DUP 96 > OVER 123 < AND IF 32 - THEN ;                       : *INCL ( setvar el --- )                                          1SET OVER @ OR SWAP ! ;                                      : *EXCL ( setvar el --- )                                          1SET NOT OVER @ AND SWAP ! ;                                 : *NEW ( pointaddr len --- )                                       PDP @ SWAP - DUP DHERE >                                        IF DUP PDP ! SWAP !                                             ELSE ." Memory overflow" ABORT THEN ;                        : *DISPOSE ( pointaddr --- )                                       0 SWAP ! ;                                                   -->                                                             \ #9                                                 01/18/90 ) : $RETURN ( --- )                                                  BAAS @ 12 + @ RP! ;                                          HEX                                                             VARIABLE RM.INITFLAG 0 RM.INITFLAG !                            : RM.INIT ( --- )                                                   RM.INITFLAG @ 0=                                                IF MODBASE @ DUP DDP ! BAAS !                                      KONEC PDP ! ST-FFL @ GET-WORKMEM -1 RM.INITFLAG !            THEN ;                                                      DECIMAL                                                          -->                                                                                                                                                                                                                                                                                                                            \ #10 Move commands                                  09/20/91 ) : MOVECHAR ( c var-adr var-len --- )                               DUP 1 = IF DROP                                                        ELSE OVER SWAP BLANK                                                 0 OVER 1+ C!                                               THEN C! ;                                             : MOVESTRN ( val-addr var-addr val-len var-len --- )               2DUP = IF DROP CMOVE                                                   ELSE 2 PICK SWAP BLANK                                               2DUP + >R                                                       CMOVE                                                           0 R> C!                                                    THEN ;                                                ;S                                                                                                                                                                                              