SOURCE$ DBF.MOD IMODULE$ DBF MODTAB$ DBF SET-IMPL M$ DBF NO-IMPORT 0 I/C BENUM 79 I/C BENUM CRROOT RANGE-TAB CHAR ARRAY-TAB TYPE$ A0790C PTRTYPE$ A0790C 0 I/C BENUM 100 I/C BENUM CRROOT RANGE-TAB CHAR ARRAY-TAB TYPE-DUP VAR$ s TYPE-DROP 0 I/C BENUM 3 I/C BENUM CRROOT RANGE-TAB CHAR ARRAY-TAB TYPE-DUP VAR$ ns TYPE-DROP A0790C $POINTER-TO TYPE-DUP VAR$ sp TYPE-DROP BOOLEAN TYPE-DUP VAR$ tf TYPE-DROP PathTail TYPE-DUP VAR$ LEGNAME TYPE-DROP PRTAB$ InclChar 0PNUM! VALUE-SECT CHAR TYPE-DUP VAR$ s INCPNUM&!TAB TYPE-DROP VAR-SECT CHARSET TYPE-DUP VAR$ cset INCPNUM&!TAB TYPE-DROP NOOP ~ BITSET TYPE-DUP VAR$ SetPart TYPE-DROP : &DBF.001 BODY-BEGIN A-STACK-0 SV0 [ cset ] IDENTIFIER M-ARRAY SV0 [ ORD ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ s ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND [ MaxSet ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 13 ] BIN-OP MINDEX -LEVEL RES-CONTEXT REC-CHECK COMPILE-FETCH AGR-ADDR [ SetPart ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN FORTHBEGIN  addr SetPart DUP @                 1 addr s C@ 31 AND <-L OR SWAP !  FORTHEND A-STACK-0 SV0 [ SetPart ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH AGR-ADDR [ cset ] IDENTIFIER M-ARRAY SV0 [ ORD ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ s ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND [ MaxSet ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 13 ] BIN-OP MINDEX -LEVEL RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN BODY-END ; BLBODY$ &DBF.001 END-BLOCK NPAIRS$ InclChar InclChar PRTAB$ EmptyCharSet 0PNUM! VAR-SECT CHARSET TYPE-DUP VAR$ cset INCPNUM&!TAB TYPE-DROP NOOP ~ CARDINAL TYPE-DUP VAR$ i TYPE-DROP : &DBF.002 BODY-BEGIN SV0 [ CSWords ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH LIMITEXP SV0 [ 0 I/C ] CONSTTABLE STARTEXP DO &I [ i ] IDENTIFIER LOOPINDEX ! A-STACK-0 SV0 [ BITSET ] IDENTIFIER RES-CONTEXT REC-CHECK [ CSROOT SET9 ] CONSTTABLE AGR-ADDR [ cset ] IDENTIFIER M-ARRAY SV0 [ i ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH MINDEX -LEVEL RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN LOOP BODY-END ; BLBODY$ &DBF.002 END-BLOCK NPAIRS$ EmptyCharSet EmptyCharSet PRTAB$ Compare 0PNUM! VALUE-SECT CHAR $ARRAY-OF TYPE-DUP VAR$ S1 INCPNUM&!TAB TYPE-DUP VAR$ S2 INCPNUM&!TAB TYPE-DROP INTEGER $FUNCT NOOP ~ CARDINAL TYPE-DUP VAR$ L1 TYPE-DUP VAR$ L2 TYPE-DUP VAR$ L TYPE-DUP VAR$ Index TYPE-DROP : &DBF.003 BODY-BEGIN A-STACK-0 SV0 [ Length ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ S1 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ L1 ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN A-STACK-0 SV0 [ Length ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ S2 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ L2 ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN CASE SV0 [ L1 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ L2 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 3 ] BIN-OP BOOLEAN? => A-STACK-0 SV0 [ L1 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH AGR-ADDR [ L ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN ENDOF A-STACK-0 SV0 [ L2 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH AGR-ADDR [ L ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN ESAC FORTHBEGIN  addr  S1 addr  S2 addr  L @ COMPS   addr  Index !                      FORTHEND CASE SV0 [ Index ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ L ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 3 ] BIN-OP SV+ BOOLEAN? => CASE SV0 [ S1 ] IDENTIFIER M-ARRAY SV0 [ Index ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH MINDEX -LEVEL RES-CONTEXT REC-CHECK COMPILE-FETCH [ S2 ] IDENTIFIER M-ARRAY SV0 [ Index ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH MINDEX -LEVEL RES-CONTEXT REC-CHECK COMPILE-FETCH [ 3 ] BIN-OP BOOLEAN? => SV0 [ 1 I/C ] CONSTTABLE [ 2 ] UN-OP RETURN ENDOF SV0 [ 1 I/C ] CONSTTABLE RETURN ESAC ENDOF SV0 [ L1 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ L2 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 1 ] BIN-OP SV+ BOOLEAN? => SV0 [ 0 I/C ] CONSTTABLE RETURN ENDOF SV0 [ L1 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ L2 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 3 ] BIN-OP SV+ BOOLEAN? => SV0 [ 1 I/C ] CONSTTABLE [ 2 ] UN-OP RETURN ENDOF SV0 [ 1 I/C ] CONSTTABLE RETURN ESAC BODY-END ; BLBODY$ &DBF.003 END-BLOCK NPAIRS$ Compare Compare PRTAB$ Length 0PNUM! VALUE-SECT CHAR $ARRAY-OF TYPE-DUP VAR$ S1 INCPNUM&!TAB TYPE-DROP CARDINAL $FUNCT NOOP ~ CARDINAL TYPE-DUP VAR$ I TYPE-DROP : &DBF.004 BODY-BEGIN A-STACK-0 SV0 [ HIGH ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ S1 ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ I ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN FORTHBEGIN  addr  S1 addr  I @ 1+ 0 SCANS       FORTHEND BODY-END ; BLBODY$ &DBF.004 END-BLOCK NPAIRS$ Length Length PRTAB$ Copy 0PNUM! VAR-SECT CHAR $ARRAY-OF TYPE-DUP VAR$ Ns INCPNUM&!TAB TYPE-DROP VALUE-SECT CHAR $ARRAY-OF TYPE-DUP VAR$ S INCPNUM&!TAB TYPE-DROP NOOP ~ CARDINAL TYPE-DUP VAR$ H TYPE-DUP VAR$ L TYPE-DROP : &DBF.005 BODY-BEGIN A-STACK-0 SV0 [ HIGH ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ Ns ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND [ 1 I/C ] CONSTTABLE [ 9 ] BIN-OP AGR-ADDR [ H ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN A-STACK-0 SV0 [ Length ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ S ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ L ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN CASE SV0 [ L ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ H ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 5 ] BIN-OP BOOLEAN? => A-STACK-0 SV0 [ H ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH AGR-ADDR [ L ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN ENDOF ESAC FORTHBEGIN  addr  S addr  Ns addr  L @ CMOVE  FORTHEND CASE SV0 [ L ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ H ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH [ 3 ] BIN-OP BOOLEAN? => A-STACK-0 SV0 [ CHR ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ 0 I/C ] CONSTTABLE NEXTCOMP AGREND AGR-ADDR [ Ns ] IDENTIFIER M-ARRAY SV0 [ L ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH MINDEX -LEVEL RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN ENDOF ESAC BODY-END ; BLBODY$ &DBF.005 END-BLOCK NPAIRS$ Copy Copy PRTAB$ GetName 0PNUM! VALUE-SECT CHAR $ARRAY-OF TYPE-DUP VAR$ name INCPNUM&!TAB TYPE-DROP VAR-SECT PathStr TYPE-DUP VAR$ fn INCPNUM&!TAB TYPE-DROP NOOP ~ : &DBF.006 BODY-BEGIN [ Copy ] IDENTIFIER RES-CONTEXT REC-CHECK PROCNAME SV0 [ fn ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP SV0 [ name ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP PROCEND A-STACK-0 SV0 [ CHR ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ 0 I/C ] CONSTTABLE NEXTCOMP AGREND AGR-ADDR [ fn ] IDENTIFIER M-ARRAY SV0 [ SIZE ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ fn ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND [ 1 I/C ] CONSTTABLE [ 10 ] BIN-OP MINDEX -LEVEL RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN BODY-END ; BLBODY$ &DBF.006 END-BLOCK NPAIRS$ GetName GetName PRTAB$ InitDBFs NOOP ~ : &DBF.007 BODY-BEGIN FORTHBEGIN  INIT-DBFs   FORTHEND BODY-END ; BLBODY$ &DBF.007 END-BLOCK NPAIRS$ InitDBFs InitDBFs PRTAB$ OpenDBF 0PNUM! VALUE-SECT PathTail TYPE-DUP VAR$ Legend INCPNUM&!TAB TYPE-DROP VALUE-SECT PathStr TYPE-DUP VAR$ FileName INCPNUM&!TAB TYPE-DROP VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ PathStr TYPE-DUP VAR$ fan TYPE-DROP BOOLEAN TYPE-DUP VAR$ t TYPE-DROP CARDINAL TYPE-DUP VAR$ FanLength TYPE-DROP : &DBF.008 BODY-BEGIN [ GetName ] IDENTIFIER RES-CONTEXT REC-CHECK PROCNAME SV0 [ FileName ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP SV0 [ fan ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP PROCEND A-STACK-0 SV0 [ Length ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ fan ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ FanLength ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN A-STACK-0 SV0 [ Legend ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH AGR-ADDR [ LEGNAME ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN FORTHBEGIN  SET-PARA                    addr LEGNAME DEFNAME !      addr fan addr FanLength @   OpenDBFile                  IF 1 ELSE 0 THEN            addr t !                    F+P @ addr FILE !           1 ReWri !                  FORTHEND SV0 [ t ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.008 END-BLOCK NPAIRS$ OpenDBF OpenDBF PRTAB$ OpenByName 0PNUM! VALUE-SECT PathTail TYPE-DUP VAR$ Legend INCPNUM&!TAB TYPE-DROP VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ BOOLEAN TYPE-DUP VAR$ t TYPE-DROP PathTail TYPE-DUP VAR$ Leg TYPE-DROP CARDINAL TYPE-DUP VAR$ LegLength TYPE-DROP : &DBF.009 BODY-BEGIN [ Copy ] IDENTIFIER RES-CONTEXT REC-CHECK PROCNAME SV0 [ Leg ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP SV0 [ Legend ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP PROCEND A-STACK-0 SV0 [ Length ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ Leg ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ LegLength ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN FORTHBEGIN  SET-PARA                            CR ." Faili kirjeldus on "          addr Leg addr LegLength @ TYPE      addr Leg DEFNAME !                  OpenBY-NAME                         IF 1 ELSE 0 THEN                    addr t !                            F+P @ addr FILE !                   1 ReWri !                          FORTHEND SV0 [ t ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.009 END-BLOCK NPAIRS$ OpenByName OpenByName PRTAB$ OpenDBFro 0PNUM! VALUE-SECT PathTail TYPE-DUP VAR$ Legend INCPNUM&!TAB TYPE-DROP VALUE-SECT PathStr TYPE-DUP VAR$ FileName INCPNUM&!TAB TYPE-DROP VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ PathStr TYPE-DUP VAR$ fn TYPE-DROP BOOLEAN TYPE-DUP VAR$ h TYPE-DROP CARDINAL TYPE-DUP VAR$ FnLength TYPE-DROP : &DBF.010 BODY-BEGIN [ GetName ] IDENTIFIER RES-CONTEXT REC-CHECK PROCNAME SV0 [ FileName ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP SV0 [ fn ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP PROCEND A-STACK-0 SV0 [ Length ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ fn ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ FnLength ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN A-STACK-0 SV0 [ Legend ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH AGR-ADDR [ LEGNAME ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN FORTHBEGIN  SET-PARA                    addr LEGNAME DEFNAME !      addr fn addr FnLength @     OpenDBFile                  IF 1 ELSE 0 THEN            addr h !                    F+P @ addr FILE !           0 ReWri !                  FORTHEND SV0 [ h ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.010 END-BLOCK NPAIRS$ OpenDBFro OpenDBFro PRTAB$ OpenByNameRO 0PNUM! VALUE-SECT PathTail TYPE-DUP VAR$ Legend INCPNUM&!TAB TYPE-DROP VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ BOOLEAN TYPE-DUP VAR$ t TYPE-DROP PathTail TYPE-DUP VAR$ Leg TYPE-DROP CARDINAL TYPE-DUP VAR$ LegLength TYPE-DROP : &DBF.011 BODY-BEGIN [ Copy ] IDENTIFIER RES-CONTEXT REC-CHECK PROCNAME SV0 [ Leg ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP SV0 [ Legend ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP PROCEND A-STACK-0 SV0 [ Length ] IDENTIFIER RES-CONTEXT REC-CHECK AGRNAME SV0 [ Leg ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH NEXTCOMP AGREND AGR-ADDR [ LegLength ] IDENTIFIER RES-CONTEXT REC-CHECK RECIPIENT? COMPILE-ASSIGN FORTHBEGIN  SET-PARA                            addr Leg DEFNAME !                  CR ." Faili kirjeldus on "          addr Leg addr LegLength @ TYPE      OpenBY-NAME                         IF 1 ELSE 0 THEN                    addr t !                            F+P @ addr FILE !                   0 ReWri !                          FORTHEND SV0 [ t ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.011 END-BLOCK NPAIRS$ OpenByNameRO OpenByNameRO PRTAB$ GetByKey 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ Rec INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.012 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P !                              SET-IXP                                        addr Rec REC->BUF                              key-GET 0= IF 1 ELSE 0 THEN addr tf !          addr Rec BUF->REC                             FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.012 END-BLOCK NPAIRS$ GetByKey GetByKey PRTAB$ GetByIndex 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ Rec INCPNUM&!TAB TYPE-DROP VALUE-SECT CARDINAL TYPE-DUP VAR$ I INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.013 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P ! SET-IXP    addr I @ GET_RECORD          0= IF 1 ELSE 0 THEN          addr tf !                    addr Rec BUF->REC           FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.013 END-BLOCK NPAIRS$ GetByIndex GetByIndex PRTAB$ GetFirst 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ Rec INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.014 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P ! SET-IXP    F-rECORD                     0= IF 1 ELSE 0 THEN          addr tf !                    addr Rec BUF->REC           FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.014 END-BLOCK NPAIRS$ GetFirst GetFirst PRTAB$ GetLast 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ Rec INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.015 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P !            SET-IXP L-rECORD             0= IF 1 ELSE 0 THEN          addr tf !                    addr Rec BUF->REC           FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.015 END-BLOCK NPAIRS$ GetLast GetLast PRTAB$ GetPrev 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ Rec INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.016 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P !          SET-IXP P-rECORD           0= IF 1 ELSE 0 THEN        addr tf !                  addr Rec BUF->REC         FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.016 END-BLOCK NPAIRS$ GetPrev GetPrev PRTAB$ GetNext 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ Rec INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.017 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P !          SET-IXP N-rECORD           0= IF 1 ELSE 0 THEN        addr tf !                  addr Rec BUF->REC         FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.017 END-BLOCK NPAIRS$ GetNext GetNext PRTAB$ PutRecord 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ Rec INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.018 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P !         ReWri @ 1 =               IF                        addr Rec REC->BUF         SET-IXP WRITE-I-REC       0= IF 1 ELSE 0 THEN       ELSE 0                    THEN                      addr tf !                FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.018 END-BLOCK NPAIRS$ PutRecord PutRecord PRTAB$ CloseDBF 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP BOOLEAN $FUNCT NOOP ~ : &DBF.019 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P !          CLOSE_DBF                  0= IF 1 ELSE 0 THEN        addr tf !                 FORTHEND SV0 [ tf ] IDENTIFIER RES-CONTEXT REC-CHECK COMPILE-FETCH RETURN BODY-END ; BLBODY$ &DBF.019 END-BLOCK NPAIRS$ CloseDBF CloseDBF PRTAB$ SetKeySequence 0PNUM! VAR-SECT WORD TYPE-DUP VAR$ FILE INCPNUM&!TAB TYPE-DROP VALUE-SECT CARDINAL TYPE-DUP VAR$ KeyIndex INCPNUM&!TAB TYPE-DROP NOOP ~ : &DBF.020 BODY-BEGIN FORTHBEGIN  addr FILE @ F+P !                     ReWri @ 0= IF CLOSE-INX THEN          addr KeyIndex @ ?KEYKOMPLEKT DROP     ReWri @ 0= IF OPEN-INX  THEN         FORTHEND BODY-END ; BLBODY$ &DBF.020 END-BLOCK NPAIRS$ SetKeySequence SetKeySequence PRTAB$ MoveRecord 0PNUM! VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ R1 INCPNUM&!TAB TYPE-DUP VAR$ R2 INCPNUM&!TAB TYPE-DROP NOOP ~ : &DBF.021 BODY-BEGIN FORTHBEGIN  addr R1 addr R2 PURELENGTH @ CMOVE   FORTHEND BODY-END ; BLBODY$ &DBF.021 END-BLOCK NPAIRS$ MoveRecord MoveRecord PRTAB$ ClearRecord 0PNUM! VAR-SECT WORD $ARRAY-OF TYPE-DUP VAR$ R INCPNUM&!TAB TYPE-DROP NOOP ~ : &DBF.022 BODY-BEGIN FORTHBEGIN  addr R PURELENGTH @ ERASE   FORTHEND BODY-END ; BLBODY$ &DBF.022 END-BLOCK NPAIRS$ ClearRecord ClearRecord PRTAB$ MBase NOOP ~ : &DBF.023 BODY-BEGIN FORTHBEGIN  D2Base  FORTHEND BODY-END ; BLBODY$ &DBF.023 END-BLOCK NPAIRS$ MBase MBase BLBODY$ ~ END-BLOCK NPAIRS$ DBF DBF CUNIT$ DBF ;S NOSOURCE   