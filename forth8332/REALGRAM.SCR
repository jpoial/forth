nime=RECORD                                                Eesnimi,Nimi:CHAR;                                              CASE Mees: BOOLEAN OF                                             TRUE: Aukraad: CARDINAL |                                       FALSE: Neiuna: CHAR;                                          END;                                                            Ident: CARDINAL;                                                Synd: CARDINAL;                                                 CASE Seis: PERESEIS OF                                              VALLALINE: |                                                    ABIELUS: Abikaasa: CARDINAL;                                             Lapsi: CARDINAL;                                                Pulm: DATE;                                        END; END; END INIMENE .                                                                                                        MODULE SIEVE;                                                   VAR I,J,K,L,N: INTEGER;                                         FLAGS:ARRAY [0..8190] OF INTEGER;                               BEGIN                                                              FOR I:=0 TO 8190 DO FLAGS[I]:=1 END;                            N:=0;                                                           FOR I:=0 TO 8190                                                DO IF FLAGS[I]=1                                                   THEN K:=2*I+3; L:=K+I;                                               WHILE L<=8190                                                   DO FLAGS[L]:=0; L:=L+K                                          END; N:=N+1                                                END                                                          END                                                          END SIEVE .                                                                                                                     MODULE INIMENE;                                                 TYPE Inime=RECORD                                                CASE Mees: BOOLEAN OF                                             TRUE: Aukraad: CARDINAL |                                       FALSE: Neiuna: CHAR;                                          END;                                                           END; END INIMENE.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               DEFINITION MODULE  INOUT;                                           PROCEDURE OPENINPUT ( DEFEXT: ARRAY OF CHAR );                  PROCEDURE OPENOUTPUT ( DEFEXT: ARRAY OF CHAR );                 PROCEDURE CLOSEINPUT;  PROCEDURE CLOSEOUTPUT;                   PROCEDURE READ ( VAR CH: CHAR );                                PROCEDURE READSTRING ( VAR S: ARRAY OF CHAR );                  PROCEDURE READINT ( VAR X: INTEGER );                           PROCEDURE READCARD ( VAR X: CARDINAL );                         PROCEDURE WRITE ( CH: CHAR );                                   PROCEDURE WRITELN;                                              PROCEDURE WRITESTRING ( S: ARRAY OF CHAR );                     PROCEDURE WRITEINT ( X: INTEGER; N: CARDINAL );                 PROCEDURE WRITECARD ( X, N: CARDINAL );                         PROCEDURE WRITEOCT ( X, N: CARDINAL );                          PROCEDURE WRITEHEX ( X, N: CARDINAL );                      END INOUT.                                                      ( #7 Modula-2 grammar           JAANUS               06/30/89 ) =DEF= CompilationUnit                                           number = integer  # I/C#  /                                              real .                                                 integer = [C] /                                                           [O]  #PRE OCT$# /                                               [H]  #PRE HEX$# .                                     real = [D]  #PRE REAL$# .                                       string = ['S']  #PRE STR'# #POST '# /                                    ["S"]  #PRE STR"# #POST "# /                                     [A]   #PRE OCT$# #POST $CHAR# .                       ConstantDeclaration = ConstIdent ConstExpression  .             ConstIdent = ident '='  .                                       ident = [I] . -->                                                                                                                                                                               ( #8 Modula-2 grammar           MATI                 06/30/89 ) ConstExpression = ConstSimple /                                                   ConstSimple Crelation ConstSimple                                     .                                       Crelation = '='   /                                                         '<>'  / '#' /                                                   '<'   /                                                         '<='  /                                                         '>'   /                                                         '>='  /                                                         'IN'  .                                             ConstSimple = ConstSimple1 /                                                  CplusMinus ConstSimple1 .                         CplusMinus = '+' /                                                           '-' .                                              ConstSimple1 = ConstTermList .  -->                             ( #9 Modula-2 grammar           MATI                 06/30/89 ) ConstTermList = ConstTerm /                                                     ConstTermList CaddOperator ConstTerm                             .                                              CaddOperator = '+' /  '-' /                                                    'OR' .                                           ConstTerm = ConstTerm1 .                                        ConstTerm1 = ConstFactor /                                                   ConstTerm1 CmultOperator ConstFactor                              .                                                CmultOperator = '*' /                                                           '/' /                                                           'DIV' /                                                         'MOD' /                                                         'AND' /                                                         '&' . -->                                       ( #10 Modula-2 grammar          MATI                 06/30/89 ) ConstFactor = number / string / ConstSet /                                    qualident /                                                     LP ConstExpression2RP /                                         'NOT' ConstFactor /                                             '~' ConstFactor /                                               qualidentLP ConstArgumentsRP .                    ConstArgumentsRP = ConstArguments ')' .                         ConstArguments = ConstExpression /                                               ConstArguments CAscomma ConstExpression1 .     CAscomma = ',' .                                                ConstExpression1 = ConstExpression .                            ConstExpression2RP = ConstExpression2 ')' .                     LP = '(' .                                                      ConstSet = ConstSetOpen ConstSetContent .                       ConstSetOpen = qualident '{' / '{' . -->                        ( #11 Modula-2 grammar          MATI                 06/30/89 ) ConstSetContent = ConstElementList '}' /                                          '}'                  .                        ConstElementList = ConstElement /                                                  ConstElementList CeleComma ConstElement .    CeleComma = ',' .                                               ConstElement = ConstExpression         /                                       ConstSubrange           .                        ConstSubrange = ConstExpression3 '..' ConstExpression                                                  .                        ConstExpression2 = ConstExpression .                            ConstExpression3 = ConstExpression .                            qualidentLP = qualident '(' .                                    -->                                                                                                                                                                                            ( #12 Modula-2 grammar          JAANUS               06/30/89 ) TypeDeclaration = TypeIdent type  .                             TypeIdent = ident '='  .                                        type = SimpleType /                                                    ArrayType /                                                     RecordType /                                                    SetType /                                                       PointerType /                                                   ProcedureType .                                          SimpleType = TypeName /                                                      enumeration /                                                   SubrangeType .                                     TypeName = qualident .                                           -->                                                                                                                                                                                            ( #13 Modula-2 grammar          JAANUS               06/30/89 ) enumeration = ILP ValueList ')' .                               ILP = '(' .                                                     ValueList = ValueList1 .                                        ValueList1 = Enuid /                                                         ValueList1 Enucomma Enuid1 .                       Enucomma = ',' .                                                Enuid1 = Enuid .                                                Enuid = id .                                                    id = [I] .                                                      SubrangeType = TypeName TBracket ConstSubrange1 ']'                              /                                                             TBracket ConstSubrange1 ']' .                    TBracket = '[' .                                                ConstSubrange1 = ConstSubrange .                                 -->                                                            ( #14 Modula-2 grammar          JAANUS               06/30/89 ) ArrayType = 'ARRAY' ArraySpec .                                 ArraySpec = Onedim /                                                        SimpleType1 Arrcomma ArraySpec  .                   Arrcomma = ',' .                                                Onedim  = SimpleType1of  type  .                                SimpleType1of = SimpleType1 'OF' .                              SimpleType1 = SimpleType .                                      VariableDeclaration = VariableNames1 type                                             .                                         VariableNames1 = VariableNames ':' .                            VariableNames = varid /                                                         VariableNames Varicomma varid .                 Varicomma = ',' .                                               varid = [I]  .                                                   -->                                                            ( #15 Modula-2 grammar                               08/06/89 ) RecordType = 'RECORD' RecordStructure 'END' /                                'RECORD' 'END' .                                   RecordStructure = FieldListSequence                                          .                                                  FieldListSequence = FieldList /                                                     FieldListSequenceSemi FieldList /                               FieldListSequenceSemi .                     FieldListSequenceSemi = FieldListSequence ';' /                                         ';' .                                   FieldList = FixedFields /                                                   VariantFields .                                     FixedFields = FieldNames1 type                                   .                                                              FieldNames1 = FieldNames ':' .                                  -->                                                             ( #16 Modula-2 grammar                               08/06/89 ) FieldNames = elid /                                                          FieldNames Fieldcomma elid .                       Fieldcomma = ',' .                                              elid = [I]   .                                                  VariantFields = RecordCaseHead VariantList 'END' /                              RecordCaseHead 'END' .                          RecordCaseHead = RecordCase TagField 'OF' .                     RecordCase = 'CASE' .                                           TagField = fident1 NamedType /                                             Colon NamedType .                                    fident1 = fident ':' .                                          Colon = ':' .                                                   NamedType = TypeName .                                          fident = [I]  .                                                  -->                                                            ( #17 Modula-2 grammar                               08/06/89 ) VariantList = variants /                                                      variants ElseVariant /                                          ElseVariant .                                     variants = variant /                                                       variants '|' variant /                                          variants '|' /                                                  '|'  /                                                          '|' variant .                                        variant = RecordCaseLabels1 VariantStructure                                  /                                                           RecordCaseLabels ':' .                                RecordCaseLabels1 = RecordCaseLabels ':' .                       -->                                                                                                                                                                                            ( #18 Modula-2 grammar                               08/06/89 ) RecordCaseLabels = CaseLabelList  .                             CaseLabelList = CaseLabels                           /                          CaseLabelList Casecomma CaseLabels         .    Casecomma = ',' .                                               CaseLabels = CaseLabel            .                             CaseLabel  = ConstExpression                         /                       ConstSubrange                           .          VariantStructure = FieldListSequence                                                .                                           ElseVariant = RecordElse VariantStructure /                                   RecordElse .                                      RecordElse = 'ELSE' .                                            -->                                                                                                                                                                                            ( #19 Modula-2 grammar    AJUTISELT VALE !!!!!!!     06/30/89 ) ProcedureType = 'PROCEDURE' FormalTypeList                                         /                                                            'PROCEDURE' .                                   FormalTypeList = LP FormalParTypes RP FunctionType1 /                            LP FormalParTypes RP /                                          '(' RP FunctionType1 /                                          '(' RP .                                       FormalParTypes = FormalParTypes1 .                              FormalParTypes1 = FormalParType /                                                 FormalParTypes1 Forparcomma FormalParType .   Forparcomma = ',' .                                             FormalParType = FVar FormalType /                                               FormalType .                                    FunctionType1 = Colon NamedType .                               FunctionType  = Colon NamedType . -->                           ( #20 Modula-2 grammar                               10/05/89 ) RP = ')' .                                                      FVar = 'VAR' .                                                  SetType = SetHead type .                                        SetHead = 'SET' 'OF' .                                          PointerType = 'POINTER' 'TO' Ptrtype .                          Ptrtype = Ptypeid  /                                                      ArrayType / PointerType / ProcedureType /                       RecordType .                                          Ptypeid = qid .                                                 designator = designator1 .                                      designator1 = [I]  /                                                          designator1 FNDot fname /                                       designator1 ABracket ExpList ']' /                              designator1 '^' .                                  -->                                                            ( #21 Modula-2 grammar                               10/05/89 ) FNDot = '.' .                                                   fname = [I]                                                     .                                                               ABracket = '[' .                                                ExpList = expressions .                                         relation = '=' / '<>' / '#' /                                              '<' / '<=' / '>' /                                              '>=' / 'IN' .                                        PlusMinus = '+' / '-' .                                         AddOperator = '+' / '-' / 'OR' .                                MultOperator = '*' / '/' / 'DIV'                                    / 'MOD' / 'AND' / '&' .                                      -->                                                                                                                                                                                            ( #22 Modula-2 grammar                               10/05/89 ) expressions = expression /                                                    expressions EXComma expression1 .                 EXComma = ',' .                                                 expression1 = expression .                                      expression = expression2 .                                      expression2 = SimpleExpression /                                             SimpleExpression relation SimpleExpression                        .                                                SimpleExpression = SimpleExpression1 /                                             PlusMinus SimpleExpression1                                 .                                                SimpleExpression1 = TermList .                                  TermList = term /                                                          TermList AddOperator term .                          term = term1 . -->                                              ( #23 Modula-2 grammar                               11/15/90 ) term1 = factor /                                                        term1 MultOperator factor .                             factor = number  /                                                       Exstring  /                                                     set       /                                                     designator /                                                    designator ActualParameters  /                                  LPExpression ')'  /                                             'NOT' factor  /                                                 '~' factor  .                                          set = SetOpen ConstSetContent1 .                                ConstSetContent1 = ConstSetContent  .                           Exstring = string .                                              -->                                                                                                                            ( #24 Modula-2 grammar                               11/15/90 ) SetOpen = designator '{' /                                                '{'                                                        .                                                          ActualParameters = PLP ParmList ')' /                                              '(' RP           .                           PLP = '(' .                                                     ParmList = parms .                                              parms = parm   /                                                        parms Parmcomma parm1    .                              Parmcomma = ',' .                                               parm1 = parm   .                                                parm = expression .                                             LPExpression = ELP expression2 .                                ELP = '(' .                                                      -->                                                            ( #25 Modula-2 grammar          MATI                 06/30/89 ) statement = assignment /                                                    ProcedureCall /                                                 IfStatement    /                                                CaseStatement /                                                 WhileStatement /                                                RepeatStatement /                                               LoopStatement /                                                 ForStatement /                                                  WithStatement /                                                 'EXIT' /                                                        ReturnStatement .                                    -->                                                                                                                                                                                                                                                            ( #26 Modula-2 grammar          MATI                 10/05/89 ) assignment = LeftPart ':=' RightPart                                           .                                                LeftPart = designator   .                                       RightPart = expression .                                                                                                        qualident = qid  /                                                          qprefix QIDot qid .                                 QIDot = '.' .                                                   qid = [I] .                                                     qprefix = modid / qprefix QIDot modid .                         modid = [I]  . -->                                                                                                                                                                                                                                                                                                              ( #27 Modula-2 grammar          MATI                 11/15/90 ) ProcedureCall = designator ProcParameters  /                                    designator  .                                   ProcParameters = PLP ParmList ')' .                             StatementSequence = StatementList .                             StatementList = statement /                                                     StatementListSemi statement /                                   StatementListSemi .                             StatementListSemi = StatementList ';' /                                             ';' .                                       IfStatement = IfThen ElsifPart else 'END' /                                   IfThen ElsifPart 'END' /                                        IfThen else 'END' /                                             IfThen 'END' .                                    IfThen = 'IF' Bexpression Then StatementSequence  /                      'IF' Bexpression Then  . -->                           ( #28 Modula-2 grammar          MATI                 06/30/89 ) ElsifPart = ElsifList .                                         ElsifList = ElsifThen /                                                     ElsifList ElsifThen .                               ElsifThen = 'ELSIF' Bexpression Then StatementSequence                        /                                                             'ELSIF' Bexpression Then  .                         Then = 'THEN'  .                                                else = StatElse StatementSequence /                                    StatElse .                                               StatElse = 'ELSE' .                                             -->                                                                                                                                                                                                                                                                                                                             ( #29 Modula-2 grammar          MATI                 06/30/89 ) CaseStatement = CaseStatHead CaseList     .                     CaseStatHead = StatCase expression 'OF'   .                     StatCase = 'CASE'                         .                     CaseList = cases else 'END' /                                              cases 'END' /                                                   'END' /                                                         else 'END' .                                         cases = case /                                                          cases '|' case /                                                cases '|' /                                                     '|' case /                                                      '|' .                                                   -->                                                                                                                                                                                             ( #30 Modula-2 grammar          MATI                 11/24/89 ) case = StatCaseLabelsK  StatementSequence                                                      /                                StatCaseLabelsK                                                                                .                                StatCaseLabelsK = StatCaseLabels ':' .                          StatCaseLabels = CaseLabelListC    .                            CaseLabelListC = CaseLabelsC                                /                   CaseLabelListC CCComma CaseLabelsC  .           CCComma = ',' .                                                 CaseLabelsC = CaseLabelC        .                               CaseLabelC = ConstExpression  /                                              ConstSubrange    .                                 -->                                                                                                                                                                                             ( #31 Modula-2 grammar          MATI                 06/30/89 ) WhileHead = 'WHILE' Bexpression .                               WhileStatement = WhileHead DoStatements 'END'  .                DoStatements = 'DO' StatementSequence /                                        'DO' .                                           RepeatStatement = 'REPEAT' StatementSequence 'UNTIL'                                Bexpression  /                                                'REPEAT' 'UNTIL' Bexpression                                      .                                           Bexpression = expression    .                                   ForStatement = ForHead DoStatements 'END'  /                                   ForHead step DoStatements 'END'                                   .                                              ForHead = 'FOR' initial limit                                               .                                                    -->                                                            ( #32 Modula-2 grammar          MATI                 06/30/89 ) initial = Fident ':=' StartExpression   .                       Fident = ident    .                                             StartExpression = expression  .                                 limit = 'TO' expression  .                                      step = 'BY' ConstExpression  .                                  LoopStatement = LoopStatementList 'END'                                           .                                             LoopStatementList = 'LOOP' StatementSequence /                                      'LOOP' .                                    WithStatement = WithHead DoStatements 'END'                                                   .                                 WithHead = 'WITH' designator                                                                  .                                 ReturnStatement = 'RETURN' expression  /                                          'RETURN'  .             -->                   ( #33 Modula-2 grammar    AJUTISELT VALE !!!!!       06/30/89 ) BeginStatements = 'BEGIN' StatementSequence                                         /                                                             'BEGIN'  .                                    ProcedureDeclaration = ProcedureBegin Pblock EndIdent /                                ProcedureBegin 'FORWARD' .               ProcedureBegin = ProcedureHeading .                             ProcedureHeading = 'PROCEDURE' name FormalParameters ';' /                         'PROCEDURE' name ';'                                             .                                           name = [I] .                                                    EndIdent = [I] .                                                Mblock = block .                                                Pblock = block .                                                 -->                                                                                                                            ( #34 Modula-2 grammar          JAANUS               06/30/89 ) block = declarations BeginStatements 'END'                                  /                                                           BeginStatements 'END'                                               /                                                           declarations BlockEnd                                               /                                                           BlockEnd                                                            .                                                   BlockEnd = 'END' .                                              declarations = declaration  /                                                  declarations declaration  .                      declaration = constants /   types /                                           variables /                                                     ProcedureDeclaration ';' /                                      ModuleDeclaration ';' .  -->                      ( #35 Modula-2 grammar          JAANUS               06/30/89 ) constants = 'CONST' ConstantList /                                          'CONST' .                                           ConstantList = ConstantList1 .                                  ConstantList1 = DeclareConstant /                                              ConstantList1 DeclareConstant .                  DeclareConstant = ConstantDeclaration ';' .                     types = BType TypeList /   BType .                              BType = 'TYPE' .                                                TypeList = DeclareType / DeclareType TypeList .                 DeclareType = TypeDeclaration ';' .                             variables = BVar VariableList /   BVar .                        BVar = 'VAR' .                                                  VariableList = DeclareVariable / DeclareVariable VariableList . DeclareVariable = VariableDeclaration ';' .                      -->                                                            ( #36 Modula-2 grammar                               06/30/89 ) FormalParameters = FLP FPSectionList RP FunctionType                                     /                                                         FLP FPSectionList RP /                                          '(' RP FunctionType                                                   /                                                         '(' RP .                                     FPSectionList = FPSectionsodula-2 grammar                               06/30/89 ) FPSections = FPSection /                                                     FPSectionsSemi FPSection .                         FPSectionsSemi = FPSections ';' .                               FPSection = FVar section /                                                  section .                                           section = ParamNames1 FormalType                                             .                                                  ParamNames = Pnid /                                                          ParamNames PNComma Pnid .                          PNComma = ',' .                                                 ParamNames1 = ParamNames ':' .                                  Pnid = id .                                                     FormalType = FormalArray NamedType /                                         TypeName .                                         FormalArray = 'ARRAY' 'OF' . -->                                ( #38 Modula-2 grammar          JAANUS               06/30/89 ) ModuleDeclaration = MheadImport export1 Mblock EndIdent /                           ModuleHeading export1 Mblock EndIdent /                         ModuleHeading Mblock EndIdent          /                        MheadImport Mblock EndIdent            .    MheadImport = ModuleHeading ImportList1 ;                       ModuleHeading = 'MODULE' name priority ';'                  /                   'MODULE' name ';'                            .  priority = PBracket PriorNumber ']' .                           PBracket = '[' . -->                                                                                                                                                                                                                                                                                                                                                                                                                                            ( #39 Modula-2 grammar          JAANUS               06/30/89 ) PriorNumber = integer  .                                        ImportList1 = ImportList .                                      export1 = export .                                              export = export2 .                                              ImportList = ImportList2 .                                      ImportList2 = import ';' /                                                    ImportList2 import ';' .                          import = source 'IMPORT' ImportNames  /                                  'IMPORT' ImportNames .                                 source = 'FROM' [I]  .                                          ImportNames = ImportNames1 .                                    ImportNames1 = id4 /                                                           ImportNames1 Impcomma id4 .                      Impcomma = ',' .                                                id4 = id  . -->                                                 ( #40 Modula-2 grammar          JAANUS               06/30/89 ) export2 = 'EXPORT' 'QUALIFIED' ExportNames                             / 'EXPORT' ExportNames .                                 ExportNames = ExportNames1 ';' .                                ExportNames1 = id5 / ExportNames1 EpComma id5 .                 EpComma = ',' .                                                 id5 = id  .                                                     DefinitionModule = DefModuleHead imports definitions EndIdent /                    DefModuleHead8 definitions EndIdent .        DefModuleHead8 = DefModuleHead                                                   #REG TRNAME# #PRE M$# #POST NO-IMPORT# .       DefModuleHead = DefModuleHead1                                                    #REG TRNAME#  #PRE MODTAB$#  #POST SET-DEF# . DefModuleHead1 = 'DEFINITION' 'MODULE' name ';'                                   #REG TRNAME# #PRE DMODULE$# .                 imports = ImportList  #REG TRANS# . -->                         ( #41 Modula-2 grammar          JAANUS               06/30/89 ) definitions = DefinitionList 'END'                                                   /                                                        'END'  .                                          DefinitionList = definition /                                                    DefinitionList definition .                    definition = constants /  DefinitionTypes /                                  variables /                                                     ProcedureHeading .                                 DefinitionTypes = DType DefTypeList /                                             DType .                                       DType = 'TYPE' .                                                DefTypeList = DefinitionType /                                                DefinitionType DefTypeList .                      DefinitionType = TypeDeclaration ';' /                                           ident ';' . -->                                ( #42 Modula-2 grammar          JAANUS               06/30/89 ) ProgModuleHeading = ProgModuleHeading1  #REG TRNAME#                                  #PRE MODTAB$#  #POST SET-IMPL# .          ProgModuleHeading1 = 'MODULE' name priority ';'  #REG TRNAME#                          #PRE IMODULE$#  /                                             'MODULE' name ';'  #REG TRNAME#                                   #PRE IMODULE$#  .                        MainModuleHeading = MainModuleHeading1  #REG TRNAME#                                  #PRE MODTAB$#  #POST SET-MAIN# .          MainModuleHeading1 = 'MODULE' name priority ';'  #REG TRNAME#                          #PRE MMODULE$# /                                              'MODULE' name ';'  #REG TRNAME#                                   #PRE MMODULE$# .                          -->                                                                                                                                                                                            ( #43 Modula-2 grammar          JAANUS               06/30/89 ) ProgramModule = ProgModuleHeading imports Mblock EndIdent /                     ProgModuleHeading8 Mblock EndIdent .            MainModule    = MainModuleHeading imports Mblock EndIdent /                     MainModuleHeading8 Mblock EndIdent .            ProgModuleHeading8 = ProgModuleHeading                                           #REG TRNAME# #PRE M$# #POST NO-IMPORT# .       MainModuleHeading8 = MainModuleHeading                                           #REG TRNAME# #PRE M$# #POST NO-IMPORT# .        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( #44                                                10/15/89 ) CompilationUnit1 = DefinitionModule '.'                                              #REG TRNAME# #PRE NPAIRS$# /                                  'IMPLEMENTATION' ProgramModule '.'                                #REG TRNAME# #PRE NPAIRS$# /                                  MainModule '.'                                                    #REG TRNAME# #PRE NPAIRS$# .               CompilationUnit  = CompilationUnit