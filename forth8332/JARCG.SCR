grammar              Const                       03/06/91 ) =DEF= SourceFile                                                =TOKEN=                                                         [TYPEID]                                                        [CL] [OL] [HL]                                                  [CU] [OU] [HU]                                                  [CUL] [OUL] [HUL]                                               [F] [DL]                                                        =COMMENT= [/*S*/]                                               Const = NumConst /                                                      CharConst /                                                     StringConst .                                           -->                                                                                                                                                                                                                                                             ( C-grammar              Const                       03/06/91 ) NumConst = IntConst /                                                      DoubleConst .                                        IntConst = [C] /      ( decimal )                                          [O] /      ( octal )                                            [H] /      ( hex )                                              [CL] / [OL] / [HL] /   ( long )                                 [CU] / [OU] / [HU] /   ( unsigned )                             [CUL] / [OUL] / [HUL] . ( long unsigned )            DoubleConst = [D] / [DL] /                                                    [F] .   ( floatconst is double ! )                CharConst = ['S']  #PRE STR'# #POST '# .                                      ( special treatment of \ )                        StringConst = StCList .                                         StC = ["S"]  #PRE STR"# #POST "# .                               -->                                                            ( C-grammar     Ident  PrimitiveType  Type           03/06/91 ) StCList = StC /                                                           StCList StC .                                         Ident = [I] .                                                   PrimitiveType = 'int' / 'char' /                                                'short' / 'long' / 'unsigned' / 'signed' /                      'float' / 'double' /                                            'void' /                                                        'const' / 'volatile' /                                          'near' / 'far' / 'huge' .                       Type = TypeNames /                                                     RecordType /                                                    UnionType /                                                     EnumType .                                                -->                                                                                                                            ( C-grammar                  MemClass                03/06/91 ) TypeNames = TypeName /                                                      TypeNamesA TypeName .                               TypeNamesA = TypeNames .                                        TypeName = PrimitiveType /                                                 [TYPEID] .                                           MemClass = 'auto' /                                                        'static' /                                                      'pascal' / 'asm' / ( 'fortran' / ) 'cdecl' /                    'extern' / ( 'entry' / ) 'interrupt' /                          'register' .                                         Descriptors = DescriptorList .                                  DescriptorList = IniDescriptor /                                                 DescriptorListCM IniDescriptor .               DescriptorListCM = DescriptorList ',' .                          -->                                                            ( C-grammar  IniDescriptor  IniValue                 03/06/91 ) IniDescriptor = SimpDescriptor /                                                SimpDescriptorEQ IniValue .                     SimpDescriptor = Descriptor .                                   SimpDescriptorEQ = SimpDescriptor '=' .                         IniValue = ConstExp /                                                      InLP '}' /                                                      InLP IniList '}' .                                   InLP = '{' .                                                    IniList = IniElList /                                                     IniElList CommaList1 /                                          CommaList .                                           IniElList = IniValue /                                                      IniElList CoLiInVal .                               CoLiInVal = CommaList IniValue .  -->                                                                                           ( C-grammar    Descriptor                            03/06/91 ) CommaList1 = CommaList .                                        CommaList = ',' /                                                           CommaList ',' .                                     Descriptor = Descriptor1 /                                                   AST Descriptor .                                   Descriptor1 = Descriptor2 /                                                   Descriptor1LP DFormParmListRP /                                 Descriptor1LP ')' /                                             Descriptor1ALP ConstExp ']' /                                   Descriptor1ALP ']' .                              AST = '*' /                                                           Aster 'const' .                                           Aster = '*' .                                                   Descriptor1ALP = Descriptor1A '[' .                             Descriptor1A = Descriptor1 .  -->                               ( C-grammar     DFormParmList                        03/06/91 ) Descriptor2 = DIdent /                                                        LPDescriptor ')' .                                DIdent = Ident .                                                LPDescriptor = LP1 Descriptor .                                 LP1 = '(' .                                                     Descriptor1LP = Descriptor1A '(' .                              DFormParmListRP = DFormParmList ')' .                           DFormParmList = DFormParm /                                                     DFormParmListCM DFormParm .                     DFormParmListCM = DFormParmList ',' .                           DFormParm = Descriptor / TSCont / TSContB DFPName /                         TypeSpec / '...' .                                  TSContB = TSCont .                                              DFPName = Ident .                                                -->                                                            ( C-grammar    RecordType                            03/06/91 ) RecordType = StrIdent /                                                      'struct' RecStruct /                                            StrIdent RecStruct .                               StrIdent = 'struct' Ident .                                     RecStruct = RecLP '}' /                                                     RecLP RecContRP .                                   RecLP = '{' .                                                   RecContRP = RecCont '}' .                                       RecCont = RFDeclaration /                                                 RecCont RFDeclaration .                                -->                                                                                                                                                                                                                                                                                                                            ( C-grammar    RecordType                            03/06/91 ) RFDeclaration = RFType1 RFDescriptors ';' /                                     RFType1 ';' /                                                   RFTypeDef .                                     RFType1 = RFType .                                              RFType = Type .                                                 RFDescriptors = RFDescriptorList .                              RFDescriptorList = RFIniDescriptor /                                               RFDescriptorListCM RFIniDescriptor .         RFDescriptorListCM = RFDescriptorList ',' .                      -->                                                                                                                                                                                                                                                                                                                                                                                            ( C-grammar    RecordType                            03/06/91 ) RFIniDescriptor = RFSimpDescriptor /                                              RFSimpDescriptorEQ RFIniValue .               RFSimpDescriptor = RFDescriptor .                               RFSimpDescriptorEQ = RFSimpDescriptor '=' .                     RFIniValue = IniValue .                                         RFTypeDef = TypeDefgrammar    RecordType                            03/06/91 ) RFDescriptor = RFDescriptor1 /                                                 RFAST RFDescriptor .                             RFAST = '*' /                                                           RFAster 'const' .                                       RFAster = '*' .                                                 RFDescriptor1 = RFDescriptor2 /                                                 RFDescriptor1LP DFormParmListRP /                               RFDescriptor1LP ')' /                                           RFDescriptor1ALP ConstExp ']' /                                 RFDescriptor1ALP ']' .                          RFDescriptor2 = RFDIdent /                                                      RFLPDescriptor ')' /                                            RFDIdentCO IntConst /                                           RFEmptyCO IntConst .                            RFDescriptor1ALP = RFDescriptor1 '[' . -->                      ( C-grammar    RecordType                            03/06/91 ) RFDIdentCO = RFDIdent ':' .                                     RFEmptyCO = ':' .                                               RFDIdent = Ident .                                              RFLPDescriptor = RFLP1 RFDescriptor .                           RFLP1 = '(' .                                                   RFDescriptor1LP = RFDescriptorgrammargrammar    UnionType                             03/06/91 ) UnionType = UniIdent /                                                      'union' UniStruct /                                             UniIdent UniStruct .                                UniIdent = 'union' Ident .                                      UniStruct = UniLP '}' /                                                     UniLP UniContRP .                                   UniLP = '{' .                                                   UniContRP = UniCont '}' .                                       UniCont = UFDeclaration /                                                 UniCont UFDeclaration .                                -->                                                                                                                                                                                                                                                                                                                            ( C-grammar    UnionType                             03/06/91 ) UFDeclaration = UFType1 UFDescriptors ';' /                                     UFType1 ';' /                                                   UFTypeDef .                                     UFType1 = UFType .                                              UFType = Type .                                                 UFDescriptors = UFDescriptorList .                              UFDescriptorList = UFIniDescriptor /                                               UFDescriptorListCM UFIniDescriptor .         UFDescriptorListCM = UFDescriptorList ',' .                      -->                                                                                                                                                                                                                                                                                                                                                                                            ( C-grammar    UnionType                             03/06/91 ) UFIniDescriptor = UFSimpDescriptor /                                              UFSimpDescriptorEQ UFIniValue .               UFSimpDescriptor = UFDescriptor .                               UFSimpDescriptorEQ = UFSimpDescriptor '=' .                     UFIniValue = IniValue .                                         UFTypeDef = TypeDefgrammar    UnionType                             03/06/91 ) UFDescriptor = UFDescriptor1 /                                                 UFAST UFDescriptor .                             UFAST = '*' /                                                           UFAster 'const' .                                       UFAster = '*' .                                                 UFDescriptor1 = UFDescriptor2 /                                                 UFDescriptor1LP DFormParmListRP /                               UFDescriptor1LP ')' /                                           UFDescriptor1ALP ConstExp ']' /                                 UFDescriptor1ALP ']' .                          UFDescriptor2 = UFDIdent /                                                      UFLPDescriptor ')' /                                            UFDIdentCO IntConst /                                           UFEmptyCO IntConst .                            UFDescriptor1ALP = UFDescriptor1 '[' . -->                      ( C-grammar    UnionType                             03/06/91 ) UFDIdentCO = UFDIdent ':' .                                     UFEmptyCO = ':' .                                               UFDIdent = Ident .                                              UFLPDescriptor = UFLP1 UFDescriptor .                           UFLP1 = '(' .                                                   UFDescriptor1LP = UFDescriptorgrammargrammar        EnumType                          03/06/91 ) EnumType = EnumIdent /                                                     'enum' EnumStruct /                                             EnumIdent EnumStruct .                               EnumIdent = 'enum' Ident .                                      EnumStruct = EnumLP '}' /                                                    EnumLP EnumContRP .                                EnumLP = '{' .                                                  EnumContRP = EnumCont '}' .                                     EnumCont = EnumSpec /                                                      EnumContCM EnumSpec .                                EnumContCM = EnumCont ',' .                                     EnumSpec = EIdent /                                                        EIdentEQ ConstExp .                                  EIdentEQ = EIdent '=' .                                         EIdent = Ident .  -->                                           ( C-grammar          Expression                      03/06/91 ) Expression = Exp /        ( pure expression )                                CommaExp .   ( comma operation ! )                 CommaExp = ExpsCM Exp #POST COMMA-OP# .                         Exps = Exp /                                                           ExpsCM Exp #POST COMMA-OP# .                             ExpsCM = Exps ',' .                                             Exp = Exp1 /                                                          Exp1AssOp Exp #PERM 2 1 # .                               Exp1AssOp = Exp1A AssOp .                                       Exp1A = Exp1 .                                                  AssOp = '=' # =STORE# / '+=' # +=STORE# / '-=' # -=STORE# /             '*=' # *=STORE# / '/=' # /=STORE# / '%=' # %=STORE# /           '>>=' # >>=STORE# / '<<=' # <<=STORE# /                         '&=' # &=STORE# / '|=' # |=STORE# / '^=' # ^=STORE# .    -->                                                            ( C-grammar      Expression                          03/06/91 ) Exp1 = Exp2 /                                                          Exp2QMExp1CO Exp1 #POST EXP-ENDIF# .                     Exp2QMExp1CO = Exp2QM Exp1CO .                                  Exp2QM = Exp2 '?' #POST EXP-IF# .                               Exp1CO = Exp1B ':' #POST EXP-ELSE# .                            Exp1B = Exp1 .                                                  Exp2 = Exp3 /                                                          Exp2OR Exp3A #POST ||OP# .                               Exp2OR = Exp2 '||' .                                            Exp3A = Exp3 .                                                  Exp3 = Exp4 /                                                          Exp3AND Exp4A #POST &&OP# .                              Exp3AND = Exp3 '&&' .                                           Exp4A = Exp4 .                                                   -->                                                            ( C-grammar                                          03/06/91 ) Exp4 = Exp5 /                                                          Exp4BOR Exp5A #POST |OP# .                               Exp4BOR = Exp4 '|' .                                            Exp5A = Exp5 .                                                  Exp5 = Exp6 /                                                          Exp5XOR Exp6A #POST ^OP# .                               Exp5XOR = Exp5 '^' .                                            Exp6A = Exp6 .                                                  Exp6 = Exp7 /                                                          Exp6BAND Exp7A #POST &OP# .                              Exp6BAND = Exp6B '&' .                                          Exp6B = Exp6 .                                                  Exp7A = Exp7 .                                                   -->                                                                                                                            ( C-grammar                                          03/06/91 ) Exp7 = Exp8 /                                                          Exp7 EqOp Exp8A #PERM 1 3 2 # .                          Exp8A = Exp8 .                                                  EqOp = '==' #POST ==OP# /                                              '!=' #POST !=OP# .                                       Exp8 = Exp9 /                                                          Exp8 CompOp Exp9A #PERM 1 3 2 # .                        Exp9A = Exp9 .                                                  CompOp = '<' #POST <OP# /                                                '>' #POST >OP# /                                                '<=' #POST <=OP# /                                              '>=' #POST >=OP# .                                      -->                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) Exp9 = Exp10 /                                                         Exp9 ShiftOp Exp10A #PERM 1 3 2 # .                      Exp10A = Exp10 .                                                ShiftOp = '<<' #POST <<OP# /                                              '>>' #POST >>OP# .                                    Exp10 = Exp11 /                                                         Exp10B AddOp Exp11A #PERM 1 3 2 # .                     Exp10B = Exp10 .                                                Exp11A = Exp11 .                                                AddOp = '+' #POST +OP# /                                                '-' #POST -OP# .                                        Exp11 = Exp12 /                                                         Exp11B MulOp Exp12A #PERM 1 3 2 # .                     Exp11B = Exp11 .                                                 -->                                                            ( C-grammar                                          03/06/91 ) Exp12A = Exp12 .                                                MulOp = '*' #POST *OP# /                                                '/' #POST /OP# /                                                '%' #POST %OP# .                                        Exp12 = Exp13 /                                                         OneUnOp Exp13A #PERM 2 1 # /                                    RepUnOp Exp12B #PERM 2 1 # /                                    PreOp Exp12B #PERM 2 1 # .                              Exp12B = Exp12 .                                                Exp13 = Exp14 /                                                         'sizeof' SizeofArg #POST sizeofOP# /                            Exp13B PostOp .                                         Exp13A = Exp13 .                                                 -->                                                                                                                            ( C-grammar                                          03/06/91 ) Exp13B = Exp13 .                                                OneUnOp = '-' #POST UN-OP# / '+' /                                        TypeSpec #PRE {*# #POST *}# .                         RepUnOp = '*' #POST UN*OP# /                                              '&' #POST UN&OP# /                                              '!' #POST UN!OP# /                                              '~' #POST UN~OP# .                                    PreOp = '++' #POST PRE++OP# /                                           '--' #POST PRE--OP# .                                   PostOp = '++' #POST POST++OP# /                                          '--' #POST POST--OP# .                                 SizeofArg = TypeSpec #PRE (*# #POST *)# /                                   Exp14 .                                              -->                                                                                                                            ( C-grammar                                          03/06/91 ) TypeSpec = TSLP TSContRP .                                      TSLP = '(' .                                                    TSContRP = TSContA ')' .                                        TSContA = TSCont .                                              TSCont = TSType /                                                        TSType TSDescriptor .                                  TSDescriptor = TSDescriptor1 /                                                 TSPrefix /                                                      TSPrefix TSDescriptor .                          TSDescriptor1 = TSDescriptor1 TSSufix /                                         TSSufix .                                       TSPrefix = TSPointer /                                                     TSPointer 'const' .                                  TSPointer = '*' .                                                -->                                                            ( C-grammar                                          03/06/91 ) TSSufix = TSALP ']' /                                                     TSALP ConstExp ']' /                                            TSFLP ')' /                                                     TSFLPTSDescriptor ')' .                               TSFLPTSDescriptor = TSFLP TSDescriptor .                        TSALP = '[' .                                                   TSFLP = '(' .                                                   TSType = Type .                                                 Exp14 = Exp15 /                                                         Exp14FactILP FactInd ']' #POST FIND-ELEM# /                     Exp14FactILP ']' #POST 0 FIND-ELEM# /                           Exp14FactPLP FactParms ')' #PERM 2 1 # #POST CALLFN# /          Exp14FactPLP ')' #POST CALLFN# /                                Exp14Dot FieldIdent #POST .OP# /                                Exp14Arrow FieldIdent #POST ->OP# . -->                 ( C-grammar                                          03/06/91 ) Exp14FactILP = Exp14A FactILP .                                 FactILP = '[' .                                                 FactInd = Expression .                                          Exp14FactPLP = Exp14A FactPLP .                                 FactPLP = '(' .                                                 Exp14Dot = Exp14A '.' .                                         Exp14Arrow = Exp14A '->' .                                      FieldIdent = Ident .                                            Exp14A = Exp14 .                                                 -->                                                                                                                                                                                                                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) FactParms = FactParmElList /                                                FactParmElList FPCommaListA /                                   FPCommaList .                                       FPCommaListA = FPCommaList .                                    FactParmElList = FactParmValue /                                                 FactParmElList FPCoLiFPVal .                   FPCoLiFPVal = FPCommaList FactParmValue .                       FPCommaList = ',' /                                                           FPCommaList ',' .                                 FactParmValue = Exp .                                                                                                           Exp15 = Term .                                                   -->                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) Term = Const /                                                         Ident /                                                         ExLPExpression ')' .                                     ExLPExpression = ExLP Expression .                              ConstExp = Const /                                                         Ident /                                                         CExLP ConstExp ')' .                                 ExLP = '(' .                                                    CExLP = '(' .                                                    -->                                                                                                                                                                                                                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) SourceFile = SourceFileA #REG TRANS# .                          SourceFileA = FragSeq #PRE MMODULE$ X NO-IMPORT# #POST ;S# .    FragSeq = Fragment /                                                      FragSeqA FragmentA .                                  FragSeqA = FragSeq .                                            FragmentA = Fragment .                                          Fragment = Declarationgrammar                                          03/06/91 ) Declaration = FnHeader FnBody /                                               GDeclaration .                                    GDeclaration = MemClTypeDescrsSC /                                             TypeDescrsSC /                                                  GTypeDef .                                       FnBody = FPDecls EBlock /                                                EBlock .                                               GTypeDef = TypeDef .                                             -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) FPDecls = GDeclaration /                                                  FPDeclsA GDeclaration .                               FPDeclsA = FPDecls .                                            EBlock = Block /                                                         BlockSC .                                              FnHeader =    MemClTypeDescrs /                                               TypeDescrs /                                                    MemClDescrs /                                                   DescriptorsB .                                    DescriptorsB = Descriptors .                                     -->                                                                                                                                                                                                                                                                                                                            ( C-grammargrammar                                          03/06/91 ) MemClTypeDescrsSC = MemClTypeDescrsA ';' .                      MemClTypeDescrsA = MemClTypeDescrs .                            TypeDescrsSC = TypeDescrsA ';' .                                TypeDescrsA = TypeDescrs .                                      MemClTypeDescrs = MemClType DescriptorsA .                      TypeDescrs = TypeA DescriptorsA .                               MemClDescrs = MemClassA DescriptorsA .                          BlockSC = BlockA ';' .                                          MemClType = MemClassA Type1 .                                   DescriptorsA = Descriptors .                                    Type1 = Type .                                                  TypeA = Type .                                                   -->                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) BlockA = Block .                                                MemClassA = MemClassgrammar                                          03/06/91 ) Block = BlockLP DeStRP /                                                BlockLP StRP /                                                  BlockLP DeRP /                                                  BlockLP '}' .                                           BlockLP = '{' .                                                 LocDecls = LDecl /                                                         LocDeclsA LDecl .                                    LocDeclsA = LocDecls .                                          LocDeclsB = LocDecls .                                          DeStRP = LocDeclsB StRP .                                       StRP = Stms '}' .                                               DeRP = LocDeclsB '}' .                                          LDecl = LcDeclaration .                                          -->                                                                                                                            ( C-grammar                                          03/06/91 ) LcDeclaration = LcMemClass1LcType LcDescriptors ';' /                           LcType1 LcDescriptors ';' /                                     LTypeDef .                                      LcMemClass1LcType = LcMemClass1 LcType .                        LcMemClass1 = LcMemClass .                                      LcType1 = LcType .                                              LcMemClass = MemClass .                                         LcType = Type .                                                 LcDescriptors = LcDescriptorList .                              LcDescriptorList = LcIniDescriptor /                                               LcDescriptorListCM LcIniDescriptor .         LcDescriptorListCM = LcDescriptorList ',' .                      -->                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) LcIniDescriptor = LcSimpDescriptor /                                              LcSimpDescriptorEQ LcIniValue .               LcSimpDescriptor = LcDescriptor .                               LcSimpDescriptorEQ = LcSimpDescriptor '=' .                     LcIniValue = IniValue .                                         LTypeDef = TypeDefgrammar                                          03/06/91 ) LcDescriptor = LcDescriptor1 /                                                 LcAST LcDescriptor .                             LcAST = '*' /                                                           LcAster 'const' .                                       LcAster = '*' .                                                 LcDescriptor1 = LcDescriptor2 /                                                 LcDescriptor1LP DFormParmListRP /                               LcDescriptor1LP ')' /                                           LcDescriptor1ALP ConstExp ']' /                                 LcDescriptor1ALP ']' .                          LcDescriptor2 = LcDIdent /                                                      LcLPDescriptor ')' .                            LcDescriptor1ALP = LcDescriptor1 '[' .                           -->                                                                                                                            ( C-grammar                                          03/06/91 ) LcDIdent = Ident .                                              LcLPDescriptor = LcLP1 LcDescriptor .                           LcLP1 = '(' .                                                   LcDescriptor1LP = LcDescriptorgrammar                                          03/06/91 ) TypeDef = 'typedef' TDType1 TDDescriptors ';' /                           'typedef' TDDescriptors ';' .                         TDType1 = TDType .                                              TDType = Type .                                                 TDDescriptors = TDDescriptorList .                              TDDescriptorList = TDSimpleDescriptor /                                            TDDescriptorListCM TDSimpleDescriptor .      TDDescriptorListCM = TDDescriptorList ',' .                      -->                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) TDSimpleDescriptor = TDDescriptorgrammar                                          03/06/91 ) TDDescriptor = TDDescriptor1 /                                                 TDAST TDDescriptor .                             TDAST = '*' /                                                           TDAster 'const' .                                       TDAster = '*' .                                                 TDDescriptor1 = TDDescriptor2 /                                                 TDDescriptor1LP DFormParmListRP /                               TDDescriptor1LP ')' /                                           TDDescriptor1ALP ConstExp ']' /                                 TDDescriptor1ALP ']' .                          TDDescriptor2 = TDDIdent /                                                      TDLPDescriptor ')' .                            TDDescriptor1ALP = TDDescriptor1 '[' .                           -->                                                                                                                            ( C-grammar                                          03/06/91 ) TDDIdent = Ident  #REG TYPENAME$# #PRE TYPEID$# .               TDLPDescriptor = TDLP1 TDDescriptor .                           TDLP1 = '(' .                                                   TDDescriptor1LP = TDDescriptor1 '(' .                            -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) Stms = Stm /                                                           Stms Stm .                                               Stm = IfStm /                                                         Stm1 .                                                    IfStm = ifcond Stm  #POST THEN# /                                       ifpart elseStm  #POST THEN# /                                   StmlabelCO IfStm /                                              ForHeader Stm /                                                 PreWCond Stm /                                                  doStm PostWCondA /                                              SwitchExp SwitchBlock .                                 ifcond = iflpExpression ')'  #POST IF# .                        ifpart = ifcond TBStm  #POST ELSE# .                            elseStm = 'else' Stm .                                           -->                                                            ( C-grammar                                          03/06/91 ) iflpExpression = iflp Expression .                              iflp = 'if' '(' .                                               doStm = 'do' Stm .                                              PostWCondA = PostWCond .                                        SwitchBlock = Stm .                                                                                                             StmlabelCO = Stmlabel ':' .                                     Stmlabel = Ident  #PRE STMLAB$# /                                          CStmlabel .                                          CStmlabel = 'case' ConstExp  #POST $CSTLAB# /                               'default'  #POST DEFAULT-LAB# .                      -->                                                                                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) Stm1 = StmlabelCO Stm1A /                                              ExpressionA ';'  #POST $EXP-STM# /                              ';' /                                                           StmBlock / ( 'asm' StmBlock / )                                 'break' ';' /                                                   'continue' ';' /                                                ReturnStm ';' /                                                 'goto' Glabel ';' .                                      Stm1A = Stm1 .                                                  ExpressionA = Expression .                                      StmBlock = Block .                                              ReturnStm = 'return' /                                                      'return' Expression .                               Glabel = Ident .                                                 -->                                                            ( C-grammar                                          03/06/91 ) TBStm = IfElseStm /                                                     Stm1 .                                                  IfElseStm = ifpart elseTBStm  #POST THEN# /                                 StmlabelCO IfElseStm /                                          ForHeader TBStm /                                               PreWCond TBStm /                                                doStm PostWCondB /                                              SwitchExp TBSwitchBlock .                           elseTBStm = 'else' TBStm .                                      PostWCondB = PostWCond .                                        TBSwitchBlock = TBStm .                                          -->                                                                                                                                                                                                                                                            ( C-grammar                                          03/06/91 ) ForHeader = ForLP FH123 .                                       ForLP = 'for' '(' .                                             FH123 = ForExp1 FH23 /                                                  ')' .                                                   ForExp1 = ExpressionA ';' /                                               ';' .                                                 FH23 = ')' /                                                           ForExp2 FH3 .                                            ForExp2 = ExpressionA ';' /                                               ';' .                                                 FH3 = ')' /                                                           ForExp3 ')' .                                             ForExp3 = Expression .                                           -->                                                                                                                            ( C-grammar                                          03/06/91 ) PreWCond = PreWLPExpression ')' .                               PreWLPExpression = PreWLP Expression .                          PreWLP = 'while' '(' .                                          PostWCond = PostWLPExpression ')' .                             PostWLPExpression = PostWLP Expression .                        PostWLP = 'while' '(' .                                         SwitchExp = SwLPExpression ')' .                                SwLPExpression = SwLP Expression .                              SwLP = 'switch' '(' .                                                                                                           =END=                                                                                                                                                                                                                                                                                                                           ( C-grammar                                          03/06/91 )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 